{"compress":true,"commitItems":[["bd9e41d7-96df-47b2-8fe1-1c271b0ba67b",1519703247769,"",[[1519703237261,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,0,"自定义注解之源码注解(RetentionPolicy.SOURCE)\n===\n\n\n"]],[0,0],[41,41]]],[1519703247364,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,0,"源码注解(RetentionPolicy.SOURCE)的生命周期只存在Java源文件这一阶段，是3种生命周期中最短的注解。当在Java源程序上加了一个注解，这个Java源程序要由javac去编译，javac把java源文件编译成.class文件，在编译成class时会把Java源程序上的源码注解给去掉。需要注意的是，在编译器处理期间源码注解还存在，即注解处理器Processor 也能处理源码注解，编译器处理完之后就没有该注解信息了。\n\n（关于注解处理器Processor的详细用法放在**编译时注解RetentionPolicy.CLASS**里说明，或则可以先看这个：[Java注解处理器使用详解](http://blog.csdn.net/github_35180164/article/details/52055994)）\n\n在这里就不用注解处理器来处理源码注解了，来看一个我之前看到的挺有用的用法。\n\n**"],[-1,5,"之"],[1,6,"**\n\n在开始写注解前，先来考虑我们平时会遇到的一种情况：\n\n我们定义的类有一个 **int** 型的状态参数要设置，但我们设置的状态又只能限定在**[OPEN=1, CLOSE=2]**这两种状态，如果我们要提供一个接口来设置的话，那么一种做法是定义一个**Enum**枚举来作为参数，这样就能限定参数的取值范围了，但是使用枚举会比常量占用更多的内存。\n\n这里可以用注解来处理这种问题，也就是下面要讲的自定义源码注解，这里需要用到一个元注解@IntDef，来看下代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试"],[1,10," \n3.  */  \n4.  public class TestSourceAnnotation {  \n\n6.  // 状态值  \n7.  public static final int STATUS_OPEN = 1;  \n8.  public static final int STATUS_CLOSE = 2;  \n\n10.  private static int sStatus = STATUS_OPEN;  \n\n13.  private TestSourceAnnotation() {}  \n\n16.  // 定义适用于参数的注解，限定取值范围为{STATUS_OPEN, STATUS_CLOSE}  \n17.  @Retention"],[1,34,"  "],[1,35,"18.  @Target(ElementType.PARAMETER)  \n19.  @IntDef({STATUS_OPEN, STATUS_CLOSE})  \n\n21.  public @interface Status {  \n22.  }  \n\n24.  /** \n25.  * 定义方法并使用@Status限定参数的取值 \n26.  * @param status \n27.  */  \n28.  public static void setStatus(@Status int status) {  \n29.  sStatus "],[1,36," status;  \n30.  }  \n\n32.  public static int getStatus() {  \n33.  return sStatus;  \n34.  }  \n\n37.  public static String getStatusDesc() {  \n38.  if (sStatus "],[1,38," STATUS_OPEN) {  "],[1,39,"39.  return \"打开状态\";  "],[1,40,"40.  } else {  "],[1,41,"41.  return \"关闭状态\";  \n42.  }  \n43.  }  \n44.  }  \n\n这里定义了一个**@Status**注解，并用注解**@IntDef**限定了取值范围，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**{STATUS_OPEN, STATUS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  \n\n总的来说还是挺好用的。"]],[0,41],[2593,2593]]],[1519703473325,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,191," "],[1,192," "],[-1,455," "],[1,456," "],[-1,463," "],[1,464," "],[-1,652,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  public class TestSourceAnnotation {  \n\n6.  // 状态值  \n7.  public static final int STATUS_OPEN = 1;  \n8.  public static final int STATUS_CLOSE = 2;  \n\n10.  private static int sStatus = STATUS_OPEN;  \n\n13.  private TestSourceAnnotation() {}  \n\n16.  // 定义适用于参数的注解，限定取值范围为{STATUS_OPEN, STATUS_CLOSE}  \n17.  @Retention(RetentionPolicy.SOURCE)  \n18.  @Target(ElementType.PARAMETER)  \n19.  @IntDef({STATUS_OPEN, STATUS_CLOSE})  \n\n21.  public @interface Status {  \n22.  }  \n\n24.  /** \n25.  * 定义方法并使用@Status限定参数的取值 \n26.  * @param status \n27.  */  \n28.  public static void setStatus(@Status int status) {  \n29.  sStatus = status;  \n30.  }  \n\n32.  public static int getStatus() {  \n33.  return sStatus;  \n34.  }  \n\n37.  public static String getStatusDesc() {  \n38.  if (sStatus == STATUS_OPEN) {  \n39.  return \"打开状态\";  \n40.  } else {  \n41.  return \"关闭状态\";  \n42.  }  \n43.  }  \n44.  }  "],[1,1739,"`"],[-1,1953," "],[1,1954," "],[-1,2043," "],[1,2044," "],[-1,2130," "],[1,2131," "],[-1,2137," "],[1,2138," "],[-1,2144," "],[1,2145," "],[-1,2152,"  "],[1,2154,"  "],[-1,2166," "],[1,2167," "],[-1,2171," "],[1,2172," "],[-1,2195," {  "],[1,2199," {  "],[-1,2206," "],[1,2207," "],[-1,2216," {  "],[1,2220," {  "],[-1,2227,"            "],[1,2239,"            "],[-1,2273," "],[1,2274," "],[-1,2290,"  "],[1,2292,"  "],[-1,2363,"  "],[1,2365,"  "],[-1,2377," = "],[1,2380," = "],[-1,2386,"  "],[1,2388,"  "],[-1,2394," "],[1,2395," "],[-1,2399," {  "],[1,2403," {  "],[-1,2474,"  "],[1,2476,"  "],[-1,2489," = "],[1,2492," = "],[-1,2497,"  "],[1,2499,"  "],[-1,2506,"  "],[1,2508,"  "],[-1,2569,"  "],[1,2571,"  "],[-1,2578,"  "],[1,2580,"  ``java"]],[652,1739],[659,659]]],[1519703473525,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,661,"\n"]],[659,659],[660,660]]],[1519703474541,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,660,"```"]],[660,660],[663,663]]],[1519703475623,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,660,"\n"]],[660,660],[661,661]]],[1519703476312,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,660,"1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  public class TestSourceAnnotation {  \n\n6.  // 状态值  \n7.  public static final int STATUS_OPEN = 1;  \n8.  public static final int STATUS_CLOSE = 2;  \n\n10.  private static int sStatus = STATUS_OPEN;  \n\n13.  private TestSourceAnnotation() {}  \n\n16.  // 定义适用于参数的注解，限定取值范围为{STATUS_OPEN, STATUS_CLOSE}  \n17.  @Retention(RetentionPolicy.SOURCE)  \n18.  @Target(ElementType.PARAMETER)  \n19.  @IntDef({STATUS_OPEN, STATUS_CLOSE})  \n\n21.  public @interface Status {  \n22.  }  \n\n24.  /** \n25.  * 定义方法并使用@Status限定参数的取值 \n26.  * @param status \n27.  */  \n28.  public static void setStatus(@Status int status) {  \n29.  sStatus = status;  \n30.  }  \n\n32.  public static int getStatus() {  \n33.  return sStatus;  \n34.  }  \n\n37.  public static String getStatusDesc() {  \n38.  if (sStatus == STATUS_OPEN) {  \n39.  return \"打开状态\";  \n40.  } else {  \n41.  return \"关闭状态\";  \n42.  }  \n43.  }  \n44.  }"]],[660,660],[1565,1565]]],[1519703477343,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,660,"1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  public class TestSourceAnnotation {  \n\n6.  // 状态值  \n7.  public static final int STATUS_OPEN = 1;  \n8.  public static final int STATUS_CLOSE = 2;  \n\n10.  private static int sStatus = STATUS_OPEN;  \n\n13.  private TestSourceAnnotation() {}  \n\n16.  // 定义适用于参数的注解，限定取值范围为{STATUS_OPEN, STATUS_CLOSE}  \n17.  @Retention(RetentionPolicy.SOURCE)  \n18.  @Target(ElementType.PARAMETER)  \n19.  @IntDef({STATUS_OPEN, STATUS_CLOSE})  \n\n21.  public @interface Status {  \n22.  }  \n\n24.  /** \n25.  * 定义方法并使用@Status限定参数的取值 \n26.  * @param status \n27.  */  \n28.  public static void setStatus(@Status int status) {  \n29.  sStatus = status;  \n30.  }  \n\n32.  public static int getStatus() {  \n33.  return sStatus;  \n34.  }  \n\n37.  public static String getStatusDesc() {  \n38.  if (sStatus == STATUS_OPEN) {  \n39.  return \"打开状态\";  \n40.  } else {  \n41.  return \"关闭状态\";  \n42.  }  \n43.  }  \n44.  }"]],[1565,1565],[660,660]]],[1519703477907,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,660,"/** \r\n * 测试源码注解 \r\n */  \r\npublic class TestSourceAnnotation {  \r\n  \r\n    // 状态值  \r\n    public static final int STATUS_OPEN = 1;  \r\n    public static final int STATUS_CLOSE = 2;  \r\n  \r\n    private static int sStatus = STATUS_OPEN;  \r\n  \r\n  \r\n    private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的注解，限定取值范围为{STATUS_OPEN, STATUS_CLOSE}  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_OPEN, STATUS_CLOSE})  \r\n  \r\n    public @interface Status {  \r\n    }  \r\n  \r\n    /** \r\n     * 定义方法并使用@Status限定参数的取值 \r\n     * @param status \r\n     */  \r\n    public static void setStatus(@Status int status) {  \r\n        sStatus = status;  \r\n    }  \r\n  \r\n    public static int getStatus() {  \r\n        return sStatus;  \r\n    }  \r\n  \r\n  \r\n    public static String getStatusDesc() {  \r\n        if (sStatus == STATUS_OPEN) {  \r\n            return \"打开状态\";  \r\n        } else {  \r\n            return \"关闭状态\";  \r\n        }  \r\n    }  \r\n}  "]],[660,660],[1630,1630]]],[1519703499074,[null,[[-1,653,"\n\n这里定义了"],[1,660,"``java\n"],[-1,664,"\r"],[1,665,"\n"],[-1,676,"\r"],[1,677,"\n"],[-1,683,"\r"],[1,684,"\n"],[-1,722,"\r\n  \r"],[1,727,"\n\n  \n"],[-1,740,"\r"],[1,741,"\n"],[-1,788,"\r"],[1,789,"\n"],[-1,837,"\r\n  \r"],[1,842,"\n\n  \n"],[-1,890,"\r\n  \r\n  \r"],[1,899,"\n\n  \n\n  \n"],[-1,939,"\r\n  \r\n  \r"],[1,948,"\n\n  \n\n  \n"],[-1,1003,"\r"],[1,1004,"\n"],[-1,1045,"\r"],[1,1046,"\n"],[-1,1083,"\r"],[1,1084,"\n"],[-1,1127,"\r\n  \r"],[1,1132,"\n\n  \n"],[-1,1165,"\r"],[1,1166,"\n"],[-1,1174,"\r\n  \r"],[1,1179,"\n\n  \n"],[-1,1188,"\r"],[1,1189,"\n"],[-1,1219,"\r"],[1,1220,"\n"],[-1,1242,"\r"],[1,1243,"\n"],[-1,1253,"\r"],[1,1254,"\n"],[-1,1311,"\r"],[1,1312,"\n"],[-1,1340,"\r"],[1,1341,"\n"],[-1,1349,"\r\n  \r"],[1,1354,"\n\n  \n"],[-1,1392,"\r"],[1,1393,"\n"],[-1,1419,"\r"],[1,1420,"\n"],[-1,1428,"\r\n  \r\n  \r"],[1,1437,"\n\n  \n\n  \n"],[-1,1482,"\r"],[1,1483,"\n"],[-1,1523,"\r"],[1,1524,"\n"],[-1,1553,"\r"],[1,1554,"\n"],[-1,1573,"\r"],[1,1574,"\n"],[-1,1603,"\r"],[1,1604,"\n"],[-1,1616,"\r"],[1,1617,"\n"],[-1,1625,"\r"],[1,1626,"\n"],[1,1634,"\n\n这里定义了"],[-1,1635,"\n"],[-1,2469,"``java"],[1,2475,""]],[653,653],[2475,2475]]],[1519703499075,[null,[[1,653,"\n\n这里定义了"],[-1,653,"``java\n"],[1,664,"\r"],[-1,664,"\n"],[1,676,"\r"],[-1,676,"\n"],[1,683,"\r"],[-1,683,"\n"],[1,722,"\r\n  \r"],[-1,722,"\n\n  \n"],[1,740,"\r"],[-1,740,"\n"],[1,788,"\r"],[-1,788,"\n"],[1,837,"\r\n  \r"],[-1,837,"\n\n  \n"],[1,890,"\r\n  \r\n  \r"],[-1,890,"\n\n  \n\n  \n"],[1,939,"\r\n  \r\n  \r"],[-1,939,"\n\n  \n\n  \n"],[1,1003,"\r"],[-1,1003,"\n"],[1,1045,"\r"],[-1,1045,"\n"],[1,1083,"\r"],[-1,1083,"\n"],[1,1127,"\r\n  \r"],[-1,1127,"\n\n  \n"],[1,1165,"\r"],[-1,1165,"\n"],[1,1174,"\r\n  \r"],[-1,1174,"\n\n  \n"],[1,1188,"\r"],[-1,1188,"\n"],[1,1219,"\r"],[-1,1219,"\n"],[1,1242,"\r"],[-1,1242,"\n"],[1,1253,"\r"],[-1,1253,"\n"],[1,1311,"\r"],[-1,1311,"\n"],[1,1340,"\r"],[-1,1340,"\n"],[1,1349,"\r\n  \r"],[-1,1349,"\n\n  \n"],[1,1392,"\r"],[-1,1392,"\n"],[1,1419,"\r"],[-1,1419,"\n"],[1,1428,"\r\n  \r\n  \r"],[-1,1428,"\n\n  \n\n  \n"],[1,1482,"\r"],[-1,1482,"\n"],[1,1523,"\r"],[-1,1523,"\n"],[1,1553,"\r"],[-1,1553,"\n"],[1,1573,"\r"],[-1,1573,"\n"],[1,1603,"\r"],[-1,1603,"\n"],[1,1616,"\r"],[-1,1616,"\n"],[1,1625,"\r"],[-1,1625,"\n"],[-1,1634,"\n\n这里定义了"],[1,1642,"\n"],[1,2475,"``java"],[-1,2475,""]],[2475,2475],[653,653]]],[1519703482901,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,664,"\r"],[-1,676,"\r"],[-1,683,"\r"],[-1,722,"\r"],[-1,726,"\r"],[-1,740,"\r"],[-1,788,"\r"],[-1,837,"\r"],[-1,841,"\r"],[-1,890,"\r"],[-1,894,"\r"],[-1,897," \r"],[-1,939,"\r"],[-1,943,"\r"],[-1,947,"\r"],[-1,1003,"\r"],[-1,1045,"\r"],[-1,1083,"\r"],[-1,1127,"\r"],[-1,1131,"\r"],[-1,1165,"\r"],[-1,1174,"\r"],[-1,1178,"\r"],[-1,1188,"\r"],[-1,1219,"\r"],[-1,1242,"\r"],[-1,1253,"\r"],[-1,1311,"\r"],[-1,1340,"\r"],[-1,1349,"\r"],[-1,1353,"\r"],[-1,1392,"\r"],[-1,1419,"\r"],[-1,1428,"\r"],[-1,1432,"\r"],[-1,1436,"\r"],[-1,1482,"\r"],[-1,1523,"\r"],[-1,1553,"\r"],[-1,1573,"\r"],[-1,1603,"\r"],[-1,1616,"\r"],[-1,885," \r"]],[887,887],[885,885]]],[1519703483374,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,885,"\n"]],[885,885],[884,884]]],[1519703484203,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,882,"  "]],[884,884],[882,882]]],[1519703484504,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,882,"\n"]],[882,882],[881,881]]],[1519703486304,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,831,"  "]],[833,833],[831,831]]],[1519703486604,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,831,"\n"]],[831,831],[830,830]]],[1519703487587,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,879,"\n"]],[878,878],[879,879]]],[1519703488619,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,919,"\n"]],[920,920],[919,919]]],[1519703493555,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1101,"  "]],[1103,1103],[1101,1101]]],[1519703493888,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1101,"\n"]],[1101,1101],[1100,1100]]],[1519703497159,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1384,"  "]],[1386,1386],[1384,1384]]],[1519703497425,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1384,"\n"]],[1384,1384],[1383,1383]]],[1519703552359,[null,[[-1,653,"\n\n这里定义了"],[1,660,"``java\n"],[-1,880,"\n"],[-1,919,"\n"],[1,920," "],[-1,1561,";  \r\n  \r\n  \r"],[-1,1578,"private TestSourceAnnotation() {"],[-1,1613,"\r"],[-1,1615,"  \r\n  \r\n    // 定义适用于参数的注解，限定取值范围为{STATUS_OPEN, STATUS_CLOSE"],[-1,1677,"\r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_OPEN, STATUS_CLOSE})  \r\n  \r\n    public @interface Status {  \r\n    }  \r\n  \r\n    /** \r\n     * 定义方法并使用@Status限定参数的取值 \r\n     * @param status \r\n     */  \r\n    public static void setStatus(@Status int status) {  \r\n        sStatus = status;  \r\n    }  \r\n  \r\n    public static int getStatus() {  \r\n        return sStatus;  \r\n    }  \r\n  \r\n  \r\n    public static String getStatusDesc() {  \r\n        if (sStatus == STATUS_OPEN) {  \r\n            return \"打开状态\";  \r\n        } else {  \r\n            return \"关闭状态\";  \r\n        }  \r\n    }  \r\n}  \n```一\n"],[1,2310,"\n```\n\n这里定义了一"],[-1,3143,"``java"],[1,3149,""]],[653,653],[3149,3149]]],[1519703552359,[null,[[1,653,"\n\n这里定义了"],[-1,653,"``java\n"],[1,880,"\n"],[1,918,"\n"],[-1,918," "],[1,1560,";  \r\n  \r\n  \r"],[1,1565,"private TestSourceAnnotation() {"],[1,1568,"\r"],[1,1569,"  \r\n  \r\n    // 定义适用于参数的注解，限定取值范围为{STATUS_OPEN, STATUS_CLOSE"],[1,1572,"\r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_OPEN, STATUS_CLOSE})  \r\n  \r\n    public @interface Status {  \r\n    }  \r\n  \r\n    /** \r\n     * 定义方法并使用@Status限定参数的取值 \r\n     * @param status \r\n     */  \r\n    public static void setStatus(@Status int status) {  \r\n        sStatus = status;  \r\n    }  \r\n  \r\n    public static int getStatus() {  \r\n        return sStatus;  \r\n    }  \r\n  \r\n  \r\n    public static String getStatusDesc() {  \r\n        if (sStatus == STATUS_OPEN) {  \r\n            return \"打开状态\";  \r\n        } else {  \r\n            return \"关闭状态\";  \r\n        }  \r\n    }  \r\n}  \n```一\n"],[-1,1572,"\n```\n\n这里定义了一"],[1,2417,"``java"],[-1,2417,""]],[3149,3149],[653,653]]],[1519703549148,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1779,"\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  "],[1,2417,"```java"]],[1779,2417],[1786,1786]]],[1519703549361,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1788,"\n"]],[1786,1786],[1787,1787]]],[1519703550298,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1787,"```"]],[1787,1787],[1790,1790]]],[1519703551259,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1787,"\n"]],[1787,1787],[1788,1788]]],[1519703551892,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1787,"1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }"]],[1787,1787],[2242,2242]]],[1519703553744,[null,[[-1,653,"\n\n这里定义了"],[1,660,"``java\n"],[-1,880,"\n"],[-1,919,"\n"],[1,920," "],[-1,1561,";  \r"],[-1,1568,"\r\n  \r\n"],[1,1576,"}"],[-1,1578,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[1,1638,"\n}  \n```\n\n这里定义了一个**@Status**"],[1,1641,"并用注解**@IntDef**"],[1,1643,"了"],[-1,1647,"为"],[1,1648,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[-1,1675,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[1,1779,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[-1,1786,"T"],[1,1787,"\n"],[1,2243,""],[-1,2246,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[653,653],[2246,2246]]],[1519703553744,[null,[[1,653,"\n\n这里定义了"],[-1,653,"``java\n"],[1,880,"\n"],[1,918,"\n"],[-1,918," "],[1,1560,";  \r"],[1,1563,"\r\n  \r\n"],[-1,1565,"}"],[1,1568,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[-1,1568,"\n}  \n```\n\n这里定义了一个**@Status**"],[-1,1599,"并用注解**@IntDef**"],[-1,1616,"了"],[1,1621,"为"],[-1,1621,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[1,1701,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[-1,1701,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[1,1786,"T"],[-1,1786,"\n"],[-1,2243,""],[1,2246,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[2246,2246],[653,653]]],[1519703552687,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1787,"1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }"]],[2242,2242],[1787,1787]]],[1519703553204,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1787,"/** \r\n * 测试源码注解 \r\n */  \r\nprivate void _testSourceAnnotation() {  \r\n    if (mIsOpen) {  \r\n//            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \r\n        TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \r\n        mIsOpen = false;  \r\n    } else {  \r\n        TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \r\n        mIsOpen = true;  \r\n    }  \r\n  \r\n    mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \r\n}"]],[1787,1787],[2247,2247]]],[1519703561658,[null,[[-1,653,"\n\n这里定义了"],[1,660,"``java\n"],[-1,880,"\n"],[-1,919,"\n"],[1,920," "],[-1,1561,";  \r"],[-1,1568,"\r\n"],[-1,1572,"\r\n    private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的注解，限定取值范围为{STATUS_OPEN, STATUS_CLOSE}  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    "],[1,1763,"}  \n}  \n```\n\n这里定义了一个**@Status**注解，并用注解**"],[-1,1770,"({STATUS_```javaT/"],[1,1788,"**限定了取值范围，最后将**@"],[-1,1790," \r\n "],[-1,1795," 测试源码注解 \r\n "],[-1,1807,"/  \r\nprivate void _test"],[-1,1831,"ourceAnno"],[-1,1843,"ion() {  \r\n    if (mIsOpen) {  \r\n//            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \r\n        TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \r\n        mIsOpen = false;  \r\n    } else {  \r\n        TestSourceAnnotation.setStatus(TestSourceAnnotation."],[1,2127,"us**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**{"],[-1,2138,");  \r\n        mIsOpen = true;  \r\n    }  \r\n  \r\n    mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \r\n}\n```U\n"],[1,2253,", STATU"],[-1,2339,"\n**["],[1,2343,"```"],[-1,2347,"]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")"],[-1,2519,"\n1.  "],[-1,2529,"2. "],[1,2532,"\n"],[-1,2543,"3. "],[1,2546,"\n"],[-1,2552,"4.  "],[1,2556,"\n"],[-1,2597,"5."],[1,2599,"\n  "],[-1,2618,"6.  "],[1,2622,"\n"],[-1,2690,"7."],[1,2692,"\n      "],[-1,2763,"8."],[1,2765,"\n      "],[-1,2786,"9."],[1,2788,"\n  "],[-1,2801,"10."],[1,2804,"\n      "],[-1,2874,"11."],[1,2877,"\n      "],[-1,2897,"12."],[1,2900,"\n  "],[-1,2907,"14."],[1,2910,"  \n\n  "],[-1,2969,"15.  }  "],[1,2977,"\n}\n`"],[-1,2979,"java"]],[653,653],[2979,2979]]],[1519703561658,[null,[[1,653,"\n\n这里定义了"],[-1,653,"``java\n"],[1,880,"\n"],[1,918,"\n"],[-1,918," "],[1,1560,";  \r"],[1,1563,"\r\n"],[1,1565,"\r\n    private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的注解，限定取值范围为{STATUS_OPEN, STATUS_CLOSE}  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    "],[-1,1565,"}  \n}  \n```\n\n这里定义了一个**@Status**注解，并用注解**"],[1,1612,"({STATUS_```javaT/"],[-1,1612,"**限定了取值范围，最后将**@"],[1,1630," \r\n "],[1,1631," 测试源码注解 \r\n "],[1,1632,"/  \r\nprivate void _test"],[1,1633,"ourceAnno"],[1,1636,"ion() {  \r\n    if (mIsOpen) {  \r\n//            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \r\n        TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \r\n        mIsOpen = false;  \r\n    } else {  \r\n        TestSourceAnnotation.setStatus(TestSourceAnnotation."],[-1,1636,"us**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**{"],[1,1686,");  \r\n        mIsOpen = true;  \r\n    }  \r\n  \r\n    mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \r\n}\n```U\n"],[-1,1686,", STATU"],[1,1779,"\n**["],[-1,1779,"```"],[1,1786,"]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")"],[1,1787,"\n1.  "],[1,1792,"2. "],[-1,1792,"\n"],[1,1804,"3. "],[-1,1804,"\n"],[1,1811,"4.  "],[-1,1811,"\n"],[1,1853,"5."],[-1,1853,"\n  "],[1,1875,"6.  "],[-1,1875,"\n"],[1,1944,"7."],[-1,1944,"\n      "],[1,2022,"8."],[-1,2022,"\n      "],[1,2050,"9."],[-1,2050,"\n  "],[1,2066,"10."],[-1,2066,"\n      "],[1,2143,"11."],[-1,2143,"\n      "],[1,2170,"12."],[-1,2170,"\n  "],[1,2180,"14."],[-1,2180,"  \n\n  "],[1,2245,"15.  }  "],[-1,2245,"\n}\n`"],[1,2251,"java"]],[2979,2979],[653,653]]],[1519703558072,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1791,"\r"],[-1,1803,"\r"],[-1,1810,"\r"],[-1,1852,"\r"],[-1,1874,"\r"],[-1,1883,"       "],[-1,1943,"\r"],[-1,2021,"\r"],[-1,2049,"\r"],[-1,2065,"\r"],[-1,2142,"\r"],[-1,2169,"\r"],[-1,2178,"\r"],[-1,2182,"\r"],[-1,2244,"\r"]],[1878,1885],[1878,1878]]],[1519703559398,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1871,"\t\t"]],[1871,1871],[1873,1873]]],[1519703561306,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1875,"     "]],[1875,1880],[1875,1875]]],[1519703592116,[null,[[-1,653,"\n\n这里定义了"],[1,660,"``java\n"],[-1,880,"\n"],[-1,919,"\n"],[1,920," "],[-1,1561,";  \r"],[-1,1568,"\r\n  \r\n"],[1,1576,"}"],[-1,1578,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[1,1638,"\n}  \n```\n\n这里定义了一个**@Status**"],[1,1641,"并用注解**@IntDef**"],[1,1643,"了"],[-1,1647,"为"],[1,1648,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[-1,1675,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[1,1779,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[-1,1786,"T"],[1,1787,"\n"],[1,2224,""],[-1,2227,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[653,653],[2227,2227]]],[1519703592116,[null,[[1,653,"\n\n这里定义了"],[-1,653,"``java\n"],[1,880,"\n"],[1,918,"\n"],[-1,918," "],[1,1560,";  \r"],[1,1563,"\r\n  \r\n"],[-1,1565,"}"],[1,1568,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[-1,1568,"\n}  \n```\n\n这里定义了一个**@Status**"],[-1,1599,"并用注解**@IntDef**"],[-1,1616,"了"],[1,1621,"为"],[-1,1621,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[1,1701,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[-1,1701,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[1,1786,"T"],[-1,1786,"\n"],[-1,2224,""],[1,2227,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[2227,2227],[653,653]]],[1519703589394,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,633,"**"]],[633,633],[635,635]]],[1519703590781,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,645,"**"]],[645,645],[647,647]]],[1519703623240,[null,[[-1,657,"\n\n这里定义了"],[1,664,"``java\n"],[-1,884,"\n"],[-1,923,"\n"],[1,924," "],[-1,1565,";  \r"],[-1,1572,"\r\n  \r\n"],[1,1580,"}"],[-1,1582,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[1,1642,"\n}  \n```\n\n这里定义了一个**@Status**"],[1,1645,"并用注解**@IntDef**"],[1,1647,"了"],[-1,1651,"为"],[1,1652,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[-1,1679,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[1,1783,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[-1,1790,"T"],[1,1791,"\n"],[1,2228,""],[-1,2231,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[657,657],[2231,2231]]],[1519703623240,[null,[[1,657,"\n\n这里定义了"],[-1,657,"``java\n"],[1,884,"\n"],[1,922,"\n"],[-1,922," "],[1,1564,";  \r"],[1,1567,"\r\n  \r\n"],[-1,1569,"}"],[1,1572,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[-1,1572,"\n}  \n```\n\n这里定义了一个**@Status**"],[-1,1603,"并用注解**@IntDef**"],[-1,1620,"了"],[1,1625,"为"],[-1,1625,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[1,1705,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[-1,1705,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[1,1790,"T"],[-1,1790,"\n"],[-1,2228,""],[1,2231,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[2231,2231],[657,657]]],[1519703611065,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,647,"xian"]],[647,647],[651,651]]],[1519703612318,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,647,"xian"]],[651,651],[647,647]]],[1519703618311,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,647,"限定整型数据的"]],[647,647],[654,654]]],[1519703624752,[null,[[-1,664,"\n\n这里定义了"],[1,671,"``java\n"],[-1,891,"\n"],[-1,930,"\n"],[1,931," "],[-1,1572,";  \r"],[-1,1579,"\r\n  \r\n"],[1,1587,"}"],[-1,1589,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[1,1649,"\n}  \n```\n\n这里定义了一个**@Status**"],[1,1652,"并用注解**@IntDef**"],[1,1654,"了"],[-1,1658,"为"],[1,1659,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[-1,1686,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[1,1790,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[-1,1797,"T"],[1,1798,"\n"],[1,2235,""],[-1,2238,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[664,664],[2238,2238]]],[1519703624752,[null,[[1,664,"\n\n这里定义了"],[-1,664,"``java\n"],[1,891,"\n"],[1,929,"\n"],[-1,929," "],[1,1571,";  \r"],[1,1574,"\r\n  \r\n"],[-1,1576,"}"],[1,1579,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[-1,1579,"\n}  \n```\n\n这里定义了一个**@Status**"],[-1,1610,"并用注解**@IntDef**"],[-1,1627,"了"],[1,1632,"为"],[-1,1632,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[1,1712,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[-1,1712,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[1,1797,"T"],[-1,1797,"\n"],[-1,2235,""],[1,2238,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[2238,2238],[664,664]]],[1519703624193,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,653,"的"]],[654,654],[653,653]]],[1519703632807,[null,[[-1,663,"\n\n这里定义了"],[1,670,"``java\n"],[-1,890,"\n"],[-1,929,"\n"],[1,930," "],[-1,1571,";  \r"],[-1,1578,"\r\n  \r\n"],[1,1586,"}"],[-1,1588,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[1,1648,"\n}  \n```\n\n这里定义了一个**@Status**"],[1,1651,"并用注解**@IntDef**"],[1,1653,"了"],[-1,1657,"为"],[1,1658,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[-1,1685,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[1,1789,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[-1,1796,"T"],[1,1797,"\n"],[1,2234,""],[-1,2237,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[663,663],[2237,2237]]],[1519703632807,[null,[[1,663,"\n\n这里定义了"],[-1,663,"``java\n"],[1,890,"\n"],[1,928,"\n"],[-1,928," "],[1,1570,";  \r"],[1,1573,"\r\n  \r\n"],[-1,1575,"}"],[1,1578,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[-1,1578,"\n}  \n```\n\n这里定义了一个**@Status**"],[-1,1609,"并用注解**@IntDef**"],[-1,1626,"了"],[1,1631,"为"],[-1,1631,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[1,1711,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[-1,1711,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[1,1796,"T"],[-1,1796,"\n"],[-1,2234,""],[1,2237,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[2237,2237],[663,663]]],[1519703632269,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,653,"范围"]],[653,653],[655,655]]],[1519703637889,[null,[[-1,665,"\n\n这里定义了"],[1,672,"``java\n"],[-1,892,"\n"],[-1,931,"\n"],[1,932," "],[-1,1573,";  \r"],[-1,1580,"\r\n  \r\n"],[1,1588,"}"],[-1,1590,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[1,1650,"\n}  \n```\n\n这里定义了一个**@Status**"],[1,1653,"并用注解**@IntDef**"],[1,1655,"了"],[-1,1659,"为"],[1,1660,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[-1,1687,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[1,1791,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[-1,1798,"T"],[1,1799,"\n"],[1,2236,""],[-1,2239,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[665,665],[2239,2239]]],[1519703637889,[null,[[1,665,"\n\n这里定义了"],[-1,665,"``java\n"],[1,892,"\n"],[1,930,"\n"],[-1,930," "],[1,1572,";  \r"],[1,1575,"\r\n  \r\n"],[-1,1577,"}"],[1,1580,"private TestSourceAnnotation() {}  \r\n  \r\n  \r\n    // 定义适用于参数的"],[-1,1580,"\n}  \n```\n\n这里定义了一个**@Status**"],[-1,1611,"并用注解**@IntDef**"],[-1,1628,"了"],[1,1633,"为"],[-1,1633,"，最后将**@****Status**注解用在参数上就行了，这样在使用调用方法的使用只能使用指定的参数**"],[1,1713,"  \r\n    @Retention(RetentionPolicy.SOURCE)  \r\n    @Target(ElementType.PARAMETER)  \r\n    @IntDef({STATUS_"],[-1,1713,"**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n"],[1,1798,"T"],[-1,1798,"\n"],[-1,2236,""],[1,2239,"U\nS_CLOSE}**，就算用数值1编译器也会提示报错。除了**@IntDef**注解外还用一个**@StringDef**注解可以使用，用来处理字符串。\n\n看下使用代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52119731# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52119731# \"copy\")\n\n1.  /** \n2.  * 测试源码注解 \n3.  */  \n4.  private void _testSourceAnnotation() {  \n5.  if (mIsOpen) {  \n6.  //            TestSourceAnnotation.setStatus(1); 直接设置数值编译器会直接提示错误  \n7.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_CLOSE);  \n8.  mIsOpen = false;  \n9.  } else {  \n10.  TestSourceAnnotation.setStatus(TestSourceAnnotation.STATUS_OPEN);  \n11.  mIsOpen = true;  \n12.  }  \n\n14.  mTvDesc.setText(TestSourceAnnotation.getStatusDesc());  \n15.  }  ``java"]],[2239,2239],[665,665]]],[1519703635640,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,647,"限定整型数据范围"]],[647,655],[647,647]]],[1519703636760,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,645,"（）"]],[645,645],[647,647]]],[1519703637514,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,646,"限定整型数据范围"]],[646,646],[654,654]]]]]]}