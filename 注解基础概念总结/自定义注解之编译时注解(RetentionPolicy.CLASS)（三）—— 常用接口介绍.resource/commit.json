{"compress":true,"commitItems":[["90badab4-ae82-4eba-8650-08030148f663",1519705388819,"",[[1519705360747,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,0,"自定义注解之编译时注解(RetentionPolicy.CLASS)（三）—— 常用接口介绍\n===\n\n\n"]],[0,0],[53,53]]],[1519705388148,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,0,"自"],[1,1,"前面介绍了关于编译时注解的使用方式，这里再补充一个关于注解处理器开发中的一些常用类、接口的使用方式和概念。\n\n**Element和TypeMirror**\n\n我觉得这两个是开发注解处理器最重要的两个概念，理解这两个的概念和使用是非常有必要的。\n\n这两个都是接口，先来看一下**Element**的"],[1,3,"：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个程序元素，比如包、类或者方法，有如下几种子接口： \n3.  * ExecutableElement：表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括"],[-1,5,"之编译时"],[1,9,"类型元素 ； \n4.  * PackageElement：表示一个包程序元素； \n5.  * TypeElement：表示一个类或接口程序元素； \n6.  * TypeParameterElement：表示一般类、接口、方法或构造方法元素的形式类型参数； \n7.  * VariableElement：表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数 \n8.  */  \n9.  public interface Element extends AnnotatedConstruct {  \n10.  /** \n11.  * 返回此元素定义的类型 \n12.  * 例如，对于一般类元素 C<N extends Number>，返回参数化类型 C<N> \n13.  */  \n14.  TypeMirror asType();  \n\n16.  /** \n17.  * 返回此元素的种类：包、类、接口、方法、字段...,如下枚举值 \n18.  * PACKAGE, ENUM, CLASS, ANNOTATION_TYPE, INTERFACE, ENUM_CONSTANT, FIELD, PARAMETER, LOCAL_VARIABLE, EXCEPTION_PARAMETER, \n19.  * METHOD, CONSTRUCTOR, STATIC_INIT, INSTANCE_INIT, TYPE_PARAMETER, OTHER, RESOURCE_VARIABLE; \n20.  */  \n21.  ElementKind getKind();  \n\n23.  /** \n24.  * 返回此元素的修饰符,如下枚举值 \n25.  * PUBLIC, PROTECTED, PRIVATE, ABSTRACT, DEFAULT, STATIC, FINAL, \n26.  * TRANSIENT, VOLATILE, SYNCHRONIZED, NATIVE, STRICTFP; \n27.  */  \n28.  Set<Modifier> getModifiers();  \n\n30.  /** \n31.  * 返回此元素的简单名称,例如 \n32.  * 类型元素 java.util.Set<E> 的简单名称是 \"Set\"； \n33.  * 如果此元素表示一个未指定的包，则返回一个空名称； \n34.  * 如果它表示一个构造方法，则返回名称 \"<init>\"； \n35.  * 如果它表示一个静态初始化程序，则返回名称 \"<clinit>\"； \n36.  * 如果它表示一个匿名类或者实例初始化程序，则返回一个空名称 \n37.  */  \n38.  Name getSimpleName();  \n\n40.  /** \n41.  * 返回封装此元素的最里层元素。 \n42.  * 如果此元素的声明在词法上直接封装在另一个元素的声明中，则返回那个封装元素； \n43.  * 如果此元素是顶层类型，则返回它的包； \n44.  * 如果此元素是一个包，则返回 null； \n45.  * 如果此元素是一个泛型参数，则返回 null. \n46.  */  \n47.  Element getEnclosingElement();  \n\n49.  /** \n50.  * 返回此元素直接封装的子元素 \n51.  */  \n52.  List<? extends Element> getEnclosedElements();  \n\n54.  /** \n55.  * 返回直接存在于此元素上的注解 \n56.  * 要获得继承的注解，可使用 getAllAnnotationMirrors \n57.  */  \n58.  @Override  \n59.  List<? extends AnnotationMirror> getAnnotationMirrors();  \n\n61.  /** \n62.  * 返回此元素针对指定类型的注解（如果存在这样的注解），否则返回 null。注解可以是继承的，也可以是直接存在于此元素上的 \n63.  */  \n64.  @Override  \n65.  <A extends Annotation> A getAnnotation(Class<A> annotationType);  \n66.  }  \n\n**Element** 代表程序的元素，在注解处理过程中，编译器会扫描所有的Java源文件，并将源码中的每一个部分都看作特定类型的 **Element**。它可以代表包、类、接口、方法、字段等多种元素种类，具体看**getKind()**方法中所指代的种类，每个**Element** 代表一个静态的、语言级别的构件。\n\nElement 有五个直接子接口，它们分别代表一种特定类型的元素，如下： \n\n| **PackageElement** | 表示一个包程序元素 |\n| **TypeElement** | 表示一个类或接口程序元素 |\n| **VariableElement** | 表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数 |\n| **ExecutableElement** | 表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括"],[1,11,"类型元素 |\n| **TypeParameterElement** | 表示一般类、接口、方法或构造方法元素的泛型参数 |\n\n在开发中**Element**可根据实际情况强转为以上5种中的一种，它们都带有各自独有的方法，来看个简单的例子：\n\n**[java]** [view plain]"],[1,12,"http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  package com.example;        // PackageElement  \n\n3.  import java.util.List;  \n\n5.  public class Sample         // TypeElement  \n6.  <T extends List> {  // TypeParameterElement  \n\n8.  private int num;        // VariableElement  \n9.  String name;            // VariableElement  \n\n11.  public Sample() {}      // ExecuteableElement  \n\n13.  public void setName(    // ExecuteableElement  \n14.  String name     // VariableElement  \n15.  ) {}  \n16.  }  \n\n源码中的每个部分都作为一个**Element**，而**TypeElement**对应着一种更具体的类型元素。根据上面的表格可以知道，一种特定的元素一般不止指代一种元素种类(**ElementKind**)，比如**TypeElement**可以指代类或接口，要知道一个元素的准确的种类需要调用**getKind()**方法，该方法返回一个**ElementKind**枚举值来表示具体种类，如下：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public enum ElementKind {  \n\n3.  /** A package. */  \n4.  PACKAGE,  \n5.  /** An enum type. */  \n6.  ENUM,  \n7.  /** A class not described by a more specific kind (like {@code ENUM}). */  \n8.  CLASS,  \n9.  /** An annotation type. */  \n10.  ANNOTATION_TYPE,  \n11.  /** An interface not described by a more specific kind */  \n12.  INTE"],[1,13,"FACE,  \n\n14.  // Variabl"],[1,14,"s  \n15.  /** An enum cons"],[1,15,"ant. */  \n16.  ENUM_CONSTANT,  \n17.  /** A fi"],[1,16,"ld "],[1,17,"o"],[1,18," descr"],[1,19,"bed by a m"],[1,20,"re specific ki"],[1,21,"d */  \n18.  FIELD,  \n19.  /** A parameter of a method or constructor. */  \n20.  "],[1,22,"ARAMETER,  \n21.  /** A l"],[1,23,"ca"],[1,24," var"],[1,25,"able. */  \n22.  LOCAL_VARIABLE,  \n23.  /** A parameter of an ex"],[1,26,"eption handler. */  \n24.  EXCEPTION_PARAMETER,  \n\n26.  // Executables  \n27.  /** A method. */  \n28.  METHOD,  \n29.  /** A constructor. */  \n30.  CONSTRUCTOR,  \n31.  /** A static initializer. */  \n32.  STATIC_INIT,  \n33.  /** An instance initializer. */  \n34.  INSTANCE_INIT,  \n35.  /** A t"],[1,27,"pe parameter"],[1,28," */  \n36.  TYPE_PARAMETER,  \n\n38.  /** An implementation-reserved element. This is not the element you are looking for. */  \n39.  OTHER,  \n40.  /** \n41.  * A resource variable. \n42.  * @since 1.7 \n43.  */  \n44.  RESOURCE_VARIABLE;  \n45.  }  \n\n上面管**ElementKind**称作**元素的种类**，因为它和**元素的类型TypeMirror**很容易混掉。**TypeMirror**表示的是 Java 编程语言中的类型，比如上面例子中的字段**String name**，它的元素种类为**FIELD**，而它的元素类型为**DE"],[-1,31,"SS)（三）—— 常用接口介绍\n===\n"],[1,51,"RED**表示一个类类型，这里对应Java 编程语言中的类型为**java.lang.String**。**Element**代表的是源代码上的元素，**TypeMirror**代表的是**Element**对应Java 编程语言中的类型。\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示 Java 编程语言中的类型 \n3.  */  \n4.  public interface TypeMirror {  \n5.  /** \n6.  * 返回此类型的种类，一个 TypeKind 枚举值： \n7.  */  \n8.  TypeKind getKind();  \n9.  }  \n\n**TypeMirror**和**Element**一样有一个**getKind()**方法来获取具体的类型，方法返回一个枚举值，如下：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public enum TypeKind {  \n2.  /** The primitive type {@code boolean}. */  \n3.  BOOLEAN,  \n4.  /** The primitive type {@code byte}. */  \n5.  BYTE,  \n6.  /** The primitive type {@code short}. */  \n7.  SHORT,  \n8.  /** The primitive type {@code int}. */  \n9.  INT,  \n10.  /** The primitive type {@code long}. */  \n11.  LONG,  \n12.  /** The primitive type {@code char}. */  \n13.  CHAR,  \n14.  /** The primitive type {@code float}. */  \n15.  FLOAT,  \n16.  /** The primitive type {@code double}. */  \n17.  DOUBLE,  \n18.  /** The pseudo-type corresponding to the keyword {@code void}. */  \n19.  VOID,  \n20.  /** A pseudo-type used where no actual type is appropriate. */  \n21.  NONE,  \n22.  /** The null type. */  \n23.  NULL,  \n24.  /** An array type. */  \n25.  ARRAY,  \n26.  /** A class or interface type. */  \n27.  DECLARED,  \n28.  /** A class or interface type that could not be resolved. */  \n29.  ERROR,  \n30.  /** A type variable. */  \n31.  TYPEVAR,  \n32.  /** A wildcard type argument. */  \n33.  WILDCARD,  \n34.  /** A pseudo-type corresponding to a package element. */  \n35.  PACKAGE,  \n36.  /** A method, constructor, or initializer. */  \n37.  EXECUTABLE,  \n38.  /** An implementation-reserved type. This is not the type you are looking for. */  \n39.  OTHER,  \n40.  /** A union type. */  \n41.  UNION,  \n42.  /** An intersection type. */  \n43.  INTERSECTION;  \n44.  }  \n\n可以看到和**ElementKind**所描述的是不同的方面。不知道这样说明的清不清楚，其实这种概念上的东西自己用几次会有更好理解，这东西就说到这。\n\n**Element的直接子接口**\n\n这里列一下5个Element子接口常用方法，大部分描述是从JDK PAI手册中截取。这东西你也没必要一次看完，大概了解一下，等到需要用的时候能够知道有这么个东西就行了。\n\n**TypeElement**\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个类或接口程序元素 \n3.  */  \n4.  public interface TypeElement {  \n\n6.  /** \n7.  * 返回此类型元素的嵌套种类 \n8.  * 某一类型元素的嵌套种类 (nesting kind)。类型元素的种类有四种：top-level（顶层）、member（成员）、local（局部）和 anonymous（匿名） \n9.  */  \n10.  NestingKind getNestingKind();  \n\n12.  /** \n13.  * 返回此类型元素的完全限定名称。更准确地说，返回规范 名称。对于没有规范名称的局部类和匿名类，返回一个空名称. \n14.  * 一般类型的名称不包括对其形式类型参数的任何引用。例如，接口 java.util.Set<E> 的完全限定名称是 \"java.util.Set\" \n15.  */  \n16.  Name getQualifiedName();  \n\n18.  /** \n19.  * 返回此类型元素的直接超类。如果此类型元素表示一个接口或者类 java.lang.Object，则返回一个种类为 NONE 的 NoType \n20.  */  \n21.  TypeMirror getSuperclass();  \n\n23.  /** \n24.  * 返回直接由此类实现或直接由此接口扩展的接口类型 \n25.  */  \n26.  List<? extends TypeMirror> getInterfaces();  \n\n28.  /** \n29.  * 按照声明顺序返回此类型元素的形式类型参数 \n30.  */  \n31.  List<? extends TypeParameterElement> getTypeParameters();  \n32.  }  \n\n**PackageElement**\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个包程序元素. \n3.  */  \n4.  public interface PackageElement {  \n\n6.  /** \n7.  * 返回此包的完全限定名称。该名称也是包的规范名称 \n8.  */  \n9.  Name getQualifiedName();  \n\n11.  /** \n12.  * 如果此包是一个未命名的包，则返回 true，否则返回 false \n13.  */  \n14.  boolean isUnnamed();  \n15.  }  \n\n**ExecutableElement**\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注解类型元素 \n3.  */  \n4.  public interface ExecutableElement {  \n\n6.  /** \n7.  * 获取按照声明顺序返回形式类型参数元素 \n8.  */  \n9.  List<? extends TypeParameterElement> getTypeParameters();  \n\n11.  /** \n12.  * 获取返回的类型元素 \n13.  */  \n14.  TypeMirror getReturnType();  \n\n16.  /** \n17.  * 获取形参元素 \n18.  */  \n19.  List<? extends VariableElement> getParameters();  \n\n21.  /** \n22.  * 如果此方法或构造方法接受可变数量的参数，则返回 true，否则返回 false \n23.  */  \n24.  boolean isVarArgs();  \n\n26.  /** \n27.  * 按声明顺序返回此方法或构造方法的 throws 子句中所列出的异常和其他 throwable \n28.  */  \n29.  List<? extends TypeMirror> getThrownTypes();  \n\n31.  /** \n32.  * 如果此 executable 是一个注解类型元素，则返回默认值。如果此方法不是注解类型元素，或者它是一个没有默认值的注解类型元素，则返回 null \n33.  */  \n34.  AnnotationValue getDefaultValue();  \n35.  }  \n\n**VariableElement**\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数 \n3.  */  \n4.  public interface VariableElement {  \n\n6.  /** \n7.  * 如果此变量是一个被初始化为编译时常量的 static final 字段，则返回此变量的值。否则返回 null。 \n8.  * 该值为基本类型或 String，如果该值为基本类型，则它被包装在适当的包装类中（比如 Integer）。 \n9.  * 注意，并非所有的 static final 字段都将具有常量值。特别是，enum 常量不 被认为是编译时常量。要获得一个常量值，字段的类型必须是基本类型或 String \n10.  */  \n11.  Object getConstantValue();  \n12.  }  \n\n**TypeParameterElement**\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一般类、接口、方法或构造方法元素的泛型参数. \n3.  */  \n4.  public interface TypeParameterElement {  \n\n6.  /** \n7.  * 返回由此类型参数参数化的一般类、接口、方法或构造方法 \n8.  */  \n9.  Element getGenericElement();  \n\n11.  /** \n12.  * 返回此类型参数的边界。它们是用来声明此类型参数的 extends 子句所指定的类型。 \n13.  * 如果没有使用显式的 extends 子句，则认为 java.lang.Object 是唯一的边界 \n14.  */  \n15.  List<? extends TypeMirror> getBounds();  \n16.  }  \n\n**注解处理器的辅助接口**\n\n在自定义注解处理器的初始化接口，可以获取到以下4个辅助接口：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public class MyProcessor extends AbstractProcessor {  \n\n3.  private Types typeUtils;  \n4.  private Elements elementUtils;  \n5.  private Filer filer;  \n6.  private Messager messager;  \n\n8.  @Override  \n9.  public synchronized void init(ProcessingEnvironment processingEnv) {  \n10.  super.init(processingEnv);  \n11.  typeUtils = processingEnv.getTypeUtils();  \n12.  elementUtils = processingEnv.getElementUtils();  \n13.  filer = processingEnv.getFiler();  \n14.  messager = processingEnv.getMessager();  \n15.  }  \n16.  }  "],[1,53,"其中**Filer**之前有用过，一般我们会用它配合**JavaPoet**来生成我们需要的**.java**文件，这里就不再提它的用法。\n\n**Messager**\n\n**Messager**提供给注解处理器一个报告错误、警告以及提示信息的途径。它不是注解处理器开发者的日志工具，而是用来写一些信息给使用此注解器的第三方开发者的。在官方文档中描述了消息的不同级别中非常重要的是**Kind.ERROR**，因为这种类型的信息用来表示我们的注解处理器处理失败了。很有可能是第三方开发者错误的使用了注解。这个概念和传统的Java应用有点不一样，在传统Java应用中我们可能就抛出一个异常**Exception**。如果你在**process()**中抛出一个异常，那么运行注解处理器的**JVM**将会崩溃（就像其他Java应用一样），使用我们注解处理器第三方开发者将会从**javac**中得到非常难懂的出错信息，因为它包含注解处理器的堆栈跟踪（Stacktace）信息。因此，注解处理器就有一个**Messager**类，它能够打印非常优美的错误信息。除此之外，你还可以连接到出错的元素。在像现在的IDE（集成开发环境）中，第三方开发者可以直接点击错误信息，IDE将会直接跳转到第三方开发者项目的出错的源文件的相应的行。\n\n看下接口代码：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public interface Messager {  \n\n3.  void printMessage(Diagnostic.Kind kind, CharSequence msg);  \n\n5.  void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e);  \n\n7.  void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e, AnnotationMirror a);  \n\n9.  void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e, AnnotationMirror a, AnnotationValue v);  \n10.  }  \n\n方法都比较好懂，主要需要指定打印的信息类型和描述字符串。\n\n**Types**\n\nTypes是一个用来处理TypeMirror的工具，看下代码就好了，提供的方法如下：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 一个用来处理TypeMirror的工具 \n3.  */  \n4.  public interface Types {  \n5.  /** \n6.  * 返回对应于类型的元素。该类型可能是 DeclaredType 或 TypeVariable。如果该类型没有对应元素，则返回 null. \n7.  */  \n8.  Element asElement(TypeMirror t);  \n\n10.  /** \n11.  * 测试两个 TypeMirror 对象是否表示同一类型. \n12.  * 警告：如果此方法两个参数中有一个表示通配符，那么此方法将返回 false \n13.  */  \n14.  boolean isSameType(TypeMirror t1, TypeMirror t2);  \n\n16.  /** \n17.  * 测试一种类型是否是另一个类型的子类型。任何类型都被认为是其本身的子类型. \n18.  * \n19.  * @return 当且仅当第一种类型是第二种类型的子类型时返回 true \n20.  * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \n21.  */  \n22.  boolean isSubtype(TypeMirror t1, TypeMirror t2);  \n\n24.  /** \n25.  * 测试一种类型是否可以指派给另一种类型. \n26.  * \n27.  * @return 当且仅当第一种类型可以指派给第二种类型时返回 true \n28.  * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \n29.  */  \n30.  boolean isAssignable(TypeMirror t1, TypeMirror t2);  \n\n32.  /** \n33.  * 测试一个类型参数是否包含 另一个类型参数. \n34.  * \n35.  * @return 当且仅当第一种类型包含第二种类型时返回 true \n36.  * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \n37.  */  \n38.  boolean contains(TypeMirror t1, TypeMirror t2);  \n\n40.  /** \n41.  * 测试一个方法的签名是否是另一个方法的子签名. \n42.  * \n43.  * @return 当且仅当第一个签名是第二个签名的子签名时返回 true \n44.  */  \n45.  boolean isSubsignature(ExecutableType m1, ExecutableType m2);  \n\n47.  /** \n48.  * 返回类型的直接超类型。interface 类型将出现在列表的最后（如果有）. \n49.  * \n50.  * @return 直接超类型；如果没有，则返回一个空列表 \n51.  * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \n52.  */  \n53.  List<? extends TypeMirror> directSupertypes(TypeMirror t);  \n\n55.  /** \n56.  * 返回删除状态的类型. \n57.  * \n58.  * @return 删除状态的给定类型 \n59.  * @throws IllegalArgumentException 如果给定一个 package 类型 \n60.  */  \n61.  TypeMirror erasure(TypeMirror t);  \n\n63.  /** \n64.  * 返回给定基本类型的装箱 (boxed) 值类型的类。即应用 boxing 转换. \n65.  * \n66.  * @param p  要转换的基本类型 \n67.  * @return 类型 p 的装箱值类型的类 \n68.  */  \n69.  TypeElement boxedClass(PrimitiveType p);  \n\n71.  /** \n72.  * 返回给定类型的拆箱 (unboxed) 值类型（基本类型）。即应用 unboxing 转换. \n73.  * \n74.  * @param t  要拆箱的类型 \n75.  * @return 类型 t 的拆箱值类型 \n76.  * @throws IllegalArgumentException 如果给定类型无法进行 unboxing 转换 \n77.  */  \n78.  PrimitiveType unboxedType(TypeMirror t);  \n\n80.  /** \n81.  * 对类型应用 capture 转换. \n82.  * \n83.  * @return 应用 capture 转换的结果 \n84.  * @throws IllegalArgumentException 如果给定 executable 或 package 类型 \n85.  */  \n86.  TypeMirror capture(TypeMirror t);  \n\n88.  /** \n89.  * 返回基本类型. \n90.  * \n91.  * @param kind  要返回的基本类型的种类 \n92.  * @return 一个基本类型 \n93.  * @throws IllegalArgumentException 如果 kind 不是基本种类 \n94.  */  \n95.  PrimitiveType getPrimitiveType(TypeKind kind);  \n\n97.  /** \n98.  * 返回 null 类型。该类型是 null 的类型. \n99.  */  \n100.  NullType getNullType();  \n\n102.  /** \n103.  * 返回在实际类型不适用的地方所使用的伪类型。 \n104.  * 要返回的类型的种类可以是 VOID 或 NONE。对于包，可以使用 Elements.getPackageElement(CharSequence).asType() 替代. \n105.  * \n106.  * @param kind  要返回的类型的种类 \n107.  * @return 种类 VOID 或 NONE 的伪类型 \n108.  * @throws IllegalArgumentException 如果 kind 无效 \n109.  */  \n110.  NoType getNoType(TypeKind kind);  \n\n112.  /** \n113.  * 返回具有指定组件类型的数组类型. \n114.  * \n115.  * @throws IllegalArgumentException 如果组件类型对于数组无效 \n116.  */  \n117.  ArrayType getArrayType(TypeMirror componentType);  \n\n119.  /** \n120.  * 返回新的通配符类型参数。可以指定通配符边界中的一个，也可以都不指定，但不能都指定. \n121.  * \n122.  * @param extendsBound  扩展（上）边界；如果没有，则该参数为 null \n123.  * @param superBound    超（下）边界；如果没有，则该参数为 null \n124.  * @return 新的通配符 \n125.  * @throws IllegalArgumentException 如果边界无效 \n126.  */  \n127.  WildcardType getWildcardType(TypeMirror extendsBound,  \n128.  TypeMirror superBound);  \n\n130.  /** \n131.  * 返回对应于类型元素和实际类型参数的类型。例如，如果给定 Set 的类型元素和 String 的类型镜像，那么可以使用此方法获取参数化类型 Set<String>. \n132.  * \n133.  * 类型参数的数量必须等于类型元素的形式类型参数的数量，或者等于 0。如果等于 0，并且类型元素是泛型，则返回该类型元素的原始类型. \n134.  * \n135.  * 如果返回一个参数化类型，则其类型元素不得包含在一般外部类中。 \n136.  * 例如，首先使用此方法获取类型 Outer<String>，然后调用 getDeclaredType(DeclaredType, TypeElement, TypeMirror...)， \n137.  * 可以构造参数化类型 Outer<String>.Inner<Number>. \n138.  * \n139.  * @param typeElem  类型元素 \n140.  * @param typeArgs  实际类型参数 \n141.  * @return 对应于类型元素和实际类型参数的类型 \n142.  * @throws IllegalArgumentException 如果给定的类型参数太多或太少，或者提供不合适的类型参数或类型元素 \n143.  */  \n144.  DeclaredType getDeclaredType(TypeElement typeElem, TypeMirror... typeArgs);  \n\n146.  /** \n147.  * 根据给定的包含类型，返回对应于类型元素和实际类型参数的类型（它是给定包含类型的成员）.例子如上 \n148.  * 如果包含类型是一个参数化类型，则类型参数的数量必须等于 typeElem 的形式类型参数的数量。 \n149.  * 如果包含类型不是参数化的，或者为 null，则此方法等效于 getDeclaredType(typeElem, typeArgs）. \n150.  * \n151.  * @param containing  包含类型；如果没有，则该参数为 null \n152.  * @param typeElem  类型元素 \n153.  * @param typeArgs  实际类型参数 \n154.  * @return 对应于类型元素和实际类型参数的类型，该类型包含在给定类型中 \n155.  * @throws IllegalArgumentException 如果给定的类型参数太多或太少，或者提供了不合适的类型参数、类型元素或包含类型 \n156.  */  \n157.  DeclaredType getDeclaredType(DeclaredType containing,  \n158.  TypeElement typeElem, TypeMirror... typeArgs);  \n\n160.  /** \n161.  * 当元素被视为给定类型的成员或者直接由给定类型包含时，返回该元素的类型。 \n162.  * 例如，被视为参数化类型 Set<String> 的成员时，Set.add 方法是参数类型为 String 的 ExecutableType. \n163.  * \n164.  * @param containing  包含类型 \n165.  * @param element     元素 \n166.  * @return 从包含类型来看的元素的类型 \n167.  * @throws IllegalArgumentException 如果元素对于给定类型无效 \n168.  */  \n169.  TypeMirror asMemberOf(DeclaredType containing, Element element);  \n170.  }  \n\n**Elements**\n\n**Elements**是一个用来处理**Element**的工具，提供的方法如下：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 一个用来处理Element的工具 \n3.  */  \n4.  public interface Elements {  \n\n6.  /** \n7.  * 返回已给出其完全限定名称的包. \n8.  * \n9.  * @param name  完全限定的包名称；对于未命名的包，该参数为 \"\" \n10.  * @return 指定的包；如果没有找到这样的包，则返回 null \n11.  */  \n12.  PackageElement getPackageElement(CharSequence name);  \n\n14.  /** \n15.  * 返回已给出其规范名称的类型元素. \n16.  * \n17.  * @param name  规范名称 \n18.  * @return 指定的类型元素；如果没有找到这样的元素，则返回 null \n19.  */  \n20.  TypeElement getTypeElement(CharSequence name);  \n\n22.  /** \n23.  * 返回注释元素的值，包括默认值. \n24.  * 此值是以映射的形式返回的，该映射将元素与其相应的值关联。只包括那些注释中明确存在其值的元素，不包括那些隐式假定其默认值的元素。 \n25.  * 映射的顺序与值出现在注释源中的顺序匹配 \n26.  * \n27.  * @see AnnotationMirror#getElementValues() \n28.  * @param a  要检查的注释 \n29.  * @return 注释元素的值，包括默认值 \n30.  */  \n31.  Map<? extends ExecutableElement, ? extends AnnotationValue>  \n32.  getElementValuesWithDefaults(AnnotationMirror a);  \n\n34.  /** \n35.  * 返回元素的文档（\"Javadoc\"）注释文本 \n36.  * \n37.  * @param e  将被检查的元素 \n38.  * @return 元素的文档注释；如果没有，则返回 null \n39.  */  \n40.  String getDocComment(Element e);  \n\n42.  /** \n43.  * 如果元素已过时，则返回 true，否则返回 false. \n44.  * \n45.  * @param e  将被检查的元素 \n46.  * @return 如果元素已过时，则返回 true，否则返回 false \n47.  */  \n48.  boolean isDeprecated(Element e);  \n\n50.  /** \n51.  * 返回类型元素的二进制名称. \n52.  * \n53.  * @param type  将被检查的类型元素 \n54.  * @return 二进制名称 \n55.  */  \n56.  Name getBinaryName(TypeElement type);  \n\n58.  /** \n59.  * 返回元素的包。包的包是它本身. \n60.  * \n61.  * @param type 将被检查的元素 \n62.  * @return 元素的包 \n63.  */  \n64.  PackageElement getPackageOf(Element type);  \n\n66.  /** \n67.  * 返回类型元素的所有成员，不管是继承的还是直接声明的。对于一个类，结果还包括其构造方法，但不包括局部类或匿名类. \n68.  * \n69.  * 注意，使用 ElementFilter 中的方法可以隔离某个种类的元素. \n70.  * \n71.  * @param type  将被检查的类型 \n72.  * @return 类型的所有成员 \n73.  */  \n74.  List<? extends Element> getAllMembers(TypeElement type);  \n\n76.  /** \n77.  * 返回元素的所有注释，不管是继承的还是直接存在的. \n78.  * \n79.  * @param e  将被检查的元素 \n80.  * @return 元素的所有注释 \n81.  */  \n82.  List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e);  \n\n84.  /** \n85.  * 测试一个类型、方法或字段是否隐藏了另一个类型、方法或字段. \n86.  * \n87.  * @param hider   第一个元素 \n88.  * @param hidden  第二个元素 \n89.  * @return 当且仅当第一个元素隐藏了第二个元素时返回 true \n90.  */  \n91.  boolean hides(Element hider, Element hidden);  \n\n93.  /** \n94.  * 测试一个方法（作为给定类型的成员）是否重写了另一个方法。当非抽象方法重写抽象方法时，还可以说成是前者实现 了后者. \n95.  * \n96.  * @param overrider  第一个方法，可能是 overrider \n97.  * @param overridden  第二个方法，可能被重写 \n98.  * @param type   第一个方法是其成员的类型 \n99.  * @return 当且仅当第一个方法重写第二个方法时返回 true \n100.  */  \n101.  boolean overrides(ExecutableElement overrider, ExecutableElement overridden,  \n102.  TypeElement type);  \n\n104.  /** \n105.  * 返回表示基本值或字符串的常量表达式 文本。返回文本的形式是一种适合于表示源代码中的值的形式. \n106.  * \n107.  * @param value  基本值或字符串 \n108.  * @return 常量表达式的文本 \n109.  * @throws IllegalArgumentException 如果参数不是基本值或字符串 \n110.  * \n111.  * @see VariableElement#getConstantValue() \n112.  */  \n113.  String getConstantExpression(Object value);  \n\n115.  /** \n116.  * 按指定顺序将元素的表示形式打印到给定 writer。此方法的主要用途是诊断。输出的具体格式没有 指定并且是可以更改的. \n117.  * \n118.  * @param w 输出打印到的 writer \n119.  * @param elements 要打印的元素 \n120.  */  \n121.  void printElements(java.io.Writer w, Element... elements);  \n\n123.  /** \n124.  * 返回与参数具有相同字符序列的名称. \n125.  * \n126.  * @param cs 将以名称形式返回的字符序列 \n127.  * @return 返回与参数具有相同字符序列的名称 \n128.  */  \n129.  Name getName(CharSequence cs);  \n\n131.  /** \n132.  * 如果类型是一个泛型接口则返回 true，否则返回 false \n133.  * \n134.  * @param type 将被检查的类型 \n135.  * @return 如果类型是一个泛型接口则返回 true，否则返回 false \n136.  * @since 1.8 \n137.  */  \n138.  boolean isFunctionalInterface(TypeElement type);  \n139.  }"]],[0,53],[21942,21942]]],[1519705408173,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,153,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个程序元素，比如包、类或者方法，有如下几种子接口： \n3.  * ExecutableElement：表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注解类型元素 ； \n4.  * PackageElement：表示一个包程序元素； \n5.  * TypeElement：表示一个类或接口程序元素； \n6.  * TypeParameterElement：表示一般类、接口、方法或构造方法元素的形式类型参数； \n7.  * VariableElement：表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数 \n8.  */  \n9.  public interface "],[1,653,"·\n\n**"],[-1,660," extends AnnotatedConstruct {  \n10.  /"],[-1,700," \n11.  * 返回此元素定义的类型 \n12.  * 例如，对于一般类元素 C<N extends Number>，返回参数化类型 C<N> \n13.  */  \n14. "],[-1,788,"TypeMirror asType();  \n\n16.  /** \n17.  * 返回此元素的种类：包、类、接口、方法、字段...,如下枚举值 \n18.  * PACKAGE, ENUM, CLASS, ANNOTATION_TYPE, INTERFACE, ENUM_CONSTANT, FIELD, PARAMETER, LOCAL_VARIABLE, EXCEPTION_PARAMETER, \n19.  * METHOD, CONSTRUCTOR, STATIC_INIT, INSTANCE_INIT, TYPE_PARAMETER, OTHER, RESOURCE_VARIABLE; \n20.  */  \n21.  ElementKind getKind();  \n\n23.  /** \n24.  * 返回此元素的修饰符,如下枚举值 \n25.  * PUBLIC, PROTECTED, PRIVATE, ABSTRACT, DEFAULT, STATIC, FINAL, \n26.  * TRANSIENT, VOLATILE, SYNCHRONIZED, NATIVE, STRICTFP; \n27.  */  \n28.  Set<Modifier> getModifiers();  \n\n30.  /** \n31.  * 返回此元素的简单名称,例如 \n32.  * 类型元素 java.util.Set<E> 的简单名称是 \"Set\"； \n33.  * 如果此元素表示一个未指定的包，则返回一个空名称； \n34.  * 如果它表示一个构造方法，则返回名称 \"<init>\"； \n35.  * 如果它表示一个静态初始化程序，则返回名称 \"<clinit>\"； \n36.  * 如果它表示一个匿名类或者实例初始化程序，则返回一个空名称 \n37.  */  \n38.  Name getSimpleName();  \n\n40.  /** \n41.  * 返回封装此元素的最里层元素。 \n42.  * 如果此元素的声明在词法上直接封装在另一个元素的声明中，则返回那个封装元素； \n43.  * 如果此元素是顶层类型，则返回它的包； \n44.  * 如果此元素是一个包，则返回 null； \n45.  * 如果此元素是一个泛型参数，则返回 null. \n46.  */  \n47.  Element getEnclosingElement();  \n\n49.  /** \n50.  * 返回此元素直接封装的子元素 \n51.  */  \n52.  List<? extends Element> getEnclosedElements();  \n\n54.  /** \n55.  * 返回直接存在于此元素上的注解 \n56.  * 要获得继承的注解，可使用 getAllAnnotationMirrors \n57.  */  \n58.  @Override  \n59.  List<? extends AnnotationMirror> getAnnotationMirrors();  \n\n61.  /** \n62.  * 返回此元素针对指定类型的注解（如果存在这样的注解），否则返回 null。注解可以是继承的，也可以是直接存在于此元素上的 \n63.  */  \n64.  @Override  \n65.  <A extends Annotation> A getAnnotation(Class<A> annotationType);  \n66.  }  \n\n**Element** "],[-1,2338," "],[1,2339," "],[-1,2415," "],[1,2416," "],[-1,2795," "],[1,2796," "],[-1,2885," "],[1,2886," "],[-1,2976," "],[1,2977," "],[-1,2989,"        // "],[1,3000,"        // "],[-1,3014,"  "],[1,3016,"  "],[-1,3028," "],[1,3029," "],[-1,3044,"  "],[1,3046,"  "],[-1,3058," "],[1,3059," "],[-1,3064," "],[1,3065," "],[-1,3071,"         // "],[1,3083,"         // "],[-1,3094,"  "],[1,3096,"  "],[-1,3103," "],[1,3104," "],[-1,3111," "],[1,3112," "],[-1,3117," {  // "],[1,3124," {  // "],[-1,3144,"  "],[1,3146,"  "],[-1,3159," int "],[1,3164," int "],[-1,3168,"        // "],[1,3179,"        // "],[-1,3194,"  "],[1,3196,"  "],[-1,3207," "],[1,3208," "],[-1,3213,"            // "],[1,3228,"            // "],[-1,3243,"  "],[1,3245,"  "],[-1,3258," "],[1,3259," "],[-1,3267," {}      // "],[1,3279," {}      // "],[-1,3297,"  "],[1,3299,"  "],[-1,3312," "],[1,3313," "],[-1,3317," "],[1,3318," "],[-1,3326,"    // "],[1,3333,"    // "],[-1,3351,"  "],[1,3353,"  "],[-1,3365," "],[1,3366," "],[-1,3370,"     // "],[1,3378,"     // "],[-1,3393,"  "],[1,3395,"  "],[-1,3402," {}  "],[1,3407," {}  "],[-1,3414,"  "],[1,3416,"  "],[-1,3629," "],[1,3630," "],[-1,3719," "],[1,3720," "],[-1,3809," "],[1,3810," "],[-1,3814," "],[1,3815," "],[-1,3826," {  "],[1,3830," {  "],[-1,3839," A "],[1,3842," A "],[-1,3850," */  "],[1,3855," */  "],[-1,3868,"  "],[1,3870,"  "],[-1,3878," An "],[1,3882," An "],[-1,3886," "],[1,3887," "],[-1,3892," */  "],[1,3897," */  "],[-1,3907,"  "],[1,3909,"  "],[-1,3917," A "],[1,3920," A "],[-1,3925," not "],[1,3930," not "],[-1,3939," by a "],[1,3945," by a "],[-1,3949," "],[1,3950," "],[-1,3958," "],[1,3959," "],[-1,3963," "],[1,3964," "],[-1,3969," "],[1,3970," "],[-1,3976," "],[1,3977," "],[-1,3984," */  "],[1,3989," */  "],[-1,4000,"  "],[1,4002,"  "],[-1,4010," An "],[1,4014," An "],[-1,4024," "],[1,4025," "],[-1,4030," */  "],[1,4035," */  "],[-1,4057,"  "],[1,4059,"  "],[-1,4068," An "],[1,4072," An "],[-1,4081," not "],[1,4086," not "],[-1,4095," by a "],[1,4101," by a "],[-1,4105," "],[1,4106," "],[-1,4114," "],[1,4115," "],[-1,4119," */  "],[1,4124," */  "],[-1,4140,"  "],[1,4142,"  "],[-1,4151," "],[1,4152," "],[-1,4161,"  "],[1,4163,"  "],[-1,4172," An "],[1,4176," An "],[-1,4180," "],[1,4181," "],[-1,4190," */  "],[1,4195," */  "],[-1,4215,"  "],[1,4217,"  "],[-1,4226," A "],[1,4229," A "],[-1,4234," not "],[1,4239," not "],[-1,4248," by a "],[1,4254," by a "],[-1,4258," "],[1,4259," "],[-1,4267," "],[1,4268," "],[-1,4272," */  "],[1,4277," */  "],[-1,4289,"  "],[1,4291,"  "],[-1,4300," A "],[1,4303," A "],[-1,4312," of a "],[1,4318," of a "],[-1,4324," or "],[1,4328," or "],[-1,4340," */  "],[1,4345," */  "],[-1,4361,"  "],[1,4363,"  "],[-1,4372," A "],[1,4375," A "],[-1,4380," "],[1,4381," "],[-1,4390," */  "],[1,4395," */  "],[-1,4416,"  "],[1,4418,"  "],[-1,4427," A "],[1,4430," A "],[-1,4439," of an "],[1,4446," of an "],[-1,4455," "],[1,4456," "],[-1,4464," */  "],[1,4469," */  "],[-1,4495,"  "],[1,4497,"  "],[-1,4506," "],[1,4507," "],[-1,4518,"  "],[1,4520,"  "],[-1,4529," A "],[1,4532," A "],[-1,4539," */  "],[1,4544," */  "],[-1,4557,"  "],[1,4559,"  "],[-1,4568," A "],[1,4571," A "],[-1,4583," */  "],[1,4588," */  "],[-1,4606,"  "],[1,4608,"  "],[-1,4617," A "],[1,4620," A "],[-1,4626," "],[1,4627," "],[-1,4639," */  "],[1,4644," */  "],[-1,4662,"  "],[1,4664,"  "],[-1,4673," An "],[1,4677," An "],[-1,4685," "],[1,4686," "],[-1,4698," */  "],[1,4703," */  "],[-1,4723,"  "],[1,4725,"  "],[-1,4734," A "],[1,4737," A "],[-1,4741," "],[1,4742," "],[-1,4752," */  "],[1,4757," */  "],[-1,4778,"  "],[1,4780,"  "],[-1,4790," An "],[1,4794," An "],[-1,4817," "],[1,4818," "],[-1,4826," "],[1,4827," "],[-1,4831," is not the "],[1,4843," is not the "],[-1,4850," you are "],[1,4859," you are "],[-1,4866," "],[1,4867," "],[-1,4871," */  "],[1,4876," */  "],[-1,4888,"  "],[1,4890,"  "],[-1,4899," "],[1,4900," "],[-1,4907," A "],[1,4910," A "],[-1,4918," "],[1,4919," "],[-1,4928," "],[1,4929," "],[-1,4936," "],[1,4937," "],[-1,4943," 1.7 "],[1,4948," 1.7 "],[-1,4956,"  "],[1,4958,"  "],[-1,4982,"  "],[1,4984,"  "],[-1,4991,"  "],[1,4993,"  "],[-1,5072," "],[1,5073," "],[-1,5277," "],[1,5278," "],[-1,5367," "],[1,5368," "],[-1,5454," "],[1,5455," "],[-1,5461," 表示 "],[1,5465," 表示 "],[-1,5469," "],[1,5470," "],[-1,5478," "],[1,5479," "],[-1,5486,"  "],[1,5488,"  "],[-1,5499," "],[1,5500," "],[-1,5509," "],[1,5510," "],[-1,5520," {  "],[1,5524," {  "],[-1,5532," "],[1,5533," "],[-1,5539," "],[1,5540," "],[-1,5551," "],[1,5552," "],[-1,5560," "],[1,5561," "],[-1,5565," "],[1,5566," "],[-1,5573,"  "],[1,5575,"  "],[-1,5588," "],[1,5589," "],[-1,5599,"  "],[1,5601,"  "],[-1,5607,"  "],[1,5609,"  "],[-1,5691," "],[1,5692," "],[-1,5781," "],[1,5782," "],[-1,5871," "],[1,5872," "],[-1,5876," "],[1,5877," "],[-1,5885," {  "],[1,5889," {  "],[-1,5897," The "],[1,5902," The "],[-1,5911," "],[1,5912," "],[-1,5916," "],[1,5917," "],[-1,5923," "],[1,5924," "],[-1,5933," */  "],[1,5938," */  "],[-1,5951,"  "],[1,5953,"  "],[-1,5961," The "],[1,5966," The "],[-1,5975," "],[1,5976," "],[-1,5980," "],[1,5981," "],[-1,5987," "],[1,5988," "],[-1,5994," */  "],[1,5999," */  "],[-1,6009,"  "],[1,6011,"  "],[-1,6019," The "],[1,6024," The "],[-1,6033," "],[1,6034," "],[-1,6038," "],[1,6039," "],[-1,6045," "],[1,6046," "],[-1,6053," */  "],[1,6058," */  "],[-1,6069,"  "],[1,6071,"  "],[-1,6079," The "],[1,6084," The "],[-1,6093," "],[1,6094," "],[-1,6098," "],[1,6099," "],[-1,6105," "],[1,6106," "],[-1,6111," */  "],[1,6116," */  "],[-1,6125,"  "],[1,6127,"  "],[-1,6136," The "],[1,6141," The "],[-1,6150," "],[1,6151," "],[-1,6155," "],[1,6156," "],[-1,6162," "],[1,6163," "],[-1,6169," */  "],[1,6174," */  "],[-1,6185,"  "],[1,6187,"  "],[-1,6196," The "],[1,6201," The "],[-1,6210," "],[1,6211," "],[-1,6215," "],[1,6216," "],[-1,6222," "],[1,6223," "],[-1,6229," */  "],[1,6234," */  "],[-1,6245,"  "],[1,6247,"  "],[-1,6256," The "],[1,6261," The "],[-1,6270," "],[1,6271," "],[-1,6275," "],[1,6276," "],[-1,6282," "],[1,6283," "],[-1,6290," */  "],[1,6295," */  "],[-1,6307,"  "],[1,6309,"  "],[-1,6318," The "],[1,6323," The "],[-1,6332," "],[1,6333," "],[-1,6337," "],[1,6338," "],[-1,6344," "],[1,6345," "],[-1,6353," */  "],[1,6358," */  "],[-1,6371,"  "],[1,6373,"  "],[-1,6382," The "],[1,6387," The "],[-1,6398," "],[1,6399," "],[-1,6412," to the "],[1,6420," to the "],[-1,6427," "],[1,6428," "],[-1,6434," "],[1,6435," "],[-1,6441," */  "],[1,6446," */  "],[-1,6457,"  "],[1,6459,"  "],[-1,6468," A "],[1,6471," A "],[-1,6482," "],[1,6483," "],[-1,6487," "],[1,6488," "],[-1,6493," no "],[1,6497," no "],[-1,6503," "],[1,6504," "],[-1,6508," is "],[1,6512," is "],[-1,6524," */  "],[1,6529," */  "],[-1,6540,"  "],[1,6542,"  "],[-1,6551," The "],[1,6556," The "],[-1,6560," "],[1,6561," "],[-1,6566," */  "],[1,6571," */  "],[-1,6582,"  "],[1,6584,"  "],[-1,6593," An "],[1,6597," An "],[-1,6602," "],[1,6603," "],[-1,6608," */  "],[1,6613," */  "],[-1,6625,"  "],[1,6627,"  "],[-1,6636," A "],[1,6639," A "],[-1,6644," or "],[1,6648," or "],[-1,6657," "],[1,6658," "],[-1,6663," */  "],[1,6668," */  "],[-1,6683,"  "],[1,6685,"  "],[-1,6694," A "],[1,6697," A "],[-1,6702," or "],[1,6706," or "],[-1,6715," "],[1,6716," "],[-1,6720," "],[1,6721," "],[-1,6725," "],[1,6726," "],[-1,6731," not be "],[1,6739," not be "],[-1,6748," */  "],[1,6753," */  "],[-1,6765,"  "],[1,6767,"  "],[-1,6776," A "],[1,6779," A "],[-1,6783," "],[1,6784," "],[-1,6793," */  "],[1,6798," */  "],[-1,6812,"  "],[1,6814,"  "],[-1,6823," A "],[1,6826," A "],[-1,6834," "],[1,6835," "],[-1,6839," "],[1,6840," "],[-1,6849," */  "],[1,6854," */  "],[-1,6869,"  "],[1,6871,"  "],[-1,6880," A "],[1,6883," A "],[-1,6894," "],[1,6895," "],[-1,6908," to a "],[1,6914," to a "],[-1,6921," "],[1,6922," "],[-1,6930," */  "],[1,6935," */  "],[-1,6949,"  "],[1,6951,"  "],[-1,6960," A "],[1,6963," A "],[-1,6970," "],[1,6971," "],[-1,6983," or "],[1,6987," or "],[-1,6999," */  "],[1,7004," */  "],[-1,7021,"  "],[1,7023,"  "],[-1,7032," An "],[1,7036," An "],[-1,7059," "],[1,7060," "],[-1,7065," "],[1,7066," "],[-1,7070," is not the "],[1,7082," is not the "],[-1,7086," you are "],[1,7095," you are "],[-1,7102," "],[1,7103," "],[-1,7107," */  "],[1,7112," */  "],[-1,7124,"  "],[1,7126,"  "],[-1,7135," A "],[1,7138," A "],[-1,7143," "],[1,7144," "],[-1,7149," */  "],[1,7154," */  "],[-1,7166,"  "],[1,7168,"  "],[-1,7177," An "],[1,7181," An "],[-1,7193," "],[1,7194," "],[-1,7199," */  "],[1,7204," */  "],[-1,7223,"  "],[1,7225,"  "],[-1,7232,"  "],[1,7234,"  "],[-1,7444," "],[1,7445," "],[-1,7534," "],[1,7535," "],[-1,7621," "],[1,7622," "],[-1,7628," "],[1,7629," "],[-1,7641," "],[1,7642," "],[-1,7649,"  "],[1,7651,"  "],[-1,7662," "],[1,7663," "],[-1,7672," "],[1,7673," "],[-1,7684," {  "],[1,7688," {  "],[-1,7697," "],[1,7698," "],[-1,7704," "],[1,7705," "],[-1,7717," "],[1,7718," "],[-1,7724," "],[1,7725," "],[-1,7736," "],[1,7737," "],[-1,7745," "],[1,7746," "],[-1,7798," "],[1,7799," "],[-1,7812," "],[1,7813," "],[-1,7820,"  "],[1,7822,"  "],[-1,7839," "],[1,7840," "],[-1,7857,"  "],[1,7859,"  "],[-1,7869," "],[1,7870," "],[-1,7877," "],[1,7878," "],[-1,7903," "],[1,7904," "],[-1,7932," "],[1,7933," "],[-1,7940," "],[1,7941," "],[-1,7970," "],[1,7971," "],[-1,7987," "],[1,7988," "],[-1,7996," "],[1,7997," "],[-1,8012," "],[1,8013," "],[-1,8021,"  "],[1,8023,"  "],[-1,8033," "],[1,8034," "],[-1,8053,"  "],[1,8055,"  "],[-1,8065," "],[1,8066," "],[-1,8073," "],[1,8074," "],[-1,8103," "],[1,8104," "],[-1,8129," "],[1,8130," "],[-1,8134," 的 "],[1,8137," 的 "],[-1,8143," "],[1,8144," "],[-1,8152,"  "],[1,8154,"  "],[-1,8170," "],[1,8171," "],[-1,8187,"  "],[1,8189,"  "],[-1,8199," "],[1,8200," "],[-1,8207," "],[1,8208," "],[-1,8231," "],[1,8232," "],[-1,8240,"  "],[1,8242,"  "],[-1,8254," "],[1,8255," "],[-1,8262," "],[1,8263," "],[-1,8274," "],[1,8275," "],[-1,8291,"  "],[1,8293,"  "],[-1,8303," "],[1,8304," "],[-1,8311," "],[1,8312," "],[-1,8332," "],[1,8333," "],[-1,8341,"  "],[1,8343,"  "],[-1,8355," "],[1,8356," "],[-1,8363," "],[1,8364," "],[-1,8385," "],[1,8386," "],[-1,8406,"  "],[1,8408,"  "],[-1,8415,"  "],[1,8417,"  "],[-1,8449," "],[1,8450," "],[-1,8539," "],[1,8540," "],[-1,8626," "],[1,8627," "],[-1,8633," "],[1,8634," "],[-1,8644," "],[1,8645," "],[-1,8652,"  "],[1,8654,"  "],[-1,8665," "],[1,8666," "],[-1,8675," "],[1,8676," "],[-1,8690," {  "],[1,8694," {  "],[-1,8703," "],[1,8704," "],[-1,8710," "],[1,8711," "],[-1,8734," "],[1,8735," "],[-1,8742,"  "],[1,8744,"  "],[-1,8753," "],[1,8754," "],[-1,8773,"  "],[1,8775,"  "],[-1,8785," "],[1,8786," "],[-1,8793," "],[1,8794," "],[-1,8810," "],[1,8811," "],[-1,8820," "],[1,8821," "],[-1,8826," "],[1,8827," "],[-1,8835,"  "],[1,8837,"  "],[-1,8850," "],[1,8851," "],[-1,8863,"  "],[1,8865,"  "],[-1,8872,"  "],[1,8874,"  "],[-1,8909," "],[1,8910," "],[-1,8999," "],[1,9000," "],[-1,9086," "],[1,9087," "],[-1,9093," "],[1,9094," "],[-1,9132," "],[1,9133," "],[-1,9140,"  "],[1,9142,"  "],[-1,9153," "],[1,9154," "],[-1,9163," "],[1,9164," "],[-1,9181," {  "],[1,9185," {  "],[-1,9194," "],[1,9195," "],[-1,9201," "],[1,9202," "],[-1,9220," "],[1,9221," "],[-1,9228,"  "],[1,9230,"  "],[-1,9241," "],[1,9242," "],[-1,9249," "],[1,9250," "],[-1,9271," "],[1,9272," "],[-1,9292,"  "],[1,9294,"  "],[-1,9304," "],[1,9305," "],[-1,9312," "],[1,9313," "],[-1,9322," "],[1,9323," "],[-1,9331,"  "],[1,9333,"  "],[-1,9349," "],[1,9350," "],[-1,9366,"  "],[1,9368,"  "],[-1,9378," "],[1,9379," "],[-1,9386," "],[1,9387," "],[-1,9393," "],[1,9394," "],[-1,9402,"  "],[1,9404,"  "],[-1,9416," "],[1,9417," "],[-1,9424," "],[1,9425," "],[-1,9441," "],[1,9442," "],[-1,9458,"  "],[1,9460,"  "],[-1,9470," "],[1,9471," "],[-1,9478," "],[1,9479," "],[-1,9502," "],[1,9503," "],[-1,9512," "],[1,9513," "],[-1,9518," "],[1,9519," "],[-1,9527,"  "],[1,9529,"  "],[-1,9542," "],[1,9543," "],[-1,9555,"  "],[1,9557,"  "],[-1,9567," "],[1,9568," "],[-1,9575," "],[1,9576," "],[-1,9592," "],[1,9593," "],[-1,9599," "],[1,9600," "],[-1,9612," "],[1,9613," "],[-1,9622," "],[1,9623," "],[-1,9631,"  "],[1,9633,"  "],[-1,9645," "],[1,9646," "],[-1,9653," "],[1,9654," "],[-1,9665," "],[1,9666," "],[-1,9683,"  "],[1,9685,"  "],[-1,9695," "],[1,9696," "],[-1,9703," 如果此 "],[1,9708," 如果此 "],[-1,9718," "],[1,9719," "],[-1,9772," "],[1,9773," "],[-1,9777," "],[1,9778," "],[-1,9786,"  "],[1,9788,"  "],[-1,9809," "],[1,9810," "],[-1,9828,"  "],[1,9830,"  "],[-1,9837,"  "],[1,9839,"  "],[-1,9872," "],[1,9873," "],[-1,9962," "],[1,9963," "],[-1,10049," "],[1,10050," "],[-1,10056," "],[1,10057," "],[-1,10068," "],[1,10069," "],[-1,10091," "],[1,10092," "],[-1,10099,"  "],[1,10101,"  "],[-1,10112," "],[1,10113," "],[-1,10122," "],[1,10123," "],[-1,10138," {  "],[1,10142," {  "],[-1,10151," "],[1,10152," "],[-1,10158," "],[1,10159," "],[-1,10178," "],[1,10179," "],[-1,10185," "],[1,10186," "],[-1,10191," "],[1,10192," "],[-1,10208," "],[1,10209," "],[-1,10214," "],[1,10215," "],[-1,10221," "],[1,10222," "],[-1,10230," "],[1,10231," "],[-1,10264," "],[1,10265," "],[-1,10274," "],[1,10275," "],[-1,10281," "],[1,10282," "],[-1,10290," "],[1,10291," "],[-1,10297," "],[1,10298," "],[-1,10303," "],[1,10304," "],[-1,10322," 常量不 "],[1,10327," 常量不 "],[-1,10359," "],[1,10360," "],[-1,10366," "],[1,10367," "],[-1,10375,"  "],[1,10377,"  "],[-1,10389," "],[1,10390," "],[-1,10409,"  "],[1,10411,"  "],[-1,10418,"  "],[1,10420,"  "],[-1,10458," "],[1,10459," "],[-1,10548," "],[1,10549," "],[-1,10635," "],[1,10636," "],[-1,10642," "],[1,10643," "],[-1,10667," "],[1,10668," "],[-1,10675,"  "],[1,10677,"  "],[-1,10688," "],[1,10689," "],[-1,10698," "],[1,10699," "],[-1,10719," {  "],[1,10723," {  "],[-1,10732," "],[1,10733," "],[-1,10739," "],[1,10740," "],[-1,10766," "],[1,10767," "],[-1,10774,"  "],[1,10776,"  "],[-1,10788," "],[1,10789," "],[-1,10809,"  "],[1,10811,"  "],[-1,10821," "],[1,10822," "],[-1,10829," "],[1,10830," "],[-1,10854," "],[1,10855," "],[-1,10862," "],[1,10863," "],[-1,10872," "],[1,10873," "],[-1,10880," "],[1,10881," "],[-1,10890," "],[1,10891," "],[-1,10898," "],[1,10899," "],[-1,10905," "],[1,10906," "],[-1,10922," "],[1,10923," "],[-1,10929," "],[1,10930," "],[-1,10938,"  "],[1,10940,"  "],[-1,10952," "],[1,10953," "],[-1,10960," "],[1,10961," "],[-1,10972," "],[1,10973," "],[-1,10985,"  "],[1,10987,"  "],[-1,10994,"  "],[1,10996,"  "],[-1,11056," "],[1,11057," "],[-1,11146," "],[1,11147," "],[-1,11236," "],[1,11237," "],[-1,11242," "],[1,11243," "],[-1,11254," "],[1,11255," "],[-1,11262," "],[1,11263," "],[-1,11280," {  "],[1,11284," {  "],[-1,11297," "],[1,11298," "],[-1,11303," "],[1,11304," "],[-1,11314,"  "],[1,11316,"  "],[-1,11328," "],[1,11329," "],[-1,11337," "],[1,11338," "],[-1,11351,"  "],[1,11353,"  "],[-1,11365," "],[1,11366," "],[-1,11371," "],[1,11372," "],[-1,11378,"  "],[1,11380,"  "],[-1,11392," "],[1,11393," "],[-1,11401," "],[1,11402," "],[-1,11411,"  "],[1,11413,"  "],[-1,11428,"  "],[1,11430,"  "],[-1,11441," "],[1,11442," "],[-1,11454," "],[1,11455," "],[-1,11459," "],[1,11460," "],[-1,11486," "],[1,11487," "],[-1,11501," {  "],[1,11505," {  "],[-1,11537,"  "],[1,11539,"  "],[-1,11554," = "],[1,11557," = "],[-1,11586,"  "],[1,11588,"  "],[-1,11606," = "],[1,11609," = "],[-1,11641,"  "],[1,11643,"  "],[-1,11654," = "],[1,11657," = "],[-1,11682,"  "],[1,11684,"  "],[-1,11698," = "],[1,11701," = "],[-1,11729,"  "],[1,11731,"  "],[-1,11738,"  "],[1,11740,"  "],[-1,11747,"  "],[1,11749,"  "],[-1,12333," "],[1,12334," "],[-1,12423," "],[1,12424," "],[-1,12513," "],[1,12514," "],[-1,12523," "],[1,12524," "],[-1,12532," {  "],[1,12536," {  "],[-1,12546," "],[1,12547," "],[-1,12575," "],[1,12576," "],[-1,12581," "],[1,12582," "],[-1,12594," "],[1,12595," "],[-1,12600,"  "],[1,12602,"  "],[-1,12612," "],[1,12613," "],[-1,12641," "],[1,12642," "],[-1,12647," "],[1,12648," "],[-1,12660," "],[1,12661," "],[-1,12665," "],[1,12666," "],[-1,12673," e);  "],[1,12679," e);  "],[-1,12689," "],[1,12690," "],[-1,12718," "],[1,12719," "],[-1,12724," "],[1,12725," "],[-1,12737," "],[1,12738," "],[-1,12742," "],[1,12743," "],[-1,12750," e, "],[1,12754," e, "],[-1,12770," a);  "],[1,12776," a);  "],[-1,12786," "],[1,12787," "],[-1,12815," "],[1,12816," "],[-1,12821," "],[1,12822," "],[-1,12834," "],[1,12835," "],[-1,12839," "],[1,12840," "],[-1,12847," e, "],[1,12851," e, "],[-1,12867," a, "],[1,12871," a, "],[-1,12886," v);  "],[1,12892," v);  "],[-1,12899,"  "],[1,12901,"  "],[-1,12998," "],[1,12999," "],[-1,13088," "],[1,13089," "],[-1,13175," "],[1,13176," "],[-1,13182," "],[1,13183," "],[-1,13202," "],[1,13203," "],[-1,13210,"  "],[1,13212,"  "],[-1,13223," "],[1,13224," "],[-1,13233," "],[1,13234," "],[-1,13239," {  "],[1,13243," {  "],[-1,13251," "],[1,13252," "],[-1,13258," "],[1,13259," "],[-1,13276," "],[1,13277," "],[-1,13289," 或 "],[1,13292," 或 "],[-1,13320," "],[1,13321," "],[-1,13326," "],[1,13327," "],[-1,13334,"  "],[1,13336,"  "],[-1,13348," "],[1,13349," "],[-1,13369," t);  "],[1,13375," t);  "],[-1,13385," "],[1,13386," "],[-1,13393," "],[1,13394," "],[-1,13398," "],[1,13399," "],[-1,13409," "],[1,13410," "],[-1,13421," "],[1,13422," "],[-1,13429," "],[1,13430," "],[-1,13460," "],[1,13461," "],[-1,13466," "],[1,13467," "],[-1,13475,"  "],[1,13477,"  "],[-1,13490," "],[1,13491," "],[-1,13512," t1, "],[1,13517," t1, "],[-1,13527," "],[1,13528," "],[-1,13532,"  "],[1,13534,"  "],[-1,13544," "],[1,13545," "],[-1,13552," "],[1,13553," "],[-1,13589," "],[1,13590," "],[-1,13597," "],[1,13598," "],[-1,13605," "],[1,13606," "],[-1,13613," "],[1,13614," "],[-1,13636," "],[1,13637," "],[-1,13641," "],[1,13642," "],[-1,13649," "],[1,13650," "],[-1,13657," "],[1,13658," "],[-1,13682," "],[1,13683," "],[-1,13689," "],[1,13690," "],[-1,13700," 或 "],[1,13703," 或 "],[-1,13710," 类型 "],[1,13714," 类型 "],[-1,13722,"  "],[1,13724,"  "],[-1,13737," "],[1,13738," "],[-1,13758," t1, "],[1,13763," t1, "],[-1,13773," "],[1,13774," "],[-1,13778,"  "],[1,13780,"  "],[-1,13790," "],[1,13791," "],[-1,13798," "],[1,13799," "],[-1,13818," "],[1,13819," "],[-1,13826," "],[1,13827," "],[-1,13834," "],[1,13835," "],[-1,13842," "],[1,13843," "],[-1,13865," "],[1,13866," "],[-1,13870," "],[1,13871," "],[-1,13878," "],[1,13879," "],[-1,13886," "],[1,13887," "],[-1,13911," "],[1,13912," "],[-1,13918," "],[1,13919," "],[-1,13929," 或 "],[1,13932," 或 "],[-1,13939," 类型 "],[1,13943," 类型 "],[-1,13951,"  "],[1,13953,"  "],[-1,13966," "],[1,13967," "],[-1,13990," t1, "],[1,13995," t1, "],[-1,14005," "],[1,14006," "],[-1,14010,"  "],[1,14012,"  "],[-1,14022," "],[1,14023," "],[-1,14030," "],[1,14031," "],[-1,14043," "],[1,14044," "],[-1,14052," "],[1,14053," "],[-1,14060," "],[1,14061," "],[-1,14068," "],[1,14069," "],[-1,14076," "],[1,14077," "],[-1,14096," "],[1,14097," "],[-1,14101," "],[1,14102," "],[-1,14109," "],[1,14110," "],[-1,14117," "],[1,14118," "],[-1,14142," "],[1,14143," "],[-1,14149," "],[1,14150," "],[-1,14160," 或 "],[1,14163," 或 "],[-1,14170," 类型 "],[1,14174," 类型 "],[-1,14182,"  "],[1,14184,"  "],[-1,14197," "],[1,14198," "],[-1,14217," t1, "],[1,14222," t1, "],[-1,14232," "],[1,14233," "],[-1,14237,"  "],[1,14239,"  "],[-1,14249," "],[1,14250," "],[-1,14257," "],[1,14258," "],[-1,14280," "],[1,14281," "],[-1,14288," "],[1,14289," "],[-1,14296," "],[1,14297," "],[-1,14304," "],[1,14305," "],[-1,14327," "],[1,14328," "],[-1,14332," "],[1,14333," "],[-1,14341,"  "],[1,14343,"  "],[-1,14356," "],[1,14357," "],[-1,14386," m1, "],[1,14391," m1, "],[-1,14405," "],[1,14406," "],[-1,14410,"  "],[1,14412,"  "],[-1,14422," "],[1,14423," "],[-1,14430," "],[1,14431," "],[-1,14451," "],[1,14452," "],[-1,14469," "],[1,14470," "],[-1,14477," "],[1,14478," "],[-1,14485," "],[1,14486," "],[-1,14493," "],[1,14494," "],[-1,14513," "],[1,14514," "],[-1,14521," "],[1,14522," "],[-1,14529," "],[1,14530," "],[-1,14554," "],[1,14555," "],[-1,14561," "],[1,14562," "],[-1,14572," 或 "],[1,14575," 或 "],[-1,14582," 类型 "],[1,14586," 类型 "],[-1,14594,"  "],[1,14596,"  "],[-1,14608," "],[1,14609," "],[-1,14616," "],[1,14617," "],[-1,14628," "],[1,14629," "],[-1,14656," t);  "],[1,14662," t);  "],[-1,14672," "],[1,14673," "],[-1,14680," "],[1,14681," "],[-1,14691," "],[1,14692," "],[-1,14699," "],[1,14700," "],[-1,14707," "],[1,14708," "],[-1,14715," "],[1,14716," "],[-1,14725," "],[1,14726," "],[-1,14733," "],[1,14734," "],[-1,14741," "],[1,14742," "],[-1,14766," "],[1,14767," "],[-1,14773," "],[1,14774," "],[-1,14781," 类型 "],[1,14785," 类型 "],[-1,14793,"  "],[1,14795,"  "],[-1,14811," "],[1,14812," "],[-1,14830," t);  "],[1,14836," t);  "],[-1,14846," "],[1,14847," "],[-1,14854," "],[1,14855," "],[-1,14866," "],[1,14867," "],[-1,14874," "],[1,14875," "],[-1,14884," "],[1,14885," "],[-1,14891," 转换. "],[1,14896," 转换. "],[-1,14903," "],[1,14904," "],[-1,14911," "],[1,14912," "],[-1,14918," p  "],[1,14922," p  "],[-1,14930," "],[1,14931," "],[-1,14938," "],[1,14939," "],[-1,14946," 类型 p "],[1,14952," 类型 p "],[-1,14960," "],[1,14961," "],[-1,14969,"  "],[1,14971,"  "],[-1,14988," "],[1,14989," "],[-1,15013," p);  "],[1,15019," p);  "],[-1,15029," "],[1,15030," "],[-1,15037," "],[1,15038," "],[-1,15047," "],[1,15048," "],[-1,15057," "],[1,15058," "],[-1,15071," "],[1,15072," "],[-1,15080," 转换. "],[1,15085," 转换. "],[-1,15092," "],[1,15093," "],[-1,15100," "],[1,15101," "],[-1,15107," t  "],[1,15111," t  "],[-1,15117," "],[1,15118," "],[-1,15125," "],[1,15126," "],[-1,15133," 类型 t "],[1,15139," 类型 t "],[-1,15145," "],[1,15146," "],[-1,15153," "],[1,15154," "],[-1,15161," "],[1,15162," "],[-1,15186," "],[1,15187," "],[-1,15197," "],[1,15198," "],[-1,15206," 转换 "],[1,15210," 转换 "],[-1,15218,"  "],[1,15220,"  "],[-1,15239," "],[1,15240," "],[-1,15262," t);  "],[1,15268," t);  "],[-1,15278," "],[1,15279," "],[-1,15286," "],[1,15287," "],[-1,15292," "],[1,15293," "],[-1,15300," 转换. "],[1,15305," 转换. "],[-1,15312," "],[1,15313," "],[-1,15320," "],[1,15321," "],[-1,15328," 应用 "],[1,15332," 应用 "],[-1,15339," "],[1,15340," "],[-1,15345," "],[1,15346," "],[-1,15353," "],[1,15354," "],[-1,15361," "],[1,15362," "],[-1,15386," "],[1,15387," "],[-1,15391," "],[1,15392," "],[-1,15402," 或 "],[1,15405," 或 "],[-1,15412," 类型 "],[1,15416," 类型 "],[-1,15424,"  "],[1,15426,"  "],[-1,15442," "],[1,15443," "],[-1,15461," t);  "],[1,15467," t);  "],[-1,15477," "],[1,15478," "],[-1,15485," "],[1,15486," "],[-1,15493," "],[1,15494," "],[-1,15501," "],[1,15502," "],[-1,15509," "],[1,15510," "],[-1,15516," "],[1,15517," "],[-1,15521,"  "],[1,15523,"  "],[-1,15534," "],[1,15535," "],[-1,15542," "],[1,15543," "],[-1,15550," "],[1,15551," "],[-1,15557," "],[1,15558," "],[-1,15565," "],[1,15566," "],[-1,15573," "],[1,15574," "],[-1,15598," 如果 "],[1,15602," 如果 "],[-1,15606," "],[1,15607," "],[-1,15613," "],[1,15614," "],[-1,15622,"  "],[1,15624,"  "],[-1,15643," "],[1,15644," "],[-1,15669," "],[1,15670," "],[-1,15676,"  "],[1,15678,"  "],[-1,15688," "],[1,15689," "],[-1,15696," 返回 "],[1,15700," 返回 "],[-1,15704," "],[1,15705," "],[-1,15712," "],[1,15713," "],[-1,15717," "],[1,15718," "],[-1,15722," "],[1,15723," "],[-1,15731,"  "],[1,15733,"  "],[-1,15748," "],[1,15749," "],[-1,15763,"  "],[1,15765,"  "],[-1,15776," "],[1,15777," "],[-1,15785," "],[1,15786," "],[-1,15807," "],[1,15808," "],[-1,15816," "],[1,15817," "],[-1,15829," "],[1,15830," "],[-1,15834," 或 "],[1,15837," 或 "],[-1,15850," "],[1,15851," "],[-1,15900," 替代. "],[1,15905," 替代. "],[-1,15913," "],[1,15914," "],[-1,15922," "],[1,15923," "],[-1,15929," "],[1,15930," "],[-1,15934,"  "],[1,15936,"  "],[-1,15945," "],[1,15946," "],[-1,15954," "],[1,15955," "],[-1,15962," 种类 "],[1,15966," 种类 "],[-1,15970," 或 "],[1,15973," 或 "],[-1,15977," "],[1,15978," "],[-1,15982," "],[1,15983," "],[-1,15991," "],[1,15992," "],[-1,15999," "],[1,16000," "],[-1,16024," 如果 "],[1,16028," 如果 "],[-1,16032," 无效 "],[1,16036," 无效 "],[-1,16045,"  "],[1,16047,"  "],[-1,16060," "],[1,16061," "],[-1,16079," "],[1,16080," "],[-1,16086,"  "],[1,16088,"  "],[-1,16099," "],[1,16100," "],[-1,16108," "],[1,16109," "],[-1,16125," "],[1,16126," "],[-1,16134," "],[1,16135," "],[-1,16143," "],[1,16144," "],[-1,16151," "],[1,16152," "],[-1,16176," "],[1,16177," "],[-1,16189," "],[1,16190," "],[-1,16199,"  "],[1,16201,"  "],[-1,16217," "],[1,16218," "],[-1,16241," "],[1,16242," "],[-1,16257,"  "],[1,16259,"  "],[-1,16270," "],[1,16271," "],[-1,16279," "],[1,16280," "],[-1,16321," "],[1,16322," "],[-1,16330," "],[1,16331," "],[-1,16339," "],[1,16340," "],[-1,16346," "],[1,16347," "],[-1,16359,"  "],[1,16361,"  "],[-1,16379," "],[1,16380," "],[-1,16384," "],[1,16385," "],[-1,16393," "],[1,16394," "],[-1,16400," "],[1,16401," "],[-1,16411,"    "],[1,16415,"    "],[-1,16432," "],[1,16433," "],[-1,16437," "],[1,16438," "],[-1,16446," "],[1,16447," "],[-1,16454," "],[1,16455," "],[-1,16460," "],[1,16461," "],[-1,16469," "],[1,16470," "],[-1,16477," "],[1,16478," "],[-1,16502," "],[1,16503," "],[-1,16509," "],[1,16510," "],[-1,16519,"  "],[1,16521,"  "],[-1,16540," "],[1,16541," "],[-1,16567," "],[1,16568," "],[-1,16581,"  "],[1,16583,"  "],[-1,16600," "],[1,16601," "],[-1,16613,"  "],[1,16615,"  "],[-1,16626," "],[1,16627," "],[-1,16635," "],[1,16636," "],[-1,16663," Set "],[1,16668," Set "],[-1,16674," "],[1,16675," "],[-1,16681," "],[1,16682," "],[-1,16704," "],[1,16705," "],[-1,16717," "],[1,16718," "],[-1,16726," "],[1,16727," "],[-1,16735," "],[1,16736," "],[-1,16766," "],[1,16767," "],[-1,16773," "],[1,16774," "],[-1,16800," "],[1,16801," "],[-1,16809," "],[1,16810," "],[-1,16818," "],[1,16819," "],[-1,16849," "],[1,16850," "],[-1,16858," "],[1,16859," "],[-1,16873," "],[1,16874," "],[-1,16892," "],[1,16893," "],[-1,16922," "],[1,16923," "],[-1,16935," "],[1,16936," "],[-1,16951," "],[1,16952," "],[-1,16960," "],[1,16961," "],[-1,16970," "],[1,16971," "],[-1,16999," "],[1,17000," "],[-1,17008," "],[1,17009," "],[-1,17017," "],[1,17018," "],[-1,17024," "],[1,17025," "],[-1,17033,"  "],[1,17035,"  "],[-1,17039," "],[1,17040," "],[-1,17048," "],[1,17049," "],[-1,17055," "],[1,17056," "],[-1,17064,"  "],[1,17066,"  "],[-1,17072," "],[1,17073," "],[-1,17081," "],[1,17082," "],[-1,17089," "],[1,17090," "],[-1,17107," "],[1,17108," "],[-1,17116," "],[1,17117," "],[-1,17124," "],[1,17125," "],[-1,17149," "],[1,17150," "],[-1,17182," "],[1,17183," "],[-1,17192,"  "],[1,17194,"  "],[-1,17213," "],[1,17214," "],[-1,17241," "],[1,17242," "],[-1,17251," "],[1,17252," "],[-1,17265," "],[1,17266," "],[-1,17276,"  "],[1,17278,"  "],[-1,17289," "],[1,17290," "],[-1,17298," "],[1,17299," "],[-1,17346," "],[1,17347," "],[-1,17355," "],[1,17356," "],[-1,17383," "],[1,17384," "],[-1,17392," "],[1,17393," "],[-1,17404," "],[1,17405," "],[-1,17413," "],[1,17414," "],[-1,17430," "],[1,17431," "],[-1,17443," "],[1,17444," "],[-1,17469," "],[1,17470," "],[-1,17480," "],[1,17481," "],[-1,17489," "],[1,17490," "],[-1,17498," "],[1,17499," "],[-1,17505," "],[1,17506," "],[-1,17516,"  "],[1,17518,"  "],[-1,17533," "],[1,17534," "],[-1,17538," "],[1,17539," "],[-1,17547," "],[1,17548," "],[-1,17554," "],[1,17555," "],[-1,17563,"  "],[1,17565,"  "],[-1,17569," "],[1,17570," "],[-1,17578," "],[1,17579," "],[-1,17585," "],[1,17586," "],[-1,17594,"  "],[1,17596,"  "],[-1,17602," "],[1,17603," "],[-1,17611," "],[1,17612," "],[-1,17619," "],[1,17620," "],[-1,17649," "],[1,17650," "],[-1,17658," "],[1,17659," "],[-1,17666," "],[1,17667," "],[-1,17691," "],[1,17692," "],[-1,17730," "],[1,17731," "],[-1,17740,"  "],[1,17742,"  "],[-1,17761," "],[1,17762," "],[-1,17790," "],[1,17791," "],[-1,17802,"  "],[1,17804,"  "],[-1,17822," "],[1,17823," "],[-1,17832," "],[1,17833," "],[-1,17846," "],[1,17847," "],[-1,17857,"  "],[1,17859,"  "],[-1,17870," "],[1,17871," "],[-1,17879," "],[1,17880," "],[-1,17915," "],[1,17916," "],[-1,17924," "],[1,17925," "],[-1,17936," "],[1,17937," "],[-1,17948," "],[1,17949," "],[-1,17961," "],[1,17962," "],[-1,17970," "],[1,17971," "],[-1,17977," 的 "],[1,17980," 的 "],[-1,17995," "],[1,17996," "],[-1,18004," "],[1,18005," "],[-1,18013," "],[1,18014," "],[-1,18020," "],[1,18021," "],[-1,18031,"  "],[1,18033,"  "],[-1,18037," "],[1,18038," "],[-1,18046," "],[1,18047," "],[-1,18053," "],[1,18054," "],[-1,18061,"     元素 "],[1,18069,"     元素 "],[-1,18077," "],[1,18078," "],[-1,18085," "],[1,18086," "],[-1,18099," "],[1,18100," "],[-1,18108," "],[1,18109," "],[-1,18116," "],[1,18117," "],[-1,18141," "],[1,18142," "],[-1,18154," "],[1,18155," "],[-1,18164,"  "],[1,18166,"  "],[-1,18183," "],[1,18184," "],[-1,18207," "],[1,18208," "],[-1,18219," "],[1,18220," "],[-1,18227," "],[1,18228," "],[-1,18237,"  "],[1,18239,"  "],[-1,18247,"  "],[1,18249,"  "],[-1,18319," "],[1,18320," "],[-1,18409," "],[1,18410," "],[-1,18496," "],[1,18497," "],[-1,18503," "],[1,18504," "],[-1,18520," "],[1,18521," "],[-1,18528,"  "],[1,18530,"  "],[-1,18541," "],[1,18542," "],[-1,18551," "],[1,18552," "],[-1,18560," {  "],[1,18564," {  "],[-1,18573," "],[1,18574," "],[-1,18580," "],[1,18581," "],[-1,18596," "],[1,18597," "],[-1,18603," "],[1,18604," "],[-1,18610," "],[1,18611," "],[-1,18617," "],[1,18618," "],[-1,18622,"  "],[1,18624,"  "],[-1,18645," \"\" "],[1,18649," \"\" "],[-1,18656," "],[1,18657," "],[-1,18664," "],[1,18665," "],[-1,18684," "],[1,18685," "],[-1,18689," "],[1,18690," "],[-1,18698,"  "],[1,18700,"  "],[-1,18720," "],[1,18721," "],[-1,18751," "],[1,18752," "],[-1,18758,"  "],[1,18760,"  "],[-1,18770," "],[1,18771," "],[-1,18778," "],[1,18779," "],[-1,18795," "],[1,18796," "],[-1,18803," "],[1,18804," "],[-1,18811," "],[1,18812," "],[-1,18818," "],[1,18819," "],[-1,18823,"  "],[1,18825,"  "],[-1,18829," "],[1,18830," "],[-1,18837," "],[1,18838," "],[-1,18845," "],[1,18846," "],[-1,18869," "],[1,18870," "],[-1,18874," "],[1,18875," "],[-1,18883,"  "],[1,18885,"  "],[-1,18902," "],[1,18903," "],[-1,18930," "],[1,18931," "],[-1,18937,"  "],[1,18939,"  "],[-1,18949," "],[1,18950," "],[-1,18957," "],[1,18958," "],[-1,18973," "],[1,18974," "],[-1,18981," "],[1,18982," "],[-1,19045," "],[1,19046," "],[-1,19053," "],[1,19054," "],[-1,19073," "],[1,19074," "],[-1,19081," "],[1,19082," "],[-1,19089," "],[1,19090," "],[-1,19094," "],[1,19095," "],[-1,19130," "],[1,19131," "],[-1,19138," "],[1,19139," "],[-1,19145," a  "],[1,19149," a  "],[-1,19155," "],[1,19156," "],[-1,19163," "],[1,19164," "],[-1,19171," "],[1,19172," "],[-1,19184," "],[1,19185," "],[-1,19193,"  "],[1,19195,"  "],[-1,19206," "],[1,19207," "],[-1,19214," "],[1,19215," "],[-1,19233," ? "],[1,19236," ? "],[-1,19243," "],[1,19244," "],[-1,19260,"  "],[1,19262,"  "],[-1,19313," a);  "],[1,19319," a);  "],[-1,19329," "],[1,19330," "],[-1,19337," "],[1,19338," "],[-1,19360," "],[1,19361," "],[-1,19368," "],[1,19369," "],[-1,19376," "],[1,19377," "],[-1,19383," e  "],[1,19387," e  "],[-1,19394," "],[1,19395," "],[-1,19402," "],[1,19403," "],[-1,19410," "],[1,19411," "],[-1,19427," "],[1,19428," "],[-1,19432," "],[1,19433," "],[-1,19441,"  "],[1,19443,"  "],[-1,19455," "],[1,19456," "],[-1,19477," e);  "],[1,19483," e);  "],[-1,19493," "],[1,19494," "],[-1,19501," "],[1,19502," "],[-1,19513," "],[1,19514," "],[-1,19523," "],[1,19524," "],[-1,19530," "],[1,19531," "],[-1,19538," "],[1,19539," "],[-1,19546," "],[1,19547," "],[-1,19553," e  "],[1,19557," e  "],[-1,19564," "],[1,19565," "],[-1,19572," "],[1,19573," "],[-1,19580," "],[1,19581," "],[-1,19592," "],[1,19593," "],[-1,19602," "],[1,19603," "],[-1,19608," "],[1,19609," "],[-1,19617,"  "],[1,19619,"  "],[-1,19632," "],[1,19633," "],[-1,19653," e);  "],[1,19659," e);  "],[-1,19669," "],[1,19670," "],[-1,19677," "],[1,19678," "],[-1,19691," "],[1,19692," "],[-1,19699," "],[1,19700," "],[-1,19707," "],[1,19708," "],[-1,19714," "],[1,19715," "],[-1,19719,"  "],[1,19721,"  "],[-1,19730," "],[1,19731," "],[-1,19738," "],[1,19739," "],[-1,19746," "],[1,19747," "],[-1,19752," "],[1,19753," "],[-1,19761,"  "],[1,19763,"  "],[-1,19773," "],[1,19774," "],[-1,19799," "],[1,19800," "],[-1,19806,"  "],[1,19808,"  "],[-1,19818," "],[1,19819," "],[-1,19826," "],[1,19827," "],[-1,19842," "],[1,19843," "],[-1,19850," "],[1,19851," "],[-1,19858," "],[1,19859," "],[-1,19865," "],[1,19866," "],[-1,19870," "],[1,19871," "],[-1,19878," "],[1,19879," "],[-1,19886," "],[1,19887," "],[-1,19894," "],[1,19895," "],[-1,19899," "],[1,19900," "],[-1,19908,"  "],[1,19910,"  "],[-1,19930," "],[1,19931," "],[-1,19951," "],[1,19952," "],[-1,19958,"  "],[1,19960,"  "],[-1,19970," "],[1,19971," "],[-1,19978," "],[1,19979," "],[-1,20034," "],[1,20035," "],[-1,20042," "],[1,20043," "],[-1,20050," "],[1,20051," "],[-1,20056," "],[1,20057," "],[-1,20070," "],[1,20071," "],[-1,20087," "],[1,20088," "],[-1,20095," "],[1,20096," "],[-1,20103," "],[1,20104," "],[-1,20110," "],[1,20111," "],[-1,20115,"  "],[1,20117,"  "],[-1,20124," "],[1,20125," "],[-1,20132," "],[1,20133," "],[-1,20140," "],[1,20141," "],[-1,20148," "],[1,20149," "],[-1,20157,"  "],[1,20159,"  "],[-1,20171," "],[1,20172," "],[-1,20179," "],[1,20180," "],[-1,20188," "],[1,20189," "],[-1,20214," "],[1,20215," "],[-1,20221,"  "],[1,20223,"  "],[-1,20233," "],[1,20234," "],[-1,20241," "],[1,20242," "],[-1,20266," "],[1,20267," "],[-1,20274," "],[1,20275," "],[-1,20282," "],[1,20283," "],[-1,20289," e  "],[1,20293," e  "],[-1,20300," "],[1,20301," "],[-1,20308," "],[1,20309," "],[-1,20316," "],[1,20317," "],[-1,20324," "],[1,20325," "],[-1,20333,"  "],[1,20335,"  "],[-1,20347," "],[1,20348," "],[-1,20355," "],[1,20356," "],[-1,20373," "],[1,20374," "],[-1,20405," e);  "],[1,20411," e);  "],[-1,20421," "],[1,20422," "],[-1,20429," "],[1,20430," "],[-1,20459," "],[1,20460," "],[-1,20467," "],[1,20468," "],[-1,20475," "],[1,20476," "],[-1,20482," "],[1,20483," "],[-1,20488,"   "],[1,20491,"   "],[-1,20496," "],[1,20497," "],[-1,20504," "],[1,20505," "],[-1,20511," "],[1,20512," "],[-1,20518,"  "],[1,20520,"  "],[-1,20525," "],[1,20526," "],[-1,20533," "],[1,20534," "],[-1,20541," "],[1,20542," "],[-1,20562," "],[1,20563," "],[-1,20567," "],[1,20568," "],[-1,20576,"  "],[1,20578,"  "],[-1,20591," "],[1,20592," "],[-1,20605," "],[1,20606," "],[-1,20612," "],[1,20613," "],[-1,20620," "],[1,20621," "],[-1,20629,"  "],[1,20631,"  "],[-1,20641," "],[1,20642," "],[-1,20649," "],[1,20650," "],[-1,20702," "],[1,20703," "],[-1,20707," "],[1,20708," "],[-1,20715," "],[1,20716," "],[-1,20723," "],[1,20724," "],[-1,20730," "],[1,20731," "],[-1,20740,"  "],[1,20742,"  "],[-1,20751," "],[1,20752," "],[-1,20761," "],[1,20762," "],[-1,20769," "],[1,20770," "],[-1,20776," "],[1,20777," "],[-1,20787,"  "],[1,20789,"  "],[-1,20800," "],[1,20801," "],[-1,20808," "],[1,20809," "],[-1,20815," "],[1,20816," "],[-1,20820,"   "],[1,20823,"   "],[-1,20835," "],[1,20836," "],[-1,20843," "],[1,20844," "],[-1,20851," "],[1,20852," "],[-1,20871," "],[1,20872," "],[-1,20876," "],[1,20877," "],[-1,20886,"  "],[1,20888,"  "],[-1,20902," "],[1,20903," "],[-1,20930," "],[1,20931," "],[-1,20941," "],[1,20942," "],[-1,20959," "],[1,20960," "],[-1,20971,"  "],[1,20973,"  "],[-1,20991," "],[1,20992," "],[-1,20998,"  "],[1,21000,"  "],[-1,21011," "],[1,21012," "],[-1,21020," "],[1,21021," "],[-1,21038," "],[1,21039," "],[-1,21067," "],[1,21068," "],[-1,21076," "],[1,21077," "],[-1,21085," "],[1,21086," "],[-1,21092," "],[1,21093," "],[-1,21098,"  "],[1,21100,"  "],[-1,21107," "],[1,21108," "],[-1,21116," "],[1,21117," "],[-1,21124," "],[1,21125," "],[-1,21133," "],[1,21134," "],[-1,21142," "],[1,21143," "],[-1,21150," "],[1,21151," "],[-1,21175," "],[1,21176," "],[-1,21189," "],[1,21190," "],[-1,21198," "],[1,21199," "],[-1,21207," "],[1,21208," "],[-1,21212," "],[1,21213," "],[-1,21247," "],[1,21248," "],[-1,21257,"  "],[1,21259,"  "],[-1,21272," "],[1,21273," "],[-1,21301," "],[1,21302," "],[-1,21309,"  "],[1,21311,"  "],[-1,21322," "],[1,21323," "],[-1,21331," "],[1,21332," "],[-1,21350," "],[1,21351," "],[-1,21379," "],[1,21380," "],[-1,21391," "],[1,21392," "],[-1,21400," "],[1,21401," "],[-1,21409," "],[1,21410," "],[-1,21416," w "],[1,21419," w "],[-1,21425," "],[1,21426," "],[-1,21432," "],[1,21433," "],[-1,21441," "],[1,21442," "],[-1,21448," "],[1,21449," "],[-1,21457," "],[1,21458," "],[-1,21464," "],[1,21465," "],[-1,21474,"  "],[1,21476,"  "],[-1,21487," "],[1,21488," "],[-1,21516," w, "],[1,21520," w, "],[-1,21530," "],[1,21531," "],[-1,21541,"  "],[1,21543,"  "],[-1,21554," "],[1,21555," "],[-1,21563," "],[1,21564," "],[-1,21581," "],[1,21582," "],[-1,21590," "],[1,21591," "],[-1,21599," "],[1,21600," "],[-1,21606," cs "],[1,21610," cs "],[-1,21623," "],[1,21624," "],[-1,21632," "],[1,21633," "],[-1,21640," "],[1,21641," "],[-1,21657," "],[1,21658," "],[-1,21667,"  "],[1,21669,"  "],[-1,21680," "],[1,21681," "],[-1,21701," "],[1,21702," "],[-1,21706,"  "],[1,21708,"  "],[-1,21719," "],[1,21720," "],[-1,21728," "],[1,21729," "],[-1,21743," true，否则返回 false \n133.  * \n134.  * @param type 将被检查的类型 \n135.  * @return 如果类型是一个泛型接口则返回 "],[1,21830," true，否则返回 false \n133.  * \n134.  * @param type 将被检查的类型 \n135.  * @return 如果类型是一个泛型接口则返回 "],[-1,21839," false \n136.  * @since 1.8 \n137.  */  \n138.  boolean isFunctionalInterface(TypeElement type);  "],[1,21934," false \n136.  * @since 1.8 \n137.  */  \n138.  boolean isFunctionalInterface(TypeElement type);  ··"]],[153,2271],[156,156]]],[1519705409473,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,153,"···"]],[156,156],[153,153]]],[1519705411900,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,153,"```java"]],[153,153],[160,160]]],[1519705412218,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,162,"\n"]],[160,160],[161,161]]],[1519705413475,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,161,"```"]],[161,161],[164,164]]],[1519705414555,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,161,"\n"]],[161,161],[162,162]]],[1519705415457,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,161,"/** \r\n * 表示一个程序元素，比如包、类或者方法，有如下几种子接口： \r\n * ExecutableElement：表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注解类型元素 ； \r\n * PackageElement：表示一个包程序元素； \r\n * TypeElement：表示一个类或接口程序元素； \r\n * TypeParameterElement：表示一般类、接口、方法或构造方法元素的形式类型参数； \r\n * VariableElement：表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数 \r\n */  \r\npublic interface Element extends AnnotatedConstruct {  \r\n    /** \r\n     * 返回此元素定义的类型 \r\n     * 例如，对于一般类元素 C<N extends Number>，返回参数化类型 C<N> \r\n     */  \r\n    TypeMirror asType();  \r\n  \r\n    /** \r\n     * 返回此元素的种类：包、类、接口、方法、字段...,如下枚举值 \r\n     * PACKAGE, ENUM, CLASS, ANNOTATION_TYPE, INTERFACE, ENUM_CONSTANT, FIELD, PARAMETER, LOCAL_VARIABLE, EXCEPTION_PARAMETER, \r\n     * METHOD, CONSTRUCTOR, STATIC_INIT, INSTANCE_INIT, TYPE_PARAMETER, OTHER, RESOURCE_VARIABLE; \r\n     */  \r\n    ElementKind getKind();  \r\n  \r\n    /** \r\n     * 返回此元素的修饰符,如下枚举值 \r\n     * PUBLIC, PROTECTED, PRIVATE, ABSTRACT, DEFAULT, STATIC, FINAL, \r\n     * TRANSIENT, VOLATILE, SYNCHRONIZED, NATIVE, STRICTFP; \r\n     */  \r\n    Set<Modifier> getModifiers();  \r\n  \r\n    /** \r\n     * 返回此元素的简单名称,例如 \r\n     * 类型元素 java.util.Set<E> 的简单名称是 \"Set\"； \r\n     * 如果此元素表示一个未指定的包，则返回一个空名称； \r\n     * 如果它表示一个构造方法，则返回名称 \"<init>\"； \r\n     * 如果它表示一个静态初始化程序，则返回名称 \"<clinit>\"； \r\n     * 如果它表示一个匿名类或者实例初始化程序，则返回一个空名称 \r\n     */  \r\n    Name getSimpleName();  \r\n  \r\n    /** \r\n     * 返回封装此元素的最里层元素。 \r\n     * 如果此元素的声明在词法上直接封装在另一个元素的声明中，则返回那个封装元素； \r\n     * 如果此元素是顶层类型，则返回它的包； \r\n     * 如果此元素是一个包，则返回 null； \r\n     * 如果此元素是一个泛型参数，则返回 null. \r\n     */  \r\n    Element getEnclosingElement();  \r\n  \r\n    /** \r\n     * 返回此元素直接封装的子元素 \r\n     */  \r\n    List<? extends Element> getEnclosedElements();  \r\n  \r\n    /** \r\n     * 返回直接存在于此元素上的注解 \r\n     * 要获得继承的注解，可使用 getAllAnnotationMirrors \r\n     */  \r\n    @Override  \r\n    List<? extends AnnotationMirror> getAnnotationMirrors();  \r\n  \r\n    /** \r\n     * 返回此元素针对指定类型的注解（如果存在这样的注解），否则返回 null。注解可以是继承的，也可以是直接存在于此元素上的 \r\n     */  \r\n    @Override  \r\n    <A extends Annotation> A getAnnotation(Class<A> annotationType);  \r\n}  "]],[161,161],[2126,2126]]],[1519705475708,[null,[[-1,160,"*"],[1,161,"\n"],[-1,165,"\r"],[1,166,"\n"],[-1,199,"\r"],[1,200,"\n"],[-1,263,"\r"],[1,264,"\n"],[-1,294,"\r"],[1,295,"\n"],[-1,325,"\r"],[1,326,"\n"],[-1,378,"\r"],[1,379,"\n"],[-1,434,"\r"],[1,435,"\n"],[-1,441,"\r"],[1,442,"\n"],[-1,498,"\r"],[1,499,"\n"],[-1,508,"\r"],[1,509,"\n"],[-1,528,"\r"],[1,529,"\n"],[-1,581,"\r"],[1,582,"\n"],[-1,592,"\r"],[1,593,"\n"],[-1,620,"\r\n  \r"],[1,625,"\n\n  \n"],[-1,634,"\r"],[1,635,"\n"],[-1,674,"\r"],[1,675,"\n"],[-1,803,"\r"],[1,804,"\n"],[-1,903,"\r"],[1,904,"\n"],[-1,914,"\r"],[1,915,"\n"],[-1,944,"\r\n  \r"],[1,949,"\n\n  \n"],[-1,958,"\r"],[1,959,"\n"],[-1,983,"\r"],[1,984,"\n"],[-1,1054,"\r"],[1,1055,"\n"],[-1,1116,"\r"],[1,1117,"\n"],[-1,1127,"\r"],[1,1128,"\n"],[-1,1164,"\r\n  \r"],[1,1169,"\n\n  \n"],[-1,1178,"\r"],[1,1179,"\n"],[-1,1201,"\r"],[1,1202,"\n"],[-1,1246,"\r"],[1,1247,"\n"],[-1,1280,"\r"],[1,1281,"\n"],[-1,1317,"\r"],[1,1318,"\n"],[-1,1359,"\r"],[1,1360,"\n"],[-1,1397,"\r"],[1,1398,"\n"],[-1,1408,"\r"],[1,1409,"\n"],[-1,1437,"\r\n  \r"],[1,1442,"\n\n  \n"],[-1,1451,"\r"],[1,1452,"\n"],[-1,1475,"\r"],[1,1476,"\n"],[-1,1522,"\r"],[1,1523,"\n"],[-1,1550,"\r"],[1,1551,"\n"],[-1,1579,"\r"],[1,1580,"\n"],[-1,1611,"\r"],[1,1612,"\n"],[-1,1622,"\r"],[1,1623,"\n"],[-1,1660,"\r\n  \r"],[1,1665,"\n\n  \n"],[-1,1674,"\r"],[1,1675,"\n"],[-1,1697,"\r"],[1,1698,"\n"],[-1,1708,"\r"],[1,1709,"\n"],[-1,1762,"\r\n  \r"],[1,1767,"\n\n  \n"],[-1,1776,"\r"],[1,1777,"\n"],[-1,1800,"\r"],[1,1801,"\n"],[-1,1846,"\r"],[1,1847,"\n"],[-1,1857,"\r"],[1,1858,"\n"],[-1,1874,"\r"],[1,1875,"\n"],[-1,1938,"\r\n  \r"],[1,1943,"\n\n  \n"],[-1,1952,"\r"],[1,1953,"\n"],[-1,2021,"\r"],[1,2022,"\n"],[-1,2032,"\r"],[1,2033,"\n"],[-1,2049,"\r"],[1,2050,"\n"],[-1,2121,"\r"],[1,2122,"\n"],[-1,2130,"*\n"],[1,2132,"\n\n**"],[-1,21791,"··"]],[160,160],[21791,21791]]],[1519705475709,[null,[[1,160,"*"],[-1,160,"\n"],[1,165,"\r"],[-1,165,"\n"],[1,199,"\r"],[-1,199,"\n"],[1,263,"\r"],[-1,263,"\n"],[1,294,"\r"],[-1,294,"\n"],[1,325,"\r"],[-1,325,"\n"],[1,378,"\r"],[-1,378,"\n"],[1,434,"\r"],[-1,434,"\n"],[1,441,"\r"],[-1,441,"\n"],[1,498,"\r"],[-1,498,"\n"],[1,508,"\r"],[-1,508,"\n"],[1,528,"\r"],[-1,528,"\n"],[1,581,"\r"],[-1,581,"\n"],[1,592,"\r"],[-1,592,"\n"],[1,620,"\r\n  \r"],[-1,620,"\n\n  \n"],[1,634,"\r"],[-1,634,"\n"],[1,674,"\r"],[-1,674,"\n"],[1,803,"\r"],[-1,803,"\n"],[1,903,"\r"],[-1,903,"\n"],[1,914,"\r"],[-1,914,"\n"],[1,944,"\r\n  \r"],[-1,944,"\n\n  \n"],[1,958,"\r"],[-1,958,"\n"],[1,983,"\r"],[-1,983,"\n"],[1,1054,"\r"],[-1,1054,"\n"],[1,1116,"\r"],[-1,1116,"\n"],[1,1127,"\r"],[-1,1127,"\n"],[1,1164,"\r\n  \r"],[-1,1164,"\n\n  \n"],[1,1178,"\r"],[-1,1178,"\n"],[1,1201,"\r"],[-1,1201,"\n"],[1,1246,"\r"],[-1,1246,"\n"],[1,1280,"\r"],[-1,1280,"\n"],[1,1317,"\r"],[-1,1317,"\n"],[1,1359,"\r"],[-1,1359,"\n"],[1,1397,"\r"],[-1,1397,"\n"],[1,1408,"\r"],[-1,1408,"\n"],[1,1437,"\r\n  \r"],[-1,1437,"\n\n  \n"],[1,1451,"\r"],[-1,1451,"\n"],[1,1475,"\r"],[-1,1475,"\n"],[1,1522,"\r"],[-1,1522,"\n"],[1,1550,"\r"],[-1,1550,"\n"],[1,1579,"\r"],[-1,1579,"\n"],[1,1611,"\r"],[-1,1611,"\n"],[1,1622,"\r"],[-1,1622,"\n"],[1,1660,"\r\n  \r"],[-1,1660,"\n\n  \n"],[1,1674,"\r"],[-1,1674,"\n"],[1,1697,"\r"],[-1,1697,"\n"],[1,1708,"\r"],[-1,1708,"\n"],[1,1762,"\r\n  \r"],[-1,1762,"\n\n  \n"],[1,1776,"\r"],[-1,1776,"\n"],[1,1800,"\r"],[-1,1800,"\n"],[1,1846,"\r"],[-1,1846,"\n"],[1,1857,"\r"],[-1,1857,"\n"],[1,1874,"\r"],[-1,1874,"\n"],[1,1938,"\r\n  \r"],[-1,1938,"\n\n  \n"],[1,1952,"\r"],[-1,1952,"\n"],[1,2021,"\r"],[-1,2021,"\n"],[1,2032,"\r"],[-1,2032,"\n"],[1,2049,"\r"],[-1,2049,"\n"],[1,2121,"\r"],[-1,2121,"\n"],[1,2130,"*\n"],[-1,2130,"\n\n**"],[1,21793,"··"]],[21791,21791],[160,160]]],[1519705437875,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,165,"\r"],[-1,199,"\r"],[-1,263,"\r"],[-1,294,"\r"],[-1,325,"\r"],[-1,378,"\r"],[-1,434,"\r"],[-1,441,"\r"],[-1,498,"\r"],[-1,508,"\r"],[-1,528,"\r"],[-1,581,"\r"],[-1,592,"\r"],[-1,620,"\r"],[-1,624,"\r"],[-1,634,"\r"],[-1,674,"\r"],[-1,803,"\r"],[-1,903,"\r"],[-1,914,"\r"],[-1,944,"\r"],[-1,948,"\r"],[-1,958,"\r"],[-1,983,"\r"],[-1,1054,"\r"],[-1,1116,"\r"],[-1,1127,"\r"],[-1,1164,"\r"],[-1,1168,"\r"],[-1,1178,"\r"],[-1,1201,"\r"],[-1,1246,"\r"],[-1,1280,"\r"],[-1,1317,"\r"],[-1,1359,"\r"],[-1,1397,"\r"],[-1,1408,"\r"],[-1,1437,"\r"],[-1,1441,"\r"],[-1,1451,"\r"],[-1,1475,"\r"],[-1,1522,"\r"],[-1,1550,"\r"],[-1,1579,"\r"],[-1,1611,"\r"],[-1,1622,"\r"],[-1,1660,"\r"],[-1,1664,"\r"],[-1,1674,"\r"],[-1,1697,"\r"],[-1,1708,"\r"],[-1,1762,"\r"],[-1,1766,"\r"],[-1,1776,"\r"],[-1,1800,"\r"],[-1,1846,"\r"],[-1,1857,"\r"],[-1,1874,"\r"],[-1,1938,"\r"],[-1,1942,"\r"],[-1,1952,"\r"],[-1,2021,"\r"],[-1,2032,"\r"],[-1,2049,"\r"],[-1,2121,"\r"],[-1,2293,""],[1,2330,"\n\n| A0 | B0 |\n|---|---|\n"]],[2266,2266],[2290,2290]]],[1519705446269,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2279,"|---|---|"]],[2279,2288],[2279,2279]]],[1519705447542,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2279,"|---|---|"]],[2279,2279],[2279,2288]]],[1519705454619,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2290,"\n"]],[2289,2289],[2289,2289]]],[1519705455435,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2289,"\n"]],[2289,2289],[2289,2289]]],[1519705459018,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2267,"| A0 | B0 |"]],[2267,2278],[2267,2267]]],[1519705459736,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2267,"| A0 | B0 |"]],[2267,2267],[2267,2278]]],[1519705467103,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2269,"A0 "],[1,2272,"lei"]],[2269,2272],[2272,2272]]],[1519705468054,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2269,"lei"]],[2272,2272],[2269,2269]]],[1519705470054,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2269,"类名"]],[2269,2269],[2271,2271]]],[1519705473997,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2273,"B0 "],[1,2276,"说明"]],[2273,2276],[2275,2275]]],[1519705492220,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,21746,"··"]],[160,160],[21746,21746]]],[1519705492220,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,21748,"··"]],[21746,21746],[160,160]]],[1519705486583,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2599,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  package com.example;        // PackageElement  \n\n3.  import java.util.List;  \n\n5.  public class Sample         // TypeElement  \n6.  <T extends List> {  // TypeParameterElement  \n\n8.  private int num;        // VariableElement  \n9.  String name;            // VariableElement  \n\n11.  public Sample() {}      // ExecuteableElement  \n\n13.  public void setName(    // ExecuteableElement  \n14.  String name     // VariableElement  \n15.  ) {}  \n16.  }  "],[1,3230,"···"]],[2599,3230],[2602,2602]]],[1519705487286,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2599,"···"]],[2602,2602],[2599,2599]]],[1519705488856,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2599,"```java"]],[2599,2599],[2606,2606]]],[1519705489108,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2608,"\n"]],[2606,2606],[2607,2607]]],[1519705489877,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2607,"```"]],[2607,2607],[2610,2610]]],[1519705490671,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2607,"\n"]],[2607,2607],[2608,2608]]],[1519705491644,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2607,"package com.example;        // PackageElement  \r\n  \r\nimport java.util.List;  \r\n  \r\npublic class Sample         // TypeElement  \r\n        <T extends List> {  // TypeParameterElement  \r\n  \r\n    private int num;        // VariableElement  \r\n    String name;            // VariableElement  \r\n  \r\n    public Sample() {}      // ExecuteableElement  \r\n  \r\n    public void setName(    // ExecuteableElement  \r\n            String name     // VariableElement  \r\n            ) {}  \r\n} "]],[2607,2607],[3081,3081]]],[1519705495147,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[-1,2654,"\r\n  \r"],[1,2659,"\n\n  \n"],[-1,2684,"\r\n  \r"],[1,2689,"\n\n  \n"],[-1,2734,"\r"],[1,2735,"\n"],[-1,2789,"\r\n  \r"],[1,2794,"\n\n  \n"],[-1,2843,"\r"],[1,2844,"\n"],[-1,2893,"\r\n  \r"],[1,2898,"\n\n  \n"],[-1,2950,"\r\n  \r"],[1,2955,"\n\n  \n"],[-1,3007,"\r"],[1,3008,"\n"],[-1,3057,"\r"],[1,3058,"\n"],[-1,3077,"\r"],[1,3078,"\n"],[-1,3085,"码\n"],[1,3087,"\n\n源码"],[-1,21601,"··"]],[160,160],[21601,21601]]],[1519705495147,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[1,2654,"\r\n  \r"],[-1,2654,"\n\n  \n"],[1,2684,"\r\n  \r"],[-1,2684,"\n\n  \n"],[1,2734,"\r"],[-1,2734,"\n"],[1,2789,"\r\n  \r"],[-1,2789,"\n\n  \n"],[1,2843,"\r"],[-1,2843,"\n"],[1,2893,"\r\n  \r"],[-1,2893,"\n\n  \n"],[1,2950,"\r\n  \r"],[-1,2950,"\n\n  \n"],[1,3007,"\r"],[-1,3007,"\n"],[1,3057,"\r"],[-1,3057,"\n"],[1,3077,"\r"],[-1,3077,"\n"],[1,3085,"码\n"],[-1,3085,"\n\n源码"],[1,21603,"··"]],[21601,21601],[160,160]]],[1519705494430,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2654,"\r"],[-1,2658,"\r"],[-1,2684,"\r"],[-1,2688,"\r"],[-1,2734,"\r"],[-1,2789,"\r"],[-1,2793,"\r"],[-1,2843,"\r"],[-1,2893,"\r"],[-1,2897,"\r"],[-1,2950,"\r"],[-1,2954,"\r"],[-1,3007,"\r"],[-1,3057,"\r"],[-1,3077,"\r"],[-1,3085,"\n"]],[3070,3070],[3070,3070]]],[1519705526903,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,21585,"··"]],[160,160],[21585,21585]]],[1519705526903,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,21587,"··"]],[21585,21585],[160,160]]],[1519705520564,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,3271,"\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public enum ElementKind {  \n\n3.  /** A package. */  \n4.  PACKAGE,  \n5.  /** An enum type. */  \n6.  ENUM,  \n7.  /** A class not described by a more specific kind (like {@code ENUM}). */  \n8.  CLASS,  \n9.  /** An annotation type. */  \n10.  ANNOTATION_TYPE,  \n11.  /** An interface not described by a more specific kind */  \n12.  INTERFACE,  \n\n14.  // Variables  \n15.  /** An enum constant. */  \n16.  ENUM_CONSTANT,  \n17.  /** A field not described by a more specific kind */  \n18.  FIELD,  \n19.  /** A parameter of a method or constructor. */  \n20.  PARAMETER,  \n21.  /** A local variable. */  \n22.  LOCAL_VARIABLE,  \n23.  /** A parameter of an exception handler. */  \n24.  EXCEPTION_PARAMETER,  \n\n26.  // Executables  \n27.  /** A method. */  \n28.  METHOD,  \n29.  /** A constructor. */  \n30.  CONSTRUCTOR,  \n31.  /** A static initializer. */  \n32.  STATIC_INIT,  \n33.  /** An instance initializer. */  \n34.  INSTANCE_INIT,  \n35.  /** A type parameter. */  \n36.  TYPE_PARAMETER,  \n\n38.  /** An implementation-reserved element. This is not the element you are looking for. */  \n39.  OTHER,  \n40.  /** \n41.  * A resource variable. \n42.  * @since 1.7 \n43.  */  \n44.  RESOURCE_VARIABLE;  \n45.  }  "],[1,4646,"``"]],[3271,4646],[3273,3273]]],[1519705521195,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,3272,"`"]],[3273,3273],[3272,3272]]],[1519705523210,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3272,"``java"]],[3272,3272],[3278,3278]]],[1519705523440,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3280,"\n"]],[3278,3278],[3279,3279]]],[1519705524205,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3279,"```"]],[3279,3279],[3282,3282]]],[1519705525406,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3279,"\n"]],[3279,3279],[3280,3280]]],[1519705526281,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3279,"public enum ElementKind {  \r\n  \r\n    /** A package. */  \r\n    PACKAGE,  \r\n    /** An enum type. */  \r\n    ENUM,  \r\n    /** A class not described by a more specific kind (like {@code ENUM}). */  \r\n    CLASS,  \r\n    /** An annotation type. */  \r\n    ANNOTATION_TYPE,  \r\n    /** An interface not described by a more specific kind */  \r\n    INTERFACE,  \r\n  \r\n    // Variables  \r\n    /** An enum constant. */  \r\n    ENUM_CONSTANT,  \r\n    /** A field not described by a more specific kind */  \r\n    FIELD,  \r\n    /** A parameter of a method or constructor. */  \r\n    PARAMETER,  \r\n    /** A local variable. */  \r\n    LOCAL_VARIABLE,  \r\n    /** A parameter of an exception handler. */  \r\n    EXCEPTION_PARAMETER,  \r\n  \r\n    // Executables  \r\n    /** A method. */  \r\n    METHOD,  \r\n    /** A constructor. */  \r\n    CONSTRUCTOR,  \r\n    /** A static initializer. */  \r\n    STATIC_INIT,  \r\n    /** An instance initializer. */  \r\n    INSTANCE_INIT,  \r\n    /** A type parameter. */  \r\n    TYPE_PARAMETER,  \r\n  \r\n    /** An implementation-reserved element. This is not the element you are looking for. */  \r\n    OTHER,  \r\n    /** \r\n     * A resource variable. \r\n     * @since 1.7 \r\n     */  \r\n    RESOURCE_VARIABLE;  \r\n}  "]],[3279,3279],[4487,4487]]],[1519705528892,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[-1,3306,"\r\n  \r"],[1,3311,"\n\n  \n"],[-1,3335,"\r"],[1,3336,"\n"],[-1,3351,"\r"],[1,3352,"\n"],[-1,3379,"\r"],[1,3380,"\n"],[-1,3392,"\r"],[1,3393,"\n"],[-1,3473,"\r"],[1,3474,"\n"],[-1,3487,"\r"],[1,3488,"\n"],[-1,3521,"\r"],[1,3522,"\n"],[-1,3545,"\r"],[1,3546,"\n"],[-1,3610,"\r"],[1,3611,"\n"],[-1,3628,"\r\n  \r"],[1,3633,"\n\n  \n"],[-1,3652,"\r"],[1,3653,"\n"],[-1,3684,"\r"],[1,3685,"\n"],[-1,3706,"\r"],[1,3707,"\n"],[-1,3766,"\r"],[1,3767,"\n"],[-1,3780,"\r"],[1,3781,"\n"],[-1,3834,"\r"],[1,3835,"\n"],[-1,3852,"\r"],[1,3853,"\n"],[-1,3884,"\r"],[1,3885,"\n"],[-1,3907,"\r"],[1,3908,"\n"],[-1,3958,"\r"],[1,3959,"\n"],[-1,3986,"\r\n  \r"],[1,3991,"\n\n  \n"],[-1,4012,"\r"],[1,4013,"\n"],[-1,4036,"\r"],[1,4037,"\n"],[-1,4051,"\r"],[1,4052,"\n"],[-1,4080,"\r"],[1,4081,"\n"],[-1,4100,"\r"],[1,4101,"\n"],[-1,4136,"\r"],[1,4137,"\n"],[-1,4156,"\r"],[1,4157,"\n"],[-1,4195,"\r"],[1,4196,"\n"],[-1,4217,"\r"],[1,4218,"\n"],[-1,4249,"\r"],[1,4250,"\n"],[-1,4272,"\r\n  \r"],[1,4277,"\n\n  \n"],[-1,4371,"\r"],[1,4372,"\n"],[-1,4385,"\r"],[1,4386,"\n"],[-1,4395,"\r"],[1,4396,"\n"],[-1,4425,"\r"],[1,4426,"\n"],[-1,4445,"\r"],[1,4446,"\n"],[-1,4456,"\r"],[1,4457,"\n"],[-1,4482,"\r"],[1,4483,"\n"],[-1,4491,"面\n"],[1,4493,"\n\n上面"],[-1,21430,"··"]],[160,160],[21430,21430]]],[1519705528892,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[1,3306,"\r\n  \r"],[-1,3306,"\n\n  \n"],[1,3335,"\r"],[-1,3335,"\n"],[1,3351,"\r"],[-1,3351,"\n"],[1,3379,"\r"],[-1,3379,"\n"],[1,3392,"\r"],[-1,3392,"\n"],[1,3473,"\r"],[-1,3473,"\n"],[1,3487,"\r"],[-1,3487,"\n"],[1,3521,"\r"],[-1,3521,"\n"],[1,3545,"\r"],[-1,3545,"\n"],[1,3610,"\r"],[-1,3610,"\n"],[1,3628,"\r\n  \r"],[-1,3628,"\n\n  \n"],[1,3652,"\r"],[-1,3652,"\n"],[1,3684,"\r"],[-1,3684,"\n"],[1,3706,"\r"],[-1,3706,"\n"],[1,3766,"\r"],[-1,3766,"\n"],[1,3780,"\r"],[-1,3780,"\n"],[1,3834,"\r"],[-1,3834,"\n"],[1,3852,"\r"],[-1,3852,"\n"],[1,3884,"\r"],[-1,3884,"\n"],[1,3907,"\r"],[-1,3907,"\n"],[1,3958,"\r"],[-1,3958,"\n"],[1,3986,"\r\n  \r"],[-1,3986,"\n\n  \n"],[1,4012,"\r"],[-1,4012,"\n"],[1,4036,"\r"],[-1,4036,"\n"],[1,4051,"\r"],[-1,4051,"\n"],[1,4080,"\r"],[-1,4080,"\n"],[1,4100,"\r"],[-1,4100,"\n"],[1,4136,"\r"],[-1,4136,"\n"],[1,4156,"\r"],[-1,4156,"\n"],[1,4195,"\r"],[-1,4195,"\n"],[1,4217,"\r"],[-1,4217,"\n"],[1,4249,"\r"],[-1,4249,"\n"],[1,4272,"\r\n  \r"],[-1,4272,"\n\n  \n"],[1,4371,"\r"],[-1,4371,"\n"],[1,4385,"\r"],[-1,4385,"\n"],[1,4395,"\r"],[-1,4395,"\n"],[1,4425,"\r"],[-1,4425,"\n"],[1,4445,"\r"],[-1,4445,"\n"],[1,4456,"\r"],[-1,4456,"\n"],[1,4482,"\r"],[-1,4482,"\n"],[1,4491,"面\n"],[-1,4491,"\n\n上面"],[1,21432,"··"]],[21430,21430],[160,160]]],[1519705528544,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,3306,"\r"],[-1,3310,"\r\n"],[-1,3335,"\r"],[-1,3351,"\r"],[-1,3379,"\r"],[-1,3392,"\r"],[-1,3473,"\r"],[-1,3487,"\r"],[-1,3521,"\r"],[-1,3545,"\r"],[-1,3610,"\r"],[-1,3628,"\r"],[-1,3632,"\r"],[-1,3652,"\r"],[-1,3684,"\r"],[-1,3706,"\r"],[-1,3766,"\r"],[-1,3780,"\r"],[-1,3834,"\r"],[-1,3852,"\r"],[-1,3884,"\r"],[-1,3907,"\r"],[-1,3958,"\r"],[-1,3986,"\r"],[-1,3990,"\r"],[-1,4012,"\r"],[-1,4036,"\r"],[-1,4051,"\r"],[-1,4080,"\r"],[-1,4100,"\r"],[-1,4136,"\r"],[-1,4156,"\r"],[-1,4195,"\r"],[-1,4217,"\r"],[-1,4249,"\r"],[-1,4272,"\r"],[-1,4276,"\r"],[-1,4371,"\r"],[-1,4385,"\r"],[-1,4395,"\r"],[-1,4425,"\r"],[-1,4445,"\r"],[-1,4456,"\r"],[-1,4482,"\r"]],[3309,3309],[3309,3309]]],[1519705531407,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[-1,4446,"面"],[1,4448,"\n上面"],[-1,21385,"··"]],[160,160],[21385,21385]]],[1519705531407,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[1,4446,"面"],[-1,4447,"\n上面"],[1,21387,"··"]],[21385,21385],[160,160]]],[1519705530627,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,3309,"  "]],[3309,3309],[3309,3309]]],[1519705536049,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[-1,4444,"面"],[1,4446,"\n上面"],[-1,21383,"··"]],[160,160],[21383,21383]]],[1519705536049,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[1,4444,"面"],[-1,4445,"\n上面"],[1,21385,"··"]],[21383,21383],[160,160]]],[1519705535706,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,4445,"\n"]],[4444,4444],[4444,4444]]],[1519705549593,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2320,""],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[-1,4441,""],[1,4444,"\n上"],[-1,21382,"··"]],[160,160],[21382,21382]]],[1519705549593,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2322,""],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[1,4441,""],[-1,4444,"\n上"],[1,21384,"··"]],[21382,21382],[160,160]]],[1519705545287,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,4716,"\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示 Java 编程语言中的类型 \n3.  */  \n4.  public interface TypeMirror {  \n5.  /** \n6.  * 返回此类型的种类，一个 TypeKind 枚举值： \n7.  */  \n8.  TypeKind getKind();  \n9.  }  "],[1,5059,"```java"]],[4716,5059],[4723,4723]]],[1519705545483,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,4725,"\n"]],[4723,4723],[4724,4724]]],[1519705546578,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,4724,"```"]],[4724,4724],[4727,4727]]],[1519705547723,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,4724,"\n"]],[4724,4724],[4725,4725]]],[1519705548654,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,4724,"/** \r\n * 表示 Java 编程语言中的类型 \r\n */  \r\npublic interface TypeMirror {  \r\n    /** \r\n     * 返回此类型的种类，一个 TypeKind 枚举值： \r\n     */  \r\n    TypeKind getKind();  \r\n}  "]],[4724,4724],[4878,4878]]],[1519705551675,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[-1,4728,"\r"],[1,4729,"\n"],[-1,4750,"\r"],[1,4751,"\n"],[-1,4757,"\r"],[1,4758,"\n"],[-1,4790,"\r"],[1,4791,"\n"],[-1,4800,"\r"],[1,4801,"\n"],[-1,4835,"\r"],[1,4836,"\n"],[-1,4846,"\r"],[1,4847,"\n"],[-1,4873,"\r"],[1,4874,"\n"],[-1,4882,"*\n"],[1,4884,"\n\n**"],[-1,21205,"··"]],[160,160],[21205,21205]]],[1519705551675,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[1,4728,"\r"],[-1,4728,"\n"],[1,4750,"\r"],[-1,4750,"\n"],[1,4757,"\r"],[-1,4757,"\n"],[1,4790,"\r"],[-1,4790,"\n"],[1,4800,"\r"],[-1,4800,"\n"],[1,4835,"\r"],[-1,4835,"\n"],[1,4846,"\r"],[-1,4846,"\n"],[1,4873,"\r"],[-1,4873,"\n"],[1,4882,"*\n"],[-1,4882,"\n\n**"],[1,21207,"··"]],[21205,21205],[160,160]]],[1519705551165,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,4728,"\r"],[-1,4750,"\r"],[-1,4757,"\r"],[-1,4790,"\r"],[-1,4800,"\r"],[-1,4835,"\r"],[-1,4846,"\r"],[-1,4873,"\r"],[-1,4882,"\n"]],[4875,4875],[4874,4874]]],[1519705568185,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,21196,"··"]],[160,160],[21196,21196]]],[1519705568185,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,21198,"··"]],[21196,21196],[160,160]]],[1519705563603,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,4945,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public enum TypeKind {  \n2.  /** The primitive type {@code boolean}. */  \n3.  BOOLEAN,  \n4.  /** The primitive type {@code byte}. */  \n5.  BYTE,  \n6.  /** The primitive type {@code short}. */  \n7.  SHORT,  \n8.  /** The primitive type {@code int}. */  \n9.  INT,  \n10.  /** The primitive type {@code long}. */  \n11.  LONG,  \n12.  /** The primitive type {@code char}. */  \n13.  CHAR,  \n14.  /** The primitive type {@code float}. */  \n15.  FLOAT,  \n16.  /** The primitive type {@code double}. */  \n17.  DOUBLE,  \n18.  /** The pseudo-type corresponding to the keyword {@code void}. */  \n19.  VOID,  \n20.  /** A pseudo-type used where no actual type is appropriate. */  \n21.  NONE,  \n22.  /** The null type. */  \n23.  NULL,  \n24.  /** An array type. */  \n25.  ARRAY,  \n26.  /** A class or interface type. */  \n27.  DECLARED,  \n28.  /** A class or interface type that could not be resolved. */  \n29.  ERROR,  \n30.  /** A type variable. */  \n31.  TYPEVAR,  \n32.  /** A wildcard type argument. */  \n33.  WILDCARD,  \n34.  /** A pseudo-type corresponding to a package element. */  \n35.  PACKAGE,  \n36.  /** A method, constructor, or initializer. */  \n37.  EXECUTABLE,  \n38.  /** An implementation-reserved type. This is not the type you are looking for. */  \n39.  OTHER,  \n40.  /** A union type. */  \n41.  UNION,  \n42.  /** An intersection type. */  \n43.  INTERSECTION;  \n44.  }  "],[1,6498,"```java"]],[4945,6498],[4952,4952]]],[1519705563992,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,4954,"\n"]],[4952,4952],[4953,4953]]],[1519705564810,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,4953,"```"]],[4953,4953],[4956,4956]]],[1519705566393,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,4953,"\n"]],[4953,4953],[4954,4954]]],[1519705567568,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,4953,"public enum TypeKind {  \r\n    /** The primitive type {@code boolean}. */  \r\n    BOOLEAN,  \r\n    /** The primitive type {@code byte}. */  \r\n    BYTE,  \r\n    /** The primitive type {@code short}. */  \r\n    SHORT,  \r\n    /** The primitive type {@code int}. */  \r\n    INT,  \r\n    /** The primitive type {@code long}. */  \r\n    LONG,  \r\n    /** The primitive type {@code char}. */  \r\n    CHAR,  \r\n    /** The primitive type {@code float}. */  \r\n    FLOAT,  \r\n    /** The primitive type {@code double}. */  \r\n    DOUBLE,  \r\n    /** The pseudo-type corresponding to the keyword {@code void}. */  \r\n    VOID,  \r\n    /** A pseudo-type used where no actual type is appropriate. */  \r\n    NONE,  \r\n    /** The null type. */  \r\n    NULL,  \r\n    /** An array type. */  \r\n    ARRAY,  \r\n    /** A class or interface type. */  \r\n    DECLARED,  \r\n    /** A class or interface type that could not be resolved. */  \r\n    ERROR,  \r\n    /** A type variable. */  \r\n    TYPEVAR,  \r\n    /** A wildcard type argument. */  \r\n    WILDCARD,  \r\n    /** A pseudo-type corresponding to a package element. */  \r\n    PACKAGE,  \r\n    /** A method, constructor, or initializer. */  \r\n    EXECUTABLE,  \r\n    /** An implementation-reserved type. This is not the type you are looking for. */  \r\n    OTHER,  \r\n    /** A union type. */  \r\n    UNION,  \r\n    /** An intersection type. */  \r\n    INTERSECTION;  \r\n}  "]],[4953,4953],[6326,6326]]],[1519705575364,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,4977,"\r"],[1,4978,"\n"],[-1,5027,"\r"],[1,5028,"\n"],[-1,5043,"\r"],[1,5044,"\n"],[-1,5090,"\r"],[1,5091,"\n"],[-1,5103,"\r"],[1,5104,"\n"],[-1,5151,"\r"],[1,5152,"\n"],[-1,5165,"\r"],[1,5166,"\n"],[-1,5211,"\r"],[1,5212,"\n"],[-1,5223,"\r"],[1,5224,"\n"],[-1,5270,"\r"],[1,5271,"\n"],[-1,5283,"\r"],[1,5284,"\n"],[-1,5330,"\r"],[1,5331,"\n"],[-1,5343,"\r"],[1,5344,"\n"],[-1,5391,"\r"],[1,5392,"\n"],[-1,5405,"\r"],[1,5406,"\n"],[-1,5454,"\r"],[1,5455,"\n"],[-1,5469,"\r"],[1,5470,"\n"],[-1,5542,"\r"],[1,5543,"\n"],[-1,5555,"\r"],[1,5556,"\n"],[-1,5625,"\r"],[1,5626,"\n"],[-1,5638,"\r"],[1,5639,"\n"],[-1,5667,"\r"],[1,5668,"\n"],[-1,5680,"\r"],[1,5681,"\n"],[-1,5709,"\r"],[1,5710,"\n"],[-1,5723,"\r"],[1,5724,"\n"],[-1,5764,"\r"],[1,5765,"\n"],[-1,5781,"\r"],[1,5782,"\n"],[-1,5849,"\r"],[1,5850,"\n"],[-1,5863,"\r"],[1,5864,"\n"],[-1,5894,"\r"],[1,5895,"\n"],[-1,5910,"\r"],[1,5911,"\n"],[-1,5950,"\r"],[1,5951,"\n"],[-1,5967,"\r"],[1,5968,"\n"],[-1,6031,"\r"],[1,6032,"\n"],[-1,6047,"\r"],[1,6048,"\n"],[-1,6100,"\r"],[1,6101,"\n"],[-1,6119,"\r"],[1,6120,"\n"],[-1,6208,"\r"],[1,6209,"\n"],[-1,6222,"\r"],[1,6223,"\n"],[-1,6250,"\r"],[1,6251,"\n"],[-1,6264,"\r"],[1,6265,"\n"],[-1,6300,"\r"],[1,6301,"\n"],[-1,6321,"\r"],[1,6322,"\n"],[-1,6330,"以\n"],[1,6332,"\n\n可以"],[-1,21028,"··"]],[160,160],[21028,21028]]],[1519705575364,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,4977,"\r"],[-1,4977,"\n"],[1,5027,"\r"],[-1,5027,"\n"],[1,5043,"\r"],[-1,5043,"\n"],[1,5090,"\r"],[-1,5090,"\n"],[1,5103,"\r"],[-1,5103,"\n"],[1,5151,"\r"],[-1,5151,"\n"],[1,5165,"\r"],[-1,5165,"\n"],[1,5211,"\r"],[-1,5211,"\n"],[1,5223,"\r"],[-1,5223,"\n"],[1,5270,"\r"],[-1,5270,"\n"],[1,5283,"\r"],[-1,5283,"\n"],[1,5330,"\r"],[-1,5330,"\n"],[1,5343,"\r"],[-1,5343,"\n"],[1,5391,"\r"],[-1,5391,"\n"],[1,5405,"\r"],[-1,5405,"\n"],[1,5454,"\r"],[-1,5454,"\n"],[1,5469,"\r"],[-1,5469,"\n"],[1,5542,"\r"],[-1,5542,"\n"],[1,5555,"\r"],[-1,5555,"\n"],[1,5625,"\r"],[-1,5625,"\n"],[1,5638,"\r"],[-1,5638,"\n"],[1,5667,"\r"],[-1,5667,"\n"],[1,5680,"\r"],[-1,5680,"\n"],[1,5709,"\r"],[-1,5709,"\n"],[1,5723,"\r"],[-1,5723,"\n"],[1,5764,"\r"],[-1,5764,"\n"],[1,5781,"\r"],[-1,5781,"\n"],[1,5849,"\r"],[-1,5849,"\n"],[1,5863,"\r"],[-1,5863,"\n"],[1,5894,"\r"],[-1,5894,"\n"],[1,5910,"\r"],[-1,5910,"\n"],[1,5950,"\r"],[-1,5950,"\n"],[1,5967,"\r"],[-1,5967,"\n"],[1,6031,"\r"],[-1,6031,"\n"],[1,6047,"\r"],[-1,6047,"\n"],[1,6100,"\r"],[-1,6100,"\n"],[1,6119,"\r"],[-1,6119,"\n"],[1,6208,"\r"],[-1,6208,"\n"],[1,6222,"\r"],[-1,6222,"\n"],[1,6250,"\r"],[-1,6250,"\n"],[1,6264,"\r"],[-1,6264,"\n"],[1,6300,"\r"],[-1,6300,"\n"],[1,6321,"\r"],[-1,6321,"\n"],[1,6330,"以\n"],[-1,6330,"\n\n可以"],[1,21030,"··"]],[21028,21028],[160,160]]],[1519705574915,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,4977,"\r"],[-1,5027,"\r"],[-1,5043,"\r"],[-1,5090,"\r"],[-1,5103,"\r"],[-1,5151,"\r"],[-1,5165,"\r"],[-1,5211,"\r"],[-1,5223,"\r"],[-1,5270,"\r"],[-1,5283,"\r"],[-1,5330,"\r"],[-1,5343,"\r"],[-1,5391,"\r"],[-1,5405,"\r"],[-1,5454,"\r"],[-1,5469,"\r"],[-1,5542,"\r"],[-1,5555,"\r"],[-1,5625,"\r"],[-1,5638,"\r"],[-1,5667,"\r"],[-1,5680,"\r"],[-1,5709,"\r"],[-1,5723,"\r"],[-1,5764,"\r"],[-1,5781,"\r"],[-1,5849,"\r"],[-1,5863,"\r"],[-1,5894,"\r"],[-1,5910,"\r"],[-1,5950,"\r"],[-1,5967,"\r"],[-1,6031,"\r"],[-1,6047,"\r"],[-1,6100,"\r"],[-1,6119,"\r"],[-1,6208,"\r"],[-1,6222,"\r"],[-1,6250,"\r"],[-1,6264,"\r"],[-1,6300,"\r"],[-1,6321,"\r"],[-1,6330,"\n"]],[6288,6288],[6287,6287]]],[1519705615715,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[1,6288,"可以"],[-1,20984,"··"]],[160,160],[20984,20984]]],[1519705615715,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[-1,6288,"可以"],[1,20986,"··"]],[20984,20984],[160,160]]],[1519705583596,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6486,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个类或接口程序元素 \n3.  */  \n4.  public interface TypeElement {  \n\n6.  /** \n7.  * 返回此类型元素的嵌套种类 \n8.  * 某一类型元素的嵌套种类 (nesting kind)。类型元素的种类有四种：top-level（顶层）、member（成员）、local（局部）和 anonymous（匿名） \n9.  */  \n10.  NestingKind getNestingKind();  \n\n12.  /** \n13.  * 返回此类型元素的完全限定名称。更准确地说，返回规范 名称。对于没有规范名称的局部类和匿名类，返回一个空名称. \n14.  * 一般类型的名称不包括对其形式类型参数的任何引用。例如，接口 java.util.Set<E> 的完全限定名称是 \"java.util.Set\" \n15.  */  \n16.  Name getQualifiedName();  \n\n18.  /** \n19.  * 返回此类型元素的直接超类。如果此类型元素表示一个接口或者类 java.lang.Object，则返回一个种类为 NONE 的 NoType \n20.  */  \n21.  TypeMirror getSuperclass();  \n\n23.  /** \n24.  * 返回直接由此类实现或直接由此接口扩展的接口类型 \n25.  */  \n26.  List<? extends TypeMirror> getInterfaces();  \n\n28.  /** \n29.  * 按照声明顺序返回此类型元素的形式类型参数 \n30.  */  \n31.  List<? extends TypeParameterElement> getTypeParameters();  \n32.  }  "]],[6486,7469],[6486,6486]]],[1519705584150,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6486,"\n"],[1,6487,"`"]],[6486,6486],[6487,6487]]],[1519705584357,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6487,"\n"],[1,6488,"`"]],[6487,6487],[6488,6488]]],[1519705585422,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6487,"\n"],[-1,6487,"`"]],[6488,6488],[6487,6487]]],[1519705585955,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6486,"\n"],[-1,6486,"`"]],[6487,6487],[6486,6486]]],[1519705587898,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6485,"\n"],[1,6486,"`"]],[6485,6485],[6486,6486]]],[1519705588093,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6486,"\n"],[1,6487,"`"]],[6486,6486],[6487,6487]]],[1519705588322,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6487,"\n"],[1,6488,"`"]],[6487,6487],[6488,6488]]],[1519705589295,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6487,"\n"],[-1,6487,"`"]],[6488,6488],[6487,6487]]],[1519705589644,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6486,"\n"],[-1,6486,"`"]],[6487,6487],[6486,6486]]],[1519705590270,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6485,"\n"],[-1,6485,"`"]],[6486,6486],[6485,6485]]],[1519705591743,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6485,"\n"],[1,6486,"`"]],[6485,6485],[6486,6486]]],[1519705591949,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6486,"\n"],[1,6487,"`"]],[6486,6486],[6487,6487]]],[1519705592192,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6487,"\n"],[1,6488,"`"]],[6487,6487],[6488,6488]]],[1519705593207,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6487,"\n"],[-1,6487,"`"]],[6488,6488],[6487,6487]]],[1519705593978,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6486,"\n"],[-1,6486,"`"]],[6487,6487],[6486,6486]]],[1519705594544,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6485,"\n"],[-1,6485,"`"]],[6486,6486],[6485,6485]]],[1519705594936,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6486,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个类或接口程序元素 \n3.  */  \n4.  public interface TypeElement {  \n\n6.  /** \n7.  * 返回此类型元素的嵌套种类 \n8.  * 某一类型元素的嵌套种类 (nesting kind)。类型元素的种类有四种：top-level（顶层）、member（成员）、local（局部）和 anonymous（匿名） \n9.  */  \n10.  NestingKind getNestingKind();  \n\n12.  /** \n13.  * 返回此类型元素的完全限定名称。更准确地说，返回规范 名称。对于没有规范名称的局部类和匿名类，返回一个空名称. \n14.  * 一般类型的名称不包括对其形式类型参数的任何引用。例如，接口 java.util.Set<E> 的完全限定名称是 \"java.util.Set\" \n15.  */  \n16.  Name getQualifiedName();  \n\n18.  /** \n19.  * 返回此类型元素的直接超类。如果此类型元素表示一个接口或者类 java.lang.Object，则返回一个种类为 NONE 的 NoType \n20.  */  \n21.  TypeMirror getSuperclass();  \n\n23.  /** \n24.  * 返回直接由此类实现或直接由此接口扩展的接口类型 \n25.  */  \n26.  List<? extends TypeMirror> getInterfaces();  \n\n28.  /** \n29.  * 按照声明顺序返回此类型元素的形式类型参数 \n30.  */  \n31.  List<? extends TypeParameterElement> getTypeParameters();  \n32.  }  "]],[6486,6486],[6486,7469]]],[1519705598310,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6486,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个类或接口程序元素 \n3.  */  \n4.  public interface TypeElement {  \n\n6.  /** \n7.  * 返回此类型元素的嵌套种类 \n8.  * 某一类型元素的嵌套种类 (nesting kind)。类型元素的种类有四种：top-level（顶层）、member（成员）、local（局部）和 anonymous（匿名） \n9.  */  \n10.  NestingKind getNestingKind();  \n\n12.  /** \n13.  * 返回此类型元素的完全限定名称。更准确地说，返回规范 名称。对于没有规范名称的局部类和匿名类，返回一个空名称. \n14.  * 一般类型的名称不包括对其形式类型参数的任何引用。例如，接口 java.util.Set<E> 的完全限定名称是 \"java.util.Set\" \n15.  */  \n16.  Name getQualifiedName();  \n\n18.  /** \n19.  * 返回此类型元素的直接超类。如果此类型元素表示一个接口或者类 java.lang.Object，则返回一个种类为 NONE 的 NoType \n20.  */  \n21.  TypeMirror getSuperclass();  \n\n23.  /** \n24.  * 返回直接由此类实现或直接由此接口扩展的接口类型 \n25.  */  \n26.  List<? extends TypeMirror> getInterfaces();  \n\n28.  /** \n29.  * 按照声明顺序返回此类型元素的形式类型参数 \n30.  */  \n31.  List<? extends TypeParameterElement> getTypeParameters();  \n32.  }"]],[6486,7467],[6486,6486]]],[1519705599589,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6486," "],[1,6487,"·"]],[6486,6486],[6487,6487]]],[1519705599796,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6487," "],[1,6488,"·"]],[6487,6487],[6488,6488]]],[1519705600019,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6488,"\n"],[1,6489,"·"]],[6488,6488],[6489,6489]]],[1519705600783,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6486,"···"]],[6489,6489],[6486,6486]]],[1519705601919,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6486,"\n"],[1,6487,"```"]],[6486,6486],[6489,6489]]],[1519705602734,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6489,"\n"]],[6489,6489],[6490,6490]]],[1519705604922,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6490,"\n"]],[6489,6489],[6490,6490]]],[1519705606405,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6490,"\n"],[1,6491,"```"]],[6490,6490],[6493,6493]]],[1519705606699,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6493,"\n"]],[6493,6493],[6494,6494]]],[1519705607402,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6494,"\n"]],[6494,6494],[6495,6495]]],[1519705613192,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6489,"java"]],[6489,6489],[6493,6493]]],[1519705614009,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6494,"\n"]],[6493,6493],[6494,6494]]],[1519705615077,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6494,"/** \r\n * 表示一个类或接口程序元素 \r\n */  \r\npublic interface TypeElement {  \r\n  \r\n    /** \r\n     * 返回此类型元素的嵌套种类 \r\n     * 某一类型元素的嵌套种类 (nesting kind)。类型元素的种类有四种：top-level（顶层）、member（成员）、local（局部）和 anonymous（匿名） \r\n     */  \r\n    NestingKind getNestingKind();  \r\n  \r\n    /** \r\n     * 返回此类型元素的完全限定名称。更准确地说，返回规范 名称。对于没有规范名称的局部类和匿名类，返回一个空名称. \r\n     * 一般类型的名称不包括对其形式类型参数的任何引用。例如，接口 java.util.Set<E> 的完全限定名称是 \"java.util.Set\" \r\n     */  \r\n    Name getQualifiedName();  \r\n  \r\n    /** \r\n     * 返回此类型元素的直接超类。如果此类型元素表示一个接口或者类 java.lang.Object，则返回一个种类为 NONE 的 NoType \r\n     */  \r\n    TypeMirror getSuperclass();  \r\n  \r\n    /** \r\n     * 返回直接由此类实现或直接由此接口扩展的接口类型 \r\n     */  \r\n    List<? extends TypeMirror> getInterfaces();  \r\n  \r\n    /** \r\n     * 按照声明顺序返回此类型元素的形式类型参数 \r\n     */  \r\n    List<? extends TypeParameterElement> getTypeParameters();  \r\n}  "]],[6494,6494],[7313,7313]]],[1519705666655,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[-1,6498,"\r"],[1,6499,"\n"],[-1,6516,"\r"],[1,6517,"\n"],[-1,6523,"\r"],[1,6524,"\n"],[-1,6557,"\r\n  \r"],[1,6562,"\n\n  \n"],[-1,6571,"\r"],[1,6572,"\n"],[-1,6593,"\r"],[1,6594,"\n"],[-1,6690,"\r"],[1,6691,"\n"],[-1,6701,"\r"],[1,6702,"\n"],[-1,6738,"\r\n  \r"],[1,6743,"\n\n  \n"],[-1,6752,"\r"],[1,6753,"\n"],[-1,6816,"\r"],[1,6817,"\n"],[-1,6897,"\r"],[1,6898,"\n"],[-1,6908,"\r"],[1,6909,"\n"],[-1,6940,"\r\n  \r"],[1,6945,"\n\n  \n"],[-1,6954,"\r"],[1,6955,"\n"],[-1,7033,"\r"],[1,7034,"\n"],[-1,7044,"\r"],[1,7045,"\n"],[-1,7079,"\r\n  \r"],[1,7084,"\n\n  \n"],[-1,7093,"\r"],[1,7094,"\n"],[-1,7126,"\r"],[1,7127,"\n"],[-1,7137,"\r"],[1,7138,"\n"],[-1,7188,"\r\n  \r"],[1,7193,"\n\n  \n"],[-1,7202,"\r"],[1,7203,"\n"],[-1,7232,"\r"],[1,7233,"\n"],[-1,7243,"\r"],[1,7244,"\n"],[-1,7308,"\r"],[1,7309,"\n"],[1,7319,"**"],[-1,20832,"··"]],[160,160],[20832,20832]]],[1519705666655,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[1,6498,"\r"],[-1,6498,"\n"],[1,6516,"\r"],[-1,6516,"\n"],[1,6523,"\r"],[-1,6523,"\n"],[1,6557,"\r\n  \r"],[-1,6557,"\n\n  \n"],[1,6571,"\r"],[-1,6571,"\n"],[1,6593,"\r"],[-1,6593,"\n"],[1,6690,"\r"],[-1,6690,"\n"],[1,6701,"\r"],[-1,6701,"\n"],[1,6738,"\r\n  \r"],[-1,6738,"\n\n  \n"],[1,6752,"\r"],[-1,6752,"\n"],[1,6816,"\r"],[-1,6816,"\n"],[1,6897,"\r"],[-1,6897,"\n"],[1,6908,"\r"],[-1,6908,"\n"],[1,6940,"\r\n  \r"],[-1,6940,"\n\n  \n"],[1,6954,"\r"],[-1,6954,"\n"],[1,7033,"\r"],[-1,7033,"\n"],[1,7044,"\r"],[-1,7044,"\n"],[1,7079,"\r\n  \r"],[-1,7079,"\n\n  \n"],[1,7093,"\r"],[-1,7093,"\n"],[1,7126,"\r"],[-1,7126,"\n"],[1,7137,"\r"],[-1,7137,"\n"],[1,7188,"\r\n  \r"],[-1,7188,"\n\n  \n"],[1,7202,"\r"],[-1,7202,"\n"],[1,7232,"\r"],[-1,7232,"\n"],[1,7243,"\r"],[-1,7243,"\n"],[1,7308,"\r"],[-1,7308,"\n"],[-1,7319,"**"],[1,20834,"··"]],[20832,20832],[160,160]]],[1519705626021,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6494,"/** \r\n * 表示一个类或接口程序元素 \r\n */  \r\npublic interface TypeElement {  \r\n  \r\n    /** \r\n     * 返回此类型元素的嵌套种类 \r\n     * 某一类型元素的嵌套种类 (nesting kind)。类型元素的种类有四种：top-level（顶层）、member（成员）、local（局部）和 anonymous（匿名） \r\n     */  \r\n    NestingKind getNestingKind();  \r\n  \r\n    /** \r\n     * 返回此类型元素的完全限定名称。更准确地说，返回规范 名称。对于没有规范名称的局部类和匿名类，返回一个空名称. \r\n     * 一般类型的名称不包括对其形式类型参数的任何引用。例如，接口 java.util.Set<E> 的完全限定名称是 \"java.util.Set\" \r\n     */  \r\n    Name getQualifiedName();  \r\n  \r\n    /** \r\n     * 返回此类型元素的直接超类。如果此类型元素表示一个接口或者类 java.lang.Object，则返回一个种类为 NONE 的 NoType \r\n     */  \r\n    TypeMirror getSuperclass();  \r\n  \r\n    /** \r\n     * 返回直接由此类实现或直接由此接口扩展的接口类型 \r\n     */  \r\n    List<? extends TypeMirror> getInterfaces();  \r\n  \r\n    /** \r\n     * 按照声明顺序返回此类型元素的形式类型参数 \r\n     */  \r\n    List<? extends TypeParameterElement> getTypeParameters();  \r\n}  "]],[7313,7313],[6494,6494]]],[1519705626299,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6494,"\n"]],[6494,6494],[6493,6493]]],[1519705628222,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6489,"java"]],[6493,6493],[6489,6489]]],[1519705628898,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6494,"\n"]],[6495,6495],[6494,6494]]],[1519705629092,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6493,"\n"]],[6494,6494],[6493,6493]]],[1519705629279,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6490,"\n"],[-1,6490,"```"]],[6493,6493],[6490,6490]]],[1519705629729,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6490,"\n"]],[6490,6490],[6489,6489]]],[1519705630008,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6489,"\n"]],[6490,6490],[6489,6489]]],[1519705630302,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6486,"\n"],[-1,6486,"```"]],[6489,6489],[6486,6486]]],[1519705630626,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6486,"···"]],[6486,6486],[6489,6489]]],[1519705631268,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6488,"\n"],[-1,6488,"·"]],[6489,6489],[6488,6488]]],[1519705631680,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6487," "],[-1,6487,"·"]],[6488,6488],[6487,6487]]],[1519705632419,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6486," "],[-1,6486,"·"]],[6487,6487],[6486,6486]]],[1519705634319,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6487," "]],[6488,6488],[6487,6487]]],[1519705635291,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6487,"\n"],[1,6488,"`"]],[6487,6487],[6488,6488]]],[1519705635673,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6488,"\n"],[1,6489,"``"]],[6488,6488],[6490,6490]]],[1519705637012,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6488,"\n"],[-1,6488,"``"]],[6490,6490],[6488,6488]]],[1519705637320,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6487,"\n"],[-1,6487,"`"]],[6488,6488],[6487,6487]]],[1519705641332,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6485,"```java"]],[6485,6485],[6492,6492]]],[1519705641556,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6493,"\n"]],[6492,6492],[6493,6493]]],[1519705642529,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6493,"```"]],[6493,6493],[6496,6496]]],[1519705643483,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6496,"\n"]],[6496,6496],[6496,6496]]],[1519705644830,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6493,"\n"]],[6493,6493],[6494,6494]]],[1519705646127,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6493,"\n"]],[6494,6494],[6493,6493]]],[1519705646973,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6485,"\n"]],[6485,6485],[6486,6486]]],[1519705648361,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6494,"\n"]],[6494,6494],[6495,6495]]],[1519705649310,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6494,"\n"]],[6495,6495],[6494,6494]]],[1519705649623,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6493,"\n"]],[6494,6494],[6493,6493]]],[1519705650127,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6493,"\n"]],[6493,6493],[6494,6494]]],[1519705651127,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6493,"\n"]],[6494,6494],[6493,6493]]],[1519705651507,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6493,"\n"]],[6493,6493],[6494,6494]]],[1519705651760,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6494,"\n"]],[6494,6494],[6495,6495]]],[1519705652126,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6494,"\n"]],[6495,6495],[6494,6494]]],[1519705652346,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6485,"\n"]],[6486,6486],[6485,6485]]],[1519705652591,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6496,"\n"]],[6496,6496],[6496,6496]]],[1519705653018,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6493,"```"]],[6496,6496],[6493,6493]]],[1519705653454,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6493,"\n"]],[6493,6493],[6492,6492]]],[1519705653815,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6485,"```java"]],[6492,6492],[6485,6485]]],[1519705656046,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6486," "]],[6487,6487],[6486,6486]]],[1519705656480,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6487,"\n"]],[6486,6486],[6485,6485]]],[1519705657229,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6487,"\n"]],[6485,6485],[6486,6486]]],[1519705661617,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6486,"```java"]],[6486,6486],[6493,6493]]],[1519705661842,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6495,"\n"]],[6493,6493],[6494,6494]]],[1519705663199,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6494,"```"]],[6494,6494],[6497,6497]]],[1519705664754,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6494,"\n"]],[6494,6494],[6495,6495]]],[1519705665873,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6494,"/** \r\n * 表示一个包程序元素. \r\n */  \r\npublic interface PackageElement {  \r\n  \r\n    /** \r\n     * 返回此包的完全限定名称。该名称也是包的规范名称 \r\n     */  \r\n    Name getQualifiedName();  \r\n  \r\n    /** \r\n     * 如果此包是一个未命名的包，则返回 true，否则返回 false \r\n     */  \r\n    boolean isUnnamed();  \r\n}  "]],[6494,6494],[6748,6748]]],[1519705674775,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[-1,6498,"\r"],[1,6499,"\n"],[-1,6514,"\r"],[1,6515,"\n"],[-1,6521,"\r"],[1,6522,"\n"],[-1,6558,"\r\n  \r"],[1,6563,"\n\n  \n"],[-1,6572,"\r"],[1,6573,"\n"],[-1,6605,"\r"],[1,6606,"\n"],[-1,6616,"\r"],[1,6617,"\n"],[-1,6648,"\r\n  \r"],[1,6653,"\n\n  \n"],[-1,6662,"\r"],[1,6663,"\n"],[-1,6704,"\r"],[1,6705,"\n"],[-1,6715,"\r"],[1,6716,"\n"],[-1,6743,"\r"],[1,6744,"\n"],[1,6754,"**"],[-1,20267,"··"]],[160,160],[20267,20267]]],[1519705674775,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[1,6498,"\r"],[-1,6498,"\n"],[1,6514,"\r"],[-1,6514,"\n"],[1,6521,"\r"],[-1,6521,"\n"],[1,6558,"\r\n  \r"],[-1,6558,"\n\n  \n"],[1,6572,"\r"],[-1,6572,"\n"],[1,6605,"\r"],[-1,6605,"\n"],[1,6616,"\r"],[-1,6616,"\n"],[1,6648,"\r\n  \r"],[-1,6648,"\n\n  \n"],[1,6662,"\r"],[-1,6662,"\n"],[1,6704,"\r"],[-1,6704,"\n"],[1,6715,"\r"],[-1,6715,"\n"],[1,6743,"\r"],[-1,6743,"\n"],[-1,6754,"**"],[1,20269,"··"]],[20267,20267],[160,160]]],[1519705673520,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6494,"/** \r\n * 表示一个包程序元素. \r\n */  \r\npublic interface PackageElement {  \r\n  \r\n    /** \r\n     * 返回此包的完全限定名称。该名称也是包的规范名称 \r\n     */  \r\n    Name getQualifiedName();  \r\n  \r\n    /** \r\n     * 如果此包是一个未命名的包，则返回 true，否则返回 false \r\n     */  \r\n    boolean isUnnamed();  \r\n}  "]],[6748,6748],[6494,6494]]],[1519705674292,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,6494,"/** \r\n * 表示一个类或接口程序元素 \r\n */  \r\npublic interface TypeElement {  \r\n  \r\n    /** \r\n     * 返回此类型元素的嵌套种类 \r\n     * 某一类型元素的嵌套种类 (nesting kind)。类型元素的种类有四种：top-level（顶层）、member（成员）、local（局部）和 anonymous（匿名） \r\n     */  \r\n    NestingKind getNestingKind();  \r\n  \r\n    /** \r\n     * 返回此类型元素的完全限定名称。更准确地说，返回规范 名称。对于没有规范名称的局部类和匿名类，返回一个空名称. \r\n     * 一般类型的名称不包括对其形式类型参数的任何引用。例如，接口 java.util.Set<E> 的完全限定名称是 \"java.util.Set\" \r\n     */  \r\n    Name getQualifiedName();  \r\n  \r\n    /** \r\n     * 返回此类型元素的直接超类。如果此类型元素表示一个接口或者类 java.lang.Object，则返回一个种类为 NONE 的 NoType \r\n     */  \r\n    TypeMirror getSuperclass();  \r\n  \r\n    /** \r\n     * 返回直接由此类实现或直接由此接口扩展的接口类型 \r\n     */  \r\n    List<? extends TypeMirror> getInterfaces();  \r\n  \r\n    /** \r\n     * 按照声明顺序返回此类型元素的形式类型参数 \r\n     */  \r\n    List<? extends TypeParameterElement> getTypeParameters();  \r\n}  "]],[6494,6494],[7313,7313]]],[1519705676899,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[-1,6498,"\r"],[1,6499,"\n"],[-1,6516,"\r"],[1,6517,"\n"],[-1,6523,"\r"],[1,6524,"\n"],[-1,6557,"\r\n  \r"],[1,6562,"\n\n  \n"],[-1,6571,"\r"],[1,6572,"\n"],[-1,6593,"\r"],[1,6594,"\n"],[-1,6690,"\r"],[1,6691,"\n"],[-1,6701,"\r"],[1,6702,"\n"],[-1,6738,"\r\n  \r"],[1,6743,"\n\n  \n"],[-1,6752,"\r"],[1,6753,"\n"],[-1,6816,"\r"],[1,6817,"\n"],[-1,6897,"\r"],[1,6898,"\n"],[-1,6908,"\r"],[1,6909,"\n"],[-1,6940,"\r\n  \r"],[1,6945,"\n\n  \n"],[-1,6954,"\r"],[1,6955,"\n"],[-1,7033,"\r"],[1,7034,"\n"],[-1,7044,"\r"],[1,7045,"\n"],[-1,7079,"\r\n  \r"],[1,7084,"\n\n  \n"],[-1,7093,"\r"],[1,7094,"\n"],[-1,7126,"\r"],[1,7127,"\n"],[-1,7137,"\r"],[1,7138,"\n"],[-1,7188,"\r\n  \r"],[1,7193,"\n\n  \n"],[-1,7202,"\r"],[1,7203,"\n"],[-1,7232,"\r"],[1,7233,"\n"],[-1,7243,"\r"],[1,7244,"\n"],[-1,7308,"\r"],[1,7309,"\n"],[1,7319,"**"],[-1,20832,"··"]],[160,160],[20832,20832]]],[1519705676899,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[1,6498,"\r"],[-1,6498,"\n"],[1,6516,"\r"],[-1,6516,"\n"],[1,6523,"\r"],[-1,6523,"\n"],[1,6557,"\r\n  \r"],[-1,6557,"\n\n  \n"],[1,6571,"\r"],[-1,6571,"\n"],[1,6593,"\r"],[-1,6593,"\n"],[1,6690,"\r"],[-1,6690,"\n"],[1,6701,"\r"],[-1,6701,"\n"],[1,6738,"\r\n  \r"],[-1,6738,"\n\n  \n"],[1,6752,"\r"],[-1,6752,"\n"],[1,6816,"\r"],[-1,6816,"\n"],[1,6897,"\r"],[-1,6897,"\n"],[1,6908,"\r"],[-1,6908,"\n"],[1,6940,"\r\n  \r"],[-1,6940,"\n\n  \n"],[1,6954,"\r"],[-1,6954,"\n"],[1,7033,"\r"],[-1,7033,"\n"],[1,7044,"\r"],[-1,7044,"\n"],[1,7079,"\r\n  \r"],[-1,7079,"\n\n  \n"],[1,7093,"\r"],[-1,7093,"\n"],[1,7126,"\r"],[-1,7126,"\n"],[1,7137,"\r"],[-1,7137,"\n"],[1,7188,"\r\n  \r"],[-1,7188,"\n\n  \n"],[1,7202,"\r"],[-1,7202,"\n"],[1,7232,"\r"],[-1,7232,"\n"],[1,7243,"\r"],[-1,7243,"\n"],[1,7308,"\r"],[-1,7308,"\n"],[-1,7319,"**"],[1,20834,"··"]],[20832,20832],[160,160]]],[1519705676618,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,6498,"\r"],[-1,6516,"\r"],[-1,6523,"\r"],[-1,6557,"\r"],[-1,6561,"\r"],[-1,6571,"\r"],[-1,6593,"\r"],[-1,6690,"\r"],[-1,6701,"\r"],[-1,6738,"\r"],[-1,6742,"\r"],[-1,6752,"\r"],[-1,6816,"\r"],[-1,6897,"\r"],[-1,6908,"\r"],[-1,6940,"\r"],[-1,6944,"\r"],[-1,6954,"\r"],[-1,7033,"\r"],[-1,7044,"\r"],[-1,7079,"\r"],[-1,7083,"\r"],[-1,7093,"\r"],[-1,7126,"\r"],[-1,7137,"\r"],[-1,7188,"\r"],[-1,7192,"\r"],[-1,7202,"\r"],[-1,7232,"\r"],[-1,7243,"\r"],[-1,7308,"\r"],[-1,7317,"\n"]],[7287,7287],[7286,7286]]],[1519705690471,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,20800,"··"]],[160,160],[20800,20800]]],[1519705690471,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,20802,"··"]],[20800,20800],[160,160]]],[1519705684765,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,7306,"\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个包程序元素. \n3.  */  \n4.  public interface PackageElement {  \n\n6.  /** \n7.  * 返回此包的完全限定名称。该名称也是包的规范名称 \n8.  */  \n9.  Name getQualifiedName();  \n\n11.  /** \n12.  * 如果此包是一个未命名的包，则返回 true，否则返回 false \n13.  */  \n14.  boolean isUnnamed();  \n15.  }  "],[1,7742,"···"]],[7306,7742],[7309,7309]]],[1519705685525,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,7306,"···"]],[7309,7309],[7306,7306]]],[1519705687265,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7306,"```java"]],[7306,7306],[7313,7313]]],[1519705687428,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7315,"\n"]],[7313,7313],[7314,7314]]],[1519705688124,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7314,"```"]],[7314,7314],[7317,7317]]],[1519705689124,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7314,"\n"]],[7314,7314],[7315,7315]]],[1519705689948,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7314,"/** \r\n * 表示一个包程序元素. \r\n */  \r\npublic interface PackageElement {  \r\n  \r\n    /** \r\n     * 返回此包的完全限定名称。该名称也是包的规范名称 \r\n     */  \r\n    Name getQualifiedName();  \r\n  \r\n    /** \r\n     * 如果此包是一个未命名的包，则返回 true，否则返回 false \r\n     */  \r\n    boolean isUnnamed();  \r\n}  "]],[7314,7314],[7568,7568]]],[1519705697283,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[-1,7318,"\r"],[1,7319,"\n"],[-1,7334,"\r"],[1,7335,"\n"],[-1,7341,"\r"],[1,7342,"\n"],[-1,7378,"\r\n  \r"],[1,7383,"\n\n  \n"],[-1,7392,"\r"],[1,7393,"\n"],[-1,7425,"\r"],[1,7426,"\n"],[-1,7436,"\r"],[1,7437,"\n"],[-1,7468,"\r\n  \r"],[1,7473,"\n\n  \n"],[-1,7482,"\r"],[1,7483,"\n"],[-1,7524,"\r"],[1,7525,"\n"],[-1,7535,"\r"],[1,7536,"\n"],[-1,7563,"\r"],[1,7564,"\n"],[-1,7572,"*\n"],[1,7574,"\n\n**"],[-1,20630,"··"]],[160,160],[20630,20630]]],[1519705697283,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[1,7318,"\r"],[-1,7318,"\n"],[1,7334,"\r"],[-1,7334,"\n"],[1,7341,"\r"],[-1,7341,"\n"],[1,7378,"\r\n  \r"],[-1,7378,"\n\n  \n"],[1,7392,"\r"],[-1,7392,"\n"],[1,7425,"\r"],[-1,7425,"\n"],[1,7436,"\r"],[-1,7436,"\n"],[1,7468,"\r\n  \r"],[-1,7468,"\n\n  \n"],[1,7482,"\r"],[-1,7482,"\n"],[1,7524,"\r"],[-1,7524,"\n"],[1,7535,"\r"],[-1,7535,"\n"],[1,7563,"\r"],[-1,7563,"\n"],[1,7572,"*\n"],[-1,7572,"\n\n**"],[1,20632,"··"]],[20630,20630],[160,160]]],[1519705696843,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,7318,"\r"],[-1,7334,"\r"],[-1,7341,"\r"],[-1,7378,"\r"],[-1,7382,"\r"],[-1,7392,"\r"],[-1,7425,"\r"],[-1,7436,"\r"],[-1,7468,"\r"],[-1,7472,"\r"],[-1,7482,"\r"],[-1,7524,"\r"],[-1,7535,"\r"],[-1,7563,"\r"],[-1,7572,"\n"]],[7559,7559],[7558,7558]]],[1519705706549,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,20615,"··"]],[160,160],[20615,20615]]],[1519705706549,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,20617,"··"]],[20615,20615],[160,160]]],[1519705700595,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,7582,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注解类型元素 \n3.  */  \n4.  public interface ExecutableElement {  \n\n6.  /** \n7.  * 获取按照声明顺序返回形式类型参数元素 \n8.  */  \n9.  List<? extends TypeParameterElement> getTypeParameters();  \n\n11.  /** \n12.  * 获取返回的类型元素 \n13.  */  \n14.  TypeMirror getReturnType();  \n\n16.  /** \n17.  * 获取形参元素 \n18.  */  \n19.  List<? extends VariableElement> getParameters();  \n\n21.  /** \n22.  * 如果此方法或构造方法接受可变数量的参数，则返回 true，否则返回 false \n23.  */  \n24.  boolean isVarArgs();  \n\n26.  /** \n27.  * 按声明顺序返回此方法或构造方法的 throws 子句中所列出的异常和其他 throwable \n28.  */  \n29.  List<? extends TypeMirror> getThrownTypes();  \n\n31.  /** \n32.  * 如果此 executable 是一个注解类型元素，则返回默认值。如果此方法不是注解类型元素，或者它是一个没有默认值的注解类型元素，则返回 null \n33.  */  \n34.  AnnotationValue getDefaultValue();  \n35.  }  "],[1,8522,"···"]],[7582,8522],[7585,7585]]],[1519705701521,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,7582,"···"]],[7585,7585],[7582,7582]]],[1519705703319,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7582,"```java"]],[7582,7582],[7589,7589]]],[1519705703478,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7591,"\n"]],[7589,7589],[7590,7590]]],[1519705704154,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7590,"```"]],[7590,7590],[7593,7593]]],[1519705705205,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7590,"\n"]],[7590,7590],[7591,7591]]],[1519705706071,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,7590,"/** \r\n * 表示某个类或接口的方法、构造方法或初始化程序（静态或实例），包括注解类型元素 \r\n */  \r\npublic interface ExecutableElement {  \r\n  \r\n    /** \r\n     * 获取按照声明顺序返回形式类型参数元素 \r\n     */  \r\n    List<? extends TypeParameterElement> getTypeParameters();  \r\n  \r\n    /** \r\n     * 获取返回的类型元素 \r\n     */  \r\n    TypeMirror getReturnType();  \r\n  \r\n    /** \r\n     * 获取形参元素 \r\n     */  \r\n    List<? extends VariableElement> getParameters();  \r\n  \r\n    /** \r\n     * 如果此方法或构造方法接受可变数量的参数，则返回 true，否则返回 false \r\n     */  \r\n    boolean isVarArgs();  \r\n  \r\n    /** \r\n     * 按声明顺序返回此方法或构造方法的 throws 子句中所列出的异常和其他 throwable \r\n     */  \r\n    List<? extends TypeMirror> getThrownTypes();  \r\n  \r\n    /** \r\n     * 如果此 executable 是一个注解类型元素，则返回默认值。如果此方法不是注解类型元素，或者它是一个没有默认值的注解类型元素，则返回 null \r\n     */  \r\n    AnnotationValue getDefaultValue();  \r\n}  "]],[7590,7590],[8369,8369]]],[1519707266588,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,7580,"**"],[-1,7589,"*"],[1,7590,"\n"],[-1,7594,"\r"],[1,7595,"\n"],[-1,7638,"\r"],[1,7639,"\n"],[-1,7645,"\r"],[1,7646,"\n"],[-1,7685,"\r\n  \r"],[1,7690,"\n\n  \n"],[-1,7699,"\r"],[1,7700,"\n"],[-1,7727,"\r"],[1,7728,"\n"],[-1,7738,"\r"],[1,7739,"\n"],[-1,7803,"\r\n  \r"],[1,7808,"\n\n  \n"],[-1,7817,"\r"],[1,7818,"\n"],[-1,7836,"\r"],[1,7837,"\n"],[-1,7847,"\r"],[1,7848,"\n"],[-1,7882,"\r\n  \r"],[1,7887,"\n\n  \n"],[-1,7896,"\r"],[1,7897,"\n"],[-1,7912,"\r"],[1,7913,"\n"],[-1,7923,"\r"],[1,7924,"\n"],[-1,7979,"\r\n  \r"],[1,7984,"\n\n  \n"],[-1,7993,"\r"],[1,7994,"\n"],[-1,8042,"\r"],[1,8043,"\n"],[-1,8053,"\r"],[1,8054,"\n"],[-1,8081,"\r\n  \r"],[1,8086,"\n\n  \n"],[-1,8095,"\r"],[1,8096,"\n"],[-1,8151,"\r"],[1,8152,"\n"],[-1,8162,"\r"],[1,8163,"\n"],[-1,8214,"\r\n  \r"],[1,8219,"\n\n  \n"],[-1,8228,"\r"],[1,8229,"\n"],[-1,8311,"\r"],[1,8312,"\n"],[-1,8322,"\r"],[1,8323,"\n"],[-1,8364,"\r"],[1,8365,"\n"],[-1,8373,"*\n"],[1,8375,"\n\n**"],[-1,20466,"··"]],[160,160],[20466,20466]]],[1519707266589,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,7582,"**"],[1,7589,"*"],[-1,7589,"\n"],[1,7594,"\r"],[-1,7594,"\n"],[1,7638,"\r"],[-1,7638,"\n"],[1,7645,"\r"],[-1,7645,"\n"],[1,7685,"\r\n  \r"],[-1,7685,"\n\n  \n"],[1,7699,"\r"],[-1,7699,"\n"],[1,7727,"\r"],[-1,7727,"\n"],[1,7738,"\r"],[-1,7738,"\n"],[1,7803,"\r\n  \r"],[-1,7803,"\n\n  \n"],[1,7817,"\r"],[-1,7817,"\n"],[1,7836,"\r"],[-1,7836,"\n"],[1,7847,"\r"],[-1,7847,"\n"],[1,7882,"\r\n  \r"],[-1,7882,"\n\n  \n"],[1,7896,"\r"],[-1,7896,"\n"],[1,7912,"\r"],[-1,7912,"\n"],[1,7923,"\r"],[-1,7923,"\n"],[1,7979,"\r\n  \r"],[-1,7979,"\n\n  \n"],[1,7993,"\r"],[-1,7993,"\n"],[1,8042,"\r"],[-1,8042,"\n"],[1,8053,"\r"],[-1,8053,"\n"],[1,8081,"\r\n  \r"],[-1,8081,"\n\n  \n"],[1,8095,"\r"],[-1,8095,"\n"],[1,8151,"\r"],[-1,8151,"\n"],[1,8162,"\r"],[-1,8162,"\n"],[1,8214,"\r\n  \r"],[-1,8214,"\n\n  \n"],[1,8228,"\r"],[-1,8228,"\n"],[1,8311,"\r"],[-1,8311,"\n"],[1,8322,"\r"],[-1,8322,"\n"],[1,8364,"\r"],[-1,8364,"\n"],[1,8373,"*\n"],[-1,8373,"\n\n**"],[1,20468,"··"]],[20466,20466],[160,160]]],[1519707250353,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,7594,"\r"],[-1,7638,"\r"],[-1,7645,"\r"],[-1,7685,"\r"],[-1,7689,"\r"],[-1,7699,"\r"],[-1,7727,"\r"],[-1,7738,"\r"],[-1,7803,"\r"],[-1,7807,"\r"],[-1,7817,"\r"],[-1,7836,"\r"],[-1,7847,"\r"],[-1,7882,"\r"],[-1,7886,"\r"],[-1,7896,"\r"],[-1,7912,"\r"],[-1,7923,"\r"],[-1,7979,"\r"],[-1,7983,"\r"],[-1,7993,"\r"],[-1,8042,"\r"],[-1,8053,"\r"],[-1,8081,"\r"],[-1,8085,"\r"],[-1,8095,"\r"],[-1,8151,"\r"],[-1,8162,"\r"],[-1,8214,"\r"],[-1,8218,"\r"],[-1,8228,"\r"],[-1,8311,"\r"],[-1,8322,"\r"],[-1,8364,"\r"],[-1,8396,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数 \n3.  */  \n4.  public interface VariableElement {  \n\n6.  /** \n7.  * 如果此变量是一个被初始化为编译时常量的 static final 字段，则返回此变量的值。否则返回 null。 \n8.  * 该值为基本类型或 String，如果该值为基本类型，则它被包装在适当的包装类中（比如 Integer）。 \n9.  * 注意，并非所有的 static final 字段都将具有常量值。特别是，enum 常量不 被认为是编译时常量。要获得一个常量值，字段的类型必须是基本类型或 String \n10.  */  \n11.  Object getConstantValue();  \n12.  }  \n"],[1,8955,"···"]],[8362,8921],[8365,8365]]],[1519707251143,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,8362,"···"]],[8365,8365],[8362,8362]]],[1519707253496,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8362,"```java"]],[8362,8362],[8369,8369]]],[1519707253642,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8370,"\n"]],[8369,8369],[8370,8370]]],[1519707254711,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8370,"```"]],[8370,8370],[8373,8373]]],[1519707256085,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,8370,"```"]],[8373,8373],[8370,8370]]],[1519707257223,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8370,"/** \r\n * 表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数 \r\n */  \r\npublic interface VariableElement {  \r\n  \r\n    /** \r\n     * 如果此变量是一个被初始化为编译时常量的 static final 字段，则返回此变量的值。否则返回 null。 \r\n     * 该值为基本类型或 String，如果该值为基本类型，则它被包装在适当的包装类中（比如 Integer）。 \r\n     * 注意，并非所有的 static final 字段都将具有常量值。特别是，enum 常量不 被认为是编译时常量。要获得一个常量值，字段的类型必须是基本类型或 String \r\n     */  \r\n    Object getConstantValue();  \r\n}  "]],[8370,8370],[8744,8744]]],[1519707258445,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,8374,"\r"],[-1,8414,"\r"],[-1,8421,"\r"],[-1,8459,"\r"],[-1,8463,"\r"],[-1,8473,"\r"],[-1,8538,"\r"],[-1,8600,"\r"],[-1,8694,"\r"],[-1,8705,"\r"],[-1,8739,"\r"],[1,8755,"\n"]],[8744,8744],[8745,8745]]],[1519707260030,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8374,"\r"],[1,8413,"\r"],[1,8419,"\r"],[1,8456,"\r"],[1,8459,"\r"],[1,8468,"\r"],[1,8532,"\r"],[1,8593,"\r"],[1,8686,"\r"],[1,8696,"\r"],[1,8729,"\r"],[-1,8744,"\n"]],[8745,8745],[8744,8744]]],[1519707260360,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,8370,"/** \r\n * 表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数 \r\n */  \r\npublic interface VariableElement {  \r\n  \r\n    /** \r\n     * 如果此变量是一个被初始化为编译时常量的 static final 字段，则返回此变量的值。否则返回 null。 \r\n     * 该值为基本类型或 String，如果该值为基本类型，则它被包装在适当的包装类中（比如 Integer）。 \r\n     * 注意，并非所有的 static final 字段都将具有常量值。特别是，enum 常量不 被认为是编译时常量。要获得一个常量值，字段的类型必须是基本类型或 String \r\n     */  \r\n    Object getConstantValue();  \r\n}  "]],[8744,8744],[8370,8370]]],[1519707263084,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8370,"```"]],[8370,8370],[8373,8373]]],[1519707263483,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8374,"\n"]],[8373,8373],[8374,8374]]],[1519707264716,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8370,"\n"]],[8370,8370],[8371,8371]]],[1519707266027,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8370,"/** \r\n * 表示一个字段、enum 常量、方法或构造方法参数、局部变量或异常参数 \r\n */  \r\npublic interface VariableElement {  \r\n  \r\n    /** \r\n     * 如果此变量是一个被初始化为编译时常量的 static final 字段，则返回此变量的值。否则返回 null。 \r\n     * 该值为基本类型或 String，如果该值为基本类型，则它被包装在适当的包装类中（比如 Integer）。 \r\n     * 注意，并非所有的 static final 字段都将具有常量值。特别是，enum 常量不 被认为是编译时常量。要获得一个常量值，字段的类型必须是基本类型或 String \r\n     */  \r\n    Object getConstantValue();  \r\n}  "]],[8370,8370],[8744,8744]]],[1519707312271,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,7580,"**"],[-1,7589,"*"],[1,7590,"\n"],[-1,8339,"*\n"],[1,8341,"\n\n**"],[-1,8360,"**"],[-1,8369,"*"],[1,8370,"\n"],[-1,8374,"\r"],[1,8375,"\n"],[-1,8414,"\r"],[1,8415,"\n"],[-1,8421,"\r"],[1,8422,"\n"],[-1,8459,"\r\n  \r"],[1,8464,"\n\n  \n"],[-1,8473,"\r"],[1,8474,"\n"],[-1,8538,"\r"],[1,8539,"\n"],[-1,8600,"\r"],[1,8601,"\n"],[-1,8694,"\r"],[1,8695,"\n"],[-1,8705,"\r"],[1,8706,"\n"],[-1,8739,"\r"],[1,8740,"\n"],[1,8750,"**"],[-1,20260,"··"]],[160,160],[20260,20260]]],[1519707312271,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,7582,"**"],[1,7589,"*"],[-1,7589,"\n"],[1,8339,"*\n"],[-1,8339,"\n\n**"],[1,8362,"**"],[1,8369,"*"],[-1,8369,"\n"],[1,8374,"\r"],[-1,8374,"\n"],[1,8414,"\r"],[-1,8414,"\n"],[1,8421,"\r"],[-1,8421,"\n"],[1,8459,"\r\n  \r"],[-1,8459,"\n\n  \n"],[1,8473,"\r"],[-1,8473,"\n"],[1,8538,"\r"],[-1,8538,"\n"],[1,8600,"\r"],[-1,8600,"\n"],[1,8694,"\r"],[-1,8694,"\n"],[1,8705,"\r"],[-1,8705,"\n"],[1,8739,"\r"],[-1,8739,"\n"],[-1,8750,"**"],[1,20262,"··"]],[20260,20260],[160,160]]],[1519707311792,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,8374,"\r"],[-1,8414,"\r"],[-1,8421,"\r"],[-1,8459,"\r"],[-1,8463,"\r"],[-1,8473,"\r"],[-1,8538,"\r"],[-1,8600,"\r"],[-1,8694,"\r"],[-1,8705,"\r"],[-1,8739,"\r"],[-1,8748,"\n"]],[8738,8738],[8738,8738]]],[1519707353153,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,7580,"**"],[-1,7589,"*"],[1,7590,"\n"],[-1,8339,"*\n"],[1,8341,"\n\n**"],[-1,8360,"**"],[-1,8369,"*"],[1,8370,"\n"],[1,8738,"**"],[-1,20248,"··"]],[160,160],[20248,20248]]],[1519707353153,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,7582,"**"],[1,7589,"*"],[-1,7589,"\n"],[1,8339,"*\n"],[-1,8339,"\n\n**"],[1,8362,"**"],[1,8369,"*"],[-1,8369,"\n"],[-1,8738,"**"],[1,20250,"··"]],[20248,20248],[160,160]]],[1519707348755,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,8764,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 表示一般类、接口、方法或构造方法元素的泛型参数. \n3.  */  \n4.  public interface TypeParameterElement {  \n\n6.  /** \n7.  * 返回由此类型参数参数化的一般类、接口、方法或构造方法 \n8.  */  \n9.  Element getGenericElement();  \n\n11.  /** \n12.  * 返回此类型参数的边界。它们是用来声明此类型参数的 extends 子句所指定的类型。 \n13.  * 如果没有使用显式的 extends 子句，则认为 java.lang.Object 是唯一的边界 \n14.  */  \n15.  List<? extends TypeMirror> getBounds();  \n16.  }  "],[1,9312,"```java"]],[8764,9312],[8771,8771]]],[1519707348962,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8773,"\n"]],[8771,8771],[8772,8772]]],[1519707350303,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8772,"```"]],[8772,8772],[8775,8775]]],[1519707351157,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8772,"\n"]],[8772,8772],[8773,8773]]],[1519707352395,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8772,"/** \r\n * 表示一般类、接口、方法或构造方法元素的泛型参数. \r\n */  \r\npublic interface TypeParameterElement {  \r\n  \r\n    /** \r\n     * 返回由此类型参数参数化的一般类、接口、方法或构造方法 \r\n     */  \r\n    Element getGenericElement();  \r\n  \r\n    /** \r\n     * 返回此类型参数的边界。它们是用来声明此类型参数的 extends 子句所指定的类型。 \r\n     * 如果没有使用显式的 extends 子句，则认为 java.lang.Object 是唯一的边界 \r\n     */  \r\n    List<? extends TypeMirror> getBounds();  \r\n}  "]],[8772,8772],[9140,9140]]],[1519707400435,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,7580,"**"],[-1,7589,"*"],[1,7590,"\n"],[-1,8339,"*\n"],[1,8341,"\n\n**"],[-1,8360,"**"],[-1,8369,"*"],[1,8370,"\n"],[1,8738,"**"],[-1,8762,"**"],[-1,8771,"*"],[1,8772,"\n"],[-1,8776,"\r"],[1,8777,"\n"],[-1,8806,"\r"],[1,8807,"\n"],[-1,8813,"\r"],[1,8814,"\n"],[-1,8856,"\r\n  \r"],[1,8861,"\n\n  \n"],[-1,8870,"\r"],[1,8871,"\n"],[-1,8906,"\r"],[1,8907,"\n"],[-1,8917,"\r"],[1,8918,"\n"],[-1,8953,"\r\n  \r"],[1,8958,"\n\n  \n"],[-1,8967,"\r"],[1,8968,"\n"],[-1,9019,"\r"],[1,9020,"\n"],[-1,9077,"\r"],[1,9078,"\n"],[-1,9088,"\r"],[1,9089,"\n"],[-1,9135,"\r"],[1,9136,"\n"],[-1,9144,"*\n"],[1,9146,"\n\n**"],[-1,20080,"··"]],[160,160],[20080,20080]]],[1519707400435,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,7582,"**"],[1,7589,"*"],[-1,7589,"\n"],[1,8339,"*\n"],[-1,8339,"\n\n**"],[1,8362,"**"],[1,8369,"*"],[-1,8369,"\n"],[-1,8738,"**"],[1,8764,"**"],[1,8771,"*"],[-1,8771,"\n"],[1,8776,"\r"],[-1,8776,"\n"],[1,8806,"\r"],[-1,8806,"\n"],[1,8813,"\r"],[-1,8813,"\n"],[1,8856,"\r\n  \r"],[-1,8856,"\n\n  \n"],[1,8870,"\r"],[-1,8870,"\n"],[1,8906,"\r"],[-1,8906,"\n"],[1,8917,"\r"],[-1,8917,"\n"],[1,8953,"\r\n  \r"],[-1,8953,"\n\n  \n"],[1,8967,"\r"],[-1,8967,"\n"],[1,9019,"\r"],[-1,9019,"\n"],[1,9077,"\r"],[-1,9077,"\n"],[1,9088,"\r"],[-1,9088,"\n"],[1,9135,"\r"],[-1,9135,"\n"],[1,9144,"*\n"],[-1,9144,"\n\n**"],[1,20082,"··"]],[20080,20080],[160,160]]],[1519707367454,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,8776,"\r"],[-1,8806,"\r"],[-1,8813,"\r"],[-1,8856,"\r"],[-1,8860,"\r"],[-1,8870,"\r"],[-1,8906,"\r"],[-1,8917,"\r"],[-1,8953,"\r"],[-1,8957,"\r"],[-1,8967,"\r"],[-1,9019,"\r"],[-1,9077,"\r"],[-1,9088,"\r"],[-1,9135,"\r"],[-1,9194,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public class MyProcessor extends AbstractProcessor {  \n\n3.  private Types typeUtils;  \n4.  private Elements elementUtils;  \n5.  private Filer filer;  \n6.  private Messager messager;  \n\n8.  @Override  \n9.  public synchronized void init(ProcessingEnvironment processingEnv) {  \n10.  super.init(processingEnv);  \n11.  typeUtils = processingEnv.getTypeUtils();  \n12.  elementUtils = processingEnv.getElementUtils();  \n13.  filer = processingEnv.getFiler();  \n14.  messager = processingEnv.getMessager();  \n15.  }  \n16.  } "],[1,9896,"```"]],[9179,9881],[9182,9182]]],[1519707368041,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9182,"\n"]],[9182,9182],[9183,9183]]],[1519707368898,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9182,"\n"]],[9183,9183],[9182,9182]]],[1519707369952,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9182,"java"]],[9182,9182],[9186,9186]]],[1519707370118,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9186,"\n"]],[9186,9186],[9187,9187]]],[1519707370846,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9187,"```"]],[9187,9187],[9190,9190]]],[1519707372340,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9187,"\n"]],[9187,9187],[9188,9188]]],[1519707373738,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9187,"public class MyProcessor extends AbstractProcessor {  \r\n  \r\n    private Types typeUtils;  \r\n    private Elements elementUtils;  \r\n    private Filer filer;  \r\n    private Messager messager;  \r\n  \r\n    @Override  \r\n    public synchronized void init(ProcessingEnvironment processingEnv) {  \r\n        super.init(processingEnv);  \r\n        typeUtils = processingEnv.getTypeUtils();  \r\n        elementUtils = processingEnv.getElementUtils();  \r\n        filer = processingEnv.getFiler();  \r\n        messager = processingEnv.getMessager();  \r\n    }  \r\n}  "]],[9187,9187],[9734,9734]]],[1519707374905,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9187,"public class MyProcessor extends AbstractProcessor {  \r\n  \r\n    private Types typeUtils;  \r\n    private Elements elementUtils;  \r\n    private Filer filer;  \r\n    private Messager messager;  \r\n  \r\n    @Override  \r\n    public synchronized void init(ProcessingEnvironment processingEnv) {  \r\n        super.init(processingEnv);  \r\n        typeUtils = processingEnv.getTypeUtils();  \r\n        elementUtils = processingEnv.getElementUtils();  \r\n        filer = processingEnv.getFiler();  \r\n        messager = processingEnv.getMessager();  \r\n    }  \r\n}  "]],[9734,9734],[9187,9187]]],[1519707375723,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9187,"\n"]],[9188,9188],[9187,9187]]],[1519707376376,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9187,"```"]],[9190,9190],[9187,9187]]],[1519707376795,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9186,"\n"]],[9187,9187],[9186,9186]]],[1519707377074,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9182,"java"]],[9186,9186],[9182,9182]]],[1519707377361,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9182,"\n"]],[9182,9182],[9183,9183]]],[1519707377704,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9182,"\n"]],[9183,9183],[9182,9182]]],[1519707378107,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8776,"\r"],[1,8805,"\r"],[1,8811,"\r"],[1,8853,"\r"],[1,8856,"\r"],[1,8865,"\r"],[1,8900,"\r"],[1,8910,"\r"],[1,8945,"\r"],[1,8948,"\r"],[1,8957,"\r"],[1,9008,"\r"],[1,9065,"\r"],[1,9075,"\r"],[1,9121,"\r"],[1,9179,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public class MyProcessor extends AbstractProcessor {  \n\n3.  private Types typeUtils;  \n4.  private Elements elementUtils;  \n5.  private Filer filer;  \n6.  private Messager messager;  \n\n8.  @Override  \n9.  public synchronized void init(ProcessingEnvironment processingEnv) {  \n10.  super.init(processingEnv);  \n11.  typeUtils = processingEnv.getTypeUtils();  \n12.  elementUtils = processingEnv.getElementUtils();  \n13.  filer = processingEnv.getFiler();  \n14.  messager = processingEnv.getMessager();  \n15.  }  \n16.  } "],[-1,9179,"```"]],[9182,9182],[9179,9881]]],[1519707380033,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,8776,"\r"],[-1,8806,"\r"],[-1,8813,"\r"],[-1,8856,"\r"],[-1,8860,"\r"],[-1,8870,"\r"],[-1,8906,"\r"],[-1,8917,"\r"],[-1,8953,"\r"],[-1,8957,"\r"],[-1,8967,"\r"],[-1,9019,"\r"],[-1,9077,"\r"],[-1,9088,"\r"],[-1,9135,"\r"],[-1,9194,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public class MyProcessor extends AbstractProcessor {  \n\n3.  private Types typeUtils;  \n4.  private Elements elementUtils;  \n5.  private Filer filer;  \n6.  private Messager messager;  \n\n8.  @Override  \n9.  public synchronized void init(ProcessingEnvironment processingEnv) {  \n10.  super.init(processingEnv);  \n11.  typeUtils = processingEnv.getTypeUtils();  \n12.  elementUtils = processingEnv.getElementUtils();  \n13.  filer = processingEnv.getFiler();  \n14.  messager = processingEnv.getMessager();  \n15.  }  \n16.  } "]],[9179,9881],[9179,9179]]],[1519707380854,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9178,"\n"]],[9179,9179],[9178,9178]]],[1519707383440,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9178,"```java"]],[9178,9178],[9185,9185]]],[1519707383624,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9185,"\n"]],[9185,9185],[9186,9186]]],[1519707384742,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9186,"```"]],[9186,9186],[9189,9189]]],[1519707385764,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9186,"\n"]],[9186,9186],[9187,9187]]],[1519707386600,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9186,"\n"]],[9187,9187],[9186,9186]]],[1519707386807,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9186,"```"]],[9189,9189],[9186,9186]]],[1519707387052,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9185,"\n"]],[9186,9186],[9185,9185]]],[1519707387360,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9178,"```java"]],[9185,9185],[9178,9178]]],[1519707387606,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9178,"\n"]],[9178,9178],[9179,9179]]],[1519707388067,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,8776,"\r"],[1,8805,"\r"],[1,8811,"\r"],[1,8853,"\r"],[1,8856,"\r"],[1,8865,"\r"],[1,8900,"\r"],[1,8910,"\r"],[1,8945,"\r"],[1,8948,"\r"],[1,8957,"\r"],[1,9008,"\r"],[1,9065,"\r"],[1,9075,"\r"],[1,9121,"\r"],[1,9179,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public class MyProcessor extends AbstractProcessor {  \n\n3.  private Types typeUtils;  \n4.  private Elements elementUtils;  \n5.  private Filer filer;  \n6.  private Messager messager;  \n\n8.  @Override  \n9.  public synchronized void init(ProcessingEnvironment processingEnv) {  \n10.  super.init(processingEnv);  \n11.  typeUtils = processingEnv.getTypeUtils();  \n12.  elementUtils = processingEnv.getElementUtils();  \n13.  filer = processingEnv.getFiler();  \n14.  messager = processingEnv.getMessager();  \n15.  }  \n16.  } "]],[9179,9179],[9179,9881]]],[1519707392252,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,8776,"\r"],[-1,8806,"\r"],[-1,8813,"\r"],[-1,8856,"\r"],[-1,8860,"\r"],[-1,8870,"\r"],[-1,8906,"\r"],[-1,8917,"\r"],[-1,8953,"\r"],[-1,8957,"\r"],[-1,8967,"\r"],[-1,9019,"\r"],[-1,9077,"\r"],[-1,9088,"\r"],[-1,9135,"\r"],[1,9193,"```java"]],[9178,9178],[9185,9185]]],[1519707392462,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9186,"\n"]],[9185,9185],[9186,9186]]],[1519707393394,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9186,"```"]],[9186,9186],[9189,9189]]],[1519707394641,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9186,"\n"]],[9186,9186],[9187,9187]]],[1519707397908,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9191,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public class MyProcessor extends AbstractProcessor {  \n\n3.  private Types typeUtils;  \n4.  private Elements elementUtils;  \n5.  private Filer filer;  \n6.  private Messager messager;  \n\n8.  @Override  \n9.  public synchronized void init(ProcessingEnvironment processingEnv) {  \n10.  super.init(processingEnv);  \n11.  typeUtils = processingEnv.getTypeUtils();  \n12.  elementUtils = processingEnv.getElementUtils();  \n13.  filer = processingEnv.getFiler();  \n14.  messager = processingEnv.getMessager();  \n15.  }  \n16.  }  \n\n"]],[9190,9895],[9190,9190]]],[1519707399783,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,9186,"public class MyProcessor extends AbstractProcessor {  \r\n  \r\n    private Types typeUtils;  \r\n    private Elements elementUtils;  \r\n    private Filer filer;  \r\n    private Messager messager;  \r\n  \r\n    @Override  \r\n    public synchronized void init(ProcessingEnvironment processingEnv) {  \r\n        super.init(processingEnv);  \r\n        typeUtils = processingEnv.getTypeUtils();  \r\n        elementUtils = processingEnv.getElementUtils();  \r\n        filer = processingEnv.getFiler();  \r\n        messager = processingEnv.getMessager();  \r\n    }  \r\n}  "]],[9186,9186],[9733,9733]]],[1519707419526,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,7580,"**"],[-1,7589,"*"],[1,7590,"\n"],[-1,8339,"*\n"],[1,8341,"\n\n**"],[-1,8360,"**"],[-1,8369,"*"],[1,8370,"\n"],[1,8738,"**"],[-1,8762,"**"],[-1,8771,"*"],[1,8772,"\n"],[-1,9129,"*"],[1,9131,"\n**"],[-1,9176,"\n*"],[-1,9240,"\r\n  \r"],[1,9245,"\n\n  \n"],[-1,9276,"\r"],[1,9277,"\n"],[-1,9314,"\r"],[1,9315,"\n"],[-1,9342,"\r"],[1,9343,"\n"],[-1,9376,"\r\n  \r"],[1,9381,"\n\n  \n"],[-1,9397,"\r"],[1,9398,"\n"],[-1,9473,"\r"],[1,9474,"\n"],[-1,9511,"\r"],[1,9512,"\n"],[-1,9564,"\r"],[1,9565,"\n"],[-1,9623,"\r"],[1,9624,"\n"],[-1,9668,"\r"],[1,9669,"\n"],[-1,9719,"\r"],[1,9720,"\n"],[-1,9728,"\r"],[1,9729,"\n"],[1,9738,"其中"],[-1,19919,"··"]],[160,160],[19919,19919]]],[1519707419526,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,7582,"**"],[1,7589,"*"],[-1,7589,"\n"],[1,8339,"*\n"],[-1,8339,"\n\n**"],[1,8362,"**"],[1,8369,"*"],[-1,8369,"\n"],[-1,8738,"**"],[1,8764,"**"],[1,8771,"*"],[-1,8771,"\n"],[1,9129,"*"],[-1,9130,"\n**"],[1,9178,"\n*"],[1,9240,"\r\n  \r"],[-1,9240,"\n\n  \n"],[1,9276,"\r"],[-1,9276,"\n"],[1,9314,"\r"],[-1,9314,"\n"],[1,9342,"\r"],[-1,9342,"\n"],[1,9376,"\r\n  \r"],[-1,9376,"\n\n  \n"],[1,9397,"\r"],[-1,9397,"\n"],[1,9473,"\r"],[-1,9473,"\n"],[1,9511,"\r"],[-1,9511,"\n"],[1,9564,"\r"],[-1,9564,"\n"],[1,9623,"\r"],[-1,9623,"\n"],[1,9668,"\r"],[-1,9668,"\n"],[1,9719,"\r"],[-1,9719,"\n"],[1,9728,"\r"],[-1,9728,"\n"],[-1,9738,"其中"],[1,19921,"··"]],[19919,19919],[160,160]]],[1519707415621,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,9240,"\r"],[-1,9244,"\r"],[-1,9276,"\r"],[-1,9314,"\r"],[-1,9342,"\r"],[-1,9376,"\r"],[-1,9380,"\r"],[-1,9397,"\r"],[-1,9473,"\r"],[-1,9511,"\r"],[-1,9564,"\r"],[-1,9623,"\r"],[-1,9668,"\r"],[-1,9719,"\r"],[-1,9728,"\r"],[-1,10310,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  public interface Messager {  \n\n3.  void printMessage(Diagnostic.Kind kind, CharSequence msg);  \n\n5.  void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e);  \n\n7.  void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e, AnnotationMirror a);  \n\n9.  void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e, AnnotationMirror a, AnnotationValue v);  \n10.  }  "],[1,10888,"```java"]],[10295,10873],[10302,10302]]],[1519707415845,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,10304,"\n"]],[10302,10302],[10303,10303]]],[1519707416571,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,10303,"```"]],[10303,10303],[10306,10306]]],[1519707417710,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,10303,"\n"]],[10303,10303],[10304,10304]]],[1519707418798,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,10303,"public interface Messager {  \r\n  \r\n    void printMessage(Diagnostic.Kind kind, CharSequence msg);  \r\n  \r\n    void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e);  \r\n  \r\n    void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e, AnnotationMirror a);  \r\n  \r\n    void printMessage(Diagnostic.Kind kind, CharSequence msg, Element e, AnnotationMirror a, AnnotationValue v);  \r\n}  "]],[10303,10303],[10709,10709]]],[1519707422254,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,7580,"**"],[-1,7589,"*"],[1,7590,"\n"],[-1,8339,"*\n"],[1,8341,"\n\n**"],[-1,8360,"**"],[-1,8369,"*"],[1,8370,"\n"],[1,8738,"**"],[-1,8762,"**"],[-1,8771,"*"],[1,8772,"\n"],[-1,9129,"*"],[1,9131,"\n**"],[-1,9176,"\n*"],[1,9178,""],[-1,9723,""],[1,9723,"其中"],[-1,10293,"**"],[-1,10302,"方"],[1,10303,"\n"],[-1,10332,"\r\n  \r"],[1,10337,"\n\n  \n"],[-1,10402,"\r\n  \r"],[1,10407,"\n\n  \n"],[-1,10483,"\r\n  \r"],[1,10488,"\n\n  \n"],[-1,10584,"\r\n  \r"],[1,10589,"\n\n  \n"],[-1,10704,"\r"],[1,10705,"\n"],[-1,10713,"法\n"],[1,10715,"\n\n方法"],[-1,19744,"··"],[1,19746,""]],[160,160],[19746,19746]]],[1519707422254,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,7582,"**"],[1,7589,"*"],[-1,7589,"\n"],[1,8339,"*\n"],[-1,8339,"\n\n**"],[1,8362,"**"],[1,8369,"*"],[-1,8369,"\n"],[-1,8738,"**"],[1,8764,"**"],[1,8771,"*"],[-1,8771,"\n"],[1,9129,"*"],[-1,9130,"\n**"],[1,9178,"\n*"],[-1,9178,""],[1,9723,""],[-1,9723,"其中"],[1,10295,"**"],[1,10302,"方"],[-1,10302,"\n"],[1,10332,"\r\n  \r"],[-1,10332,"\n\n  \n"],[1,10402,"\r\n  \r"],[-1,10402,"\n\n  \n"],[1,10483,"\r\n  \r"],[-1,10483,"\n\n  \n"],[1,10584,"\r\n  \r"],[-1,10584,"\n\n  \n"],[1,10704,"\r"],[-1,10704,"\n"],[1,10713,"法\n"],[-1,10713,"\n\n方法"],[1,19746,"··"],[-1,19746,""]],[19746,19746],[160,160]]],[1519707421793,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,10332,"\r"],[-1,10336,"\r"],[-1,10402,"\r"],[-1,10406,"\r"],[-1,10483,"\r"],[-1,10487,"\r"],[-1,10584,"\r"],[-1,10588,"\r"],[-1,10704,"\r"],[-1,10713,"\n"]],[10705,10705],[10705,10705]]],[1519707444500,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,7580,"**"],[-1,7589,"*"],[1,7590,"\n"],[-1,8339,"*\n"],[1,8341,"\n\n**"],[-1,8360,"**"],[-1,8369,"*"],[1,8370,"\n"],[1,8738,"**"],[-1,8762,"**"],[-1,8771,"*"],[1,8772,"\n"],[-1,9129,"*\n"],[1,9131,"\n\n**"],[-1,9176,"\n*"],[-1,9723,""],[1,9723,"其中"],[-1,10293,"**"],[-1,10302,"方"],[1,10303,"\n"],[-1,10705,""],[1,10705,"方法"],[-1,19734,"··"],[1,19736,""]],[160,160],[19736,19736]]],[1519707444500,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,7582,"**"],[1,7589,"*"],[-1,7589,"\n"],[1,8339,"*\n"],[-1,8339,"\n\n**"],[1,8362,"**"],[1,8369,"*"],[-1,8369,"\n"],[-1,8738,"**"],[1,8764,"**"],[1,8771,"*"],[-1,8771,"\n"],[1,9129,"*\n"],[-1,9129,"\n\n**"],[1,9178,"\n*"],[1,9723,""],[-1,9723,"其中"],[1,10295,"**"],[1,10302,"方"],[-1,10302,"\n"],[1,10705,""],[-1,10705,"方法"],[1,19736,"··"],[-1,19736,""]],[19736,19736],[160,160]]],[1519707440978,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,10790,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 一个用来处理TypeMirror的工具 \n3.  */  \n4.  public interface Types {  \n5.  /** \n6.  * 返回对应于类型的元素。该类型可能是 DeclaredType 或 TypeVariable。如果该类型没有对应元素，则返回 null. \n7.  */  \n8.  Element asElement(TypeMirror t);  \n\n10.  /** \n11.  * 测试两个 TypeMirror 对象是否表示同一类型. \n12.  * 警告：如果此方法两个参数中有一个表示通配符，那么此方法将返回 false \n13.  */  \n14.  boolean isSameType(TypeMirror t1, TypeMirror t2);  \n\n16.  /** \n17.  * 测试一种类型是否是另一个类型的子类型。任何类型都被认为是其本身的子类型. \n18.  * \n19.  * @return 当且仅当第一种类型是第二种类型的子类型时返回 true \n20.  * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \n21.  */  \n22.  boolean isSubtype(TypeMirror t1, TypeMirror t2);  \n\n24.  /** \n25.  * 测试一种类型是否可以指派给另一种类型. \n26.  * \n27.  * @return 当且仅当第一种类型可以指派给第二种类型时返回 true \n28.  * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \n29.  */  \n30.  boolean isAssignable(TypeMirror t1, TypeMirror t2);  \n\n32.  /** \n33.  * 测试一个类型参数是否包含 另一个类型参数. \n34.  * \n35.  * @return 当且仅当第一种类型包含第二种类型时返回 true \n36.  * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \n37.  */  \n38.  boolean contains(TypeMirror t1, TypeMirror t2);  \n\n40.  /** \n41.  * 测试一个方法的签名是否是另一个方法的子签名. \n42.  * \n43.  * @return 当且仅当第一个签名是第二个签名的子签名时返回 true \n44.  */  \n45.  boolean isSubsignature(ExecutableType m1, ExecutableType m2);  \n\n47.  /** \n48.  * 返回类型的直接超类型。interface 类型将出现在列表的最后（如果有）. \n49.  * \n50.  * @return 直接超类型；如果没有，则返回一个空列表 \n51.  * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \n52.  */  \n53.  List<? extends TypeMirror> directSupertypes(TypeMirror t);  \n\n55.  /** \n56.  * 返回删除状态的类型. \n57.  * \n58.  * @return 删除状态的给定类型 \n59.  * @throws IllegalArgumentException 如果给定一个 package 类型 \n60.  */  \n61.  TypeMirror erasure(TypeMirror t);  \n\n63.  /** \n64.  * 返回给定基本类型的装箱 (boxed) 值类型的类。即应用 boxing 转换. \n65.  * \n66.  * @param p  要转换的基本类型 \n67.  * @return 类型 p 的装箱值类型的类 \n68.  */  \n69.  TypeElement boxedClass(PrimitiveType p);  \n\n71.  /** \n72.  * 返回给定类型的拆箱 (unboxed) 值类型（基本类型）。即应用 unboxing 转换. \n73.  * \n74.  * @param t  要拆箱的类型 \n75.  * @return 类型 t 的拆箱值类型 \n76.  * @throws IllegalArgumentException 如果给定类型无法进行 unboxing 转换 \n77.  */  \n78.  PrimitiveType unboxedType(TypeMirror t);  \n\n80.  /** \n81.  * 对类型应用 capture 转换. \n82.  * \n83.  * @return 应用 capture 转换的结果 \n84.  * @throws IllegalArgumentException 如果给定 executable 或 package 类型 \n85.  */  \n86.  TypeMirror capture(TypeMirror t);  \n\n88.  /** \n89.  * 返回基本类型. \n90.  * \n91.  * @param kind  要返回的基本类型的种类 \n92.  * @return 一个基本类型 \n93.  * @throws IllegalArgumentException 如果 kind 不是基本种类 \n94.  */  \n95.  PrimitiveType getPrimitiveType(TypeKind kind);  \n\n97.  /** \n98.  * 返回 null 类型。该类型是 null 的类型. \n99.  */  \n100.  NullType getNullType();  \n\n102.  /** \n103.  * 返回在实际类型不适用的地方所使用的伪类型。 \n104.  * 要返回的类型的种类可以是 VOID 或 NONE。对于包，可以使用 Elements.getPackageElement(CharSequence).asType() 替代. \n105.  * \n106.  * @param kind  要返回的类型的种类 \n107.  * @return 种类 VOID 或 NONE 的伪类型 \n108.  * @throws IllegalArgumentException 如果 kind 无效 \n109.  */  \n110.  NoType getNoType(TypeKind kind);  \n\n112.  /** \n113.  * 返回具有指定组件类型的数组类型. \n114.  * \n115.  * @throws IllegalArgumentException 如果组件类型对于数组无效 \n116.  */  \n117.  ArrayType getArrayType(TypeMirror componentType);  \n\n119.  /** \n120.  * 返回新的通配符类型参数。可以指定通配符边界中的一个，也可以都不指定，但不能都指定. \n121.  * \n122.  * @param extendsBound  扩展（上）边界；如果没有，则该参数为 null \n123.  * @param superBound    超（下）边界；如果没有，则该参数为 null \n124.  * @return 新的通配符 \n125.  * @throws IllegalArgumentException 如果边界无效 \n126.  */  \n127.  WildcardType getWildcardType(TypeMirror extendsBound,  \n128.  TypeMirror superBound);  \n\n130.  /** \n131.  * 返回对应于类型元素和实际类型参数的类型。例如，如果给定 Set 的类型元素和 String 的类型镜像，那么可以使用此方法获取参数化类型 Set<String>. \n132.  * \n133.  * 类型参数的数量必须等于类型元素的形式类型参数的数量，或者等于 0。如果等于 0，并且类型元素是泛型，则返回该类型元素的原始类型. \n134.  * \n135.  * 如果返回一个参数化类型，则其类型元素不得包含在一般外部类中。 \n136.  * 例如，首先使用此方法获取类型 Outer<String>，然后调用 getDeclaredType(DeclaredType, TypeElement, TypeMirror...)， \n137.  * 可以构造参数化类型 Outer<String>.Inner<Number>. \n138.  * \n139.  * @param typeElem  类型元素 \n140.  * @param typeArgs  实际类型参数 \n141.  * @return 对应于类型元素和实际类型参数的类型 \n142.  * @throws IllegalArgumentException 如果给定的类型参数太多或太少，或者提供不合适的类型参数或类型元素 \n143.  */  \n144.  DeclaredType getDeclaredType(TypeElement typeElem, TypeMirror... typeArgs);  \n\n146.  /** \n147.  * 根据给定的包含类型，返回对应于类型元素和实际类型参数的类型（它是给定包含类型的成员）.例子如上 \n148.  * 如果包含类型是一个参数化类型，则类型参数的数量必须等于 typeElem 的形式类型参数的数量。 \n149.  * 如果包含类型不是参数化的，或者为 null，则此方法等效于 getDeclaredType(typeElem, typeArgs）. \n150.  * \n151.  * @param containing  包含类型；如果没有，则该参数为 null \n152.  * @param typeElem  类型元素 \n153.  * @param typeArgs  实际类型参数 \n154.  * @return 对应于类型元素和实际类型参数的类型，该类型包含在给定类型中 \n155.  * @throws IllegalArgumentException 如果给定的类型参数太多或太少，或者提供了不合适的类型参数、类型元素或包含类型 \n156.  */  \n157.  DeclaredType getDeclaredType(DeclaredType containing,  \n158.  TypeElement typeElem, TypeMirror... typeArgs);  \n\n160.  /** \n161.  * 当元素被视为给定类型的成员或者直接由给定类型包含时，返回该元素的类型。 \n162.  * 例如，被视为参数化类型 Set<String> 的成员时，Set.add 方法是参数类型为 String 的 ExecutableType. \n163.  * \n164.  * @param containing  包含类型 \n165.  * @param element     元素 \n166.  * @return 从包含类型来看的元素的类型 \n167.  * @throws IllegalArgumentException 如果元素对于给定类型无效 \n168.  */  \n169.  TypeMirror asMemberOf(DeclaredType containing, Element element);  \n170.  }  "],[1,16051,"```java"]],[10790,16051],[10797,10797]]],[1519707441170,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,10799,"\n"]],[10797,10797],[10798,10798]]],[1519707441852,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,10798,"```"]],[10798,10798],[10801,10801]]],[1519707442647,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,10798,"\n"]],[10798,10798],[10799,10799]]],[1519707443853,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,10798,"/** \r\n * 一个用来处理TypeMirror的工具 \r\n */  \r\npublic interface Types {  \r\n    /** \r\n     * 返回对应于类型的元素。该类型可能是 DeclaredType 或 TypeVariable。如果该类型没有对应元素，则返回 null. \r\n     */  \r\n    Element asElement(TypeMirror t);  \r\n  \r\n    /** \r\n     * 测试两个 TypeMirror 对象是否表示同一类型. \r\n     * 警告：如果此方法两个参数中有一个表示通配符，那么此方法将返回 false \r\n     */  \r\n    boolean isSameType(TypeMirror t1, TypeMirror t2);  \r\n  \r\n    /** \r\n     * 测试一种类型是否是另一个类型的子类型。任何类型都被认为是其本身的子类型. \r\n     * \r\n     * @return 当且仅当第一种类型是第二种类型的子类型时返回 true \r\n     * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \r\n     */  \r\n    boolean isSubtype(TypeMirror t1, TypeMirror t2);  \r\n  \r\n    /** \r\n     * 测试一种类型是否可以指派给另一种类型. \r\n     * \r\n     * @return 当且仅当第一种类型可以指派给第二种类型时返回 true \r\n     * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \r\n     */  \r\n    boolean isAssignable(TypeMirror t1, TypeMirror t2);  \r\n  \r\n    /** \r\n     * 测试一个类型参数是否包含 另一个类型参数. \r\n     * \r\n     * @return 当且仅当第一种类型包含第二种类型时返回 true \r\n     * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \r\n     */  \r\n    boolean contains(TypeMirror t1, TypeMirror t2);  \r\n  \r\n    /** \r\n     * 测试一个方法的签名是否是另一个方法的子签名. \r\n     * \r\n     * @return 当且仅当第一个签名是第二个签名的子签名时返回 true \r\n     */  \r\n    boolean isSubsignature(ExecutableType m1, ExecutableType m2);  \r\n  \r\n    /** \r\n     * 返回类型的直接超类型。interface 类型将出现在列表的最后（如果有）. \r\n     * \r\n     * @return 直接超类型；如果没有，则返回一个空列表 \r\n     * @throws IllegalArgumentException 如果给定一个 executable 或 package 类型 \r\n     */  \r\n    List<? extends TypeMirror> directSupertypes(TypeMirror t);  \r\n  \r\n    /** \r\n     * 返回删除状态的类型. \r\n     * \r\n     * @return 删除状态的给定类型 \r\n     * @throws IllegalArgumentException 如果给定一个 package 类型 \r\n     */  \r\n    TypeMirror erasure(TypeMirror t);  \r\n  \r\n    /** \r\n     * 返回给定基本类型的装箱 (boxed) 值类型的类。即应用 boxing 转换. \r\n     * \r\n     * @param p  要转换的基本类型 \r\n     * @return 类型 p 的装箱值类型的类 \r\n     */  \r\n    TypeElement boxedClass(PrimitiveType p);  \r\n  \r\n    /** \r\n     * 返回给定类型的拆箱 (unboxed) 值类型（基本类型）。即应用 unboxing 转换. \r\n     * \r\n     * @param t  要拆箱的类型 \r\n     * @return 类型 t 的拆箱值类型 \r\n     * @throws IllegalArgumentException 如果给定类型无法进行 unboxing 转换 \r\n     */  \r\n    PrimitiveType unboxedType(TypeMirror t);  \r\n  \r\n    /** \r\n     * 对类型应用 capture 转换. \r\n     * \r\n     * @return 应用 capture 转换的结果 \r\n     * @throws IllegalArgumentException 如果给定 executable 或 package 类型 \r\n     */  \r\n    TypeMirror capture(TypeMirror t);  \r\n  \r\n    /** \r\n     * 返回基本类型. \r\n     * \r\n     * @param kind  要返回的基本类型的种类 \r\n     * @return 一个基本类型 \r\n     * @throws IllegalArgumentException 如果 kind 不是基本种类 \r\n     */  \r\n    PrimitiveType getPrimitiveType(TypeKind kind);  \r\n  \r\n    /** \r\n     * 返回 null 类型。该类型是 null 的类型. \r\n     */  \r\n    NullType getNullType();  \r\n  \r\n    /** \r\n     * 返回在实际类型不适用的地方所使用的伪类型。 \r\n     * 要返回的类型的种类可以是 VOID 或 NONE。对于包，可以使用 Elements.getPackageElement(CharSequence).asType() 替代. \r\n     * \r\n     * @param kind  要返回的类型的种类 \r\n     * @return 种类 VOID 或 NONE 的伪类型 \r\n     * @throws IllegalArgumentException 如果 kind 无效 \r\n     */  \r\n    NoType getNoType(TypeKind kind);  \r\n  \r\n    /** \r\n     * 返回具有指定组件类型的数组类型. \r\n     * \r\n     * @throws IllegalArgumentException 如果组件类型对于数组无效 \r\n     */  \r\n    ArrayType getArrayType(TypeMirror componentType);  \r\n  \r\n    /** \r\n     * 返回新的通配符类型参数。可以指定通配符边界中的一个，也可以都不指定，但不能都指定. \r\n     * \r\n     * @param extendsBound  扩展（上）边界；如果没有，则该参数为 null \r\n     * @param superBound    超（下）边界；如果没有，则该参数为 null \r\n     * @return 新的通配符 \r\n     * @throws IllegalArgumentException 如果边界无效 \r\n     */  \r\n    WildcardType getWildcardType(TypeMirror extendsBound,  \r\n                                 TypeMirror superBound);  \r\n  \r\n    /** \r\n     * 返回对应于类型元素和实际类型参数的类型。例如，如果给定 Set 的类型元素和 String 的类型镜像，那么可以使用此方法获取参数化类型 Set<String>. \r\n     * \r\n     * 类型参数的数量必须等于类型元素的形式类型参数的数量，或者等于 0。如果等于 0，并且类型元素是泛型，则返回该类型元素的原始类型. \r\n     * \r\n     * 如果返回一个参数化类型，则其类型元素不得包含在一般外部类中。 \r\n     * 例如，首先使用此方法获取类型 Outer<String>，然后调用 getDeclaredType(DeclaredType, TypeElement, TypeMirror...)， \r\n     * 可以构造参数化类型 Outer<String>.Inner<Number>. \r\n     * \r\n     * @param typeElem  类型元素 \r\n     * @param typeArgs  实际类型参数 \r\n     * @return 对应于类型元素和实际类型参数的类型 \r\n     * @throws IllegalArgumentException 如果给定的类型参数太多或太少，或者提供不合适的类型参数或类型元素 \r\n     */  \r\n    DeclaredType getDeclaredType(TypeElement typeElem, TypeMirror... typeArgs);  \r\n  \r\n    /** \r\n     * 根据给定的包含类型，返回对应于类型元素和实际类型参数的类型（它是给定包含类型的成员）.例子如上 \r\n     * 如果包含类型是一个参数化类型，则类型参数的数量必须等于 typeElem 的形式类型参数的数量。 \r\n     * 如果包含类型不是参数化的，或者为 null，则此方法等效于 getDeclaredType(typeElem, typeArgs）. \r\n     * \r\n     * @param containing  包含类型；如果没有，则该参数为 null \r\n     * @param typeElem  类型元素 \r\n     * @param typeArgs  实际类型参数 \r\n     * @return 对应于类型元素和实际类型参数的类型，该类型包含在给定类型中 \r\n     * @throws IllegalArgumentException 如果给定的类型参数太多或太少，或者提供了不合适的类型参数、类型元素或包含类型 \r\n     */  \r\n    DeclaredType getDeclaredType(DeclaredType containing,  \r\n                                 TypeElement typeElem, TypeMirror... typeArgs);  \r\n  \r\n    /** \r\n     * 当元素被视为给定类型的成员或者直接由给定类型包含时，返回该元素的类型。 \r\n     * 例如，被视为参数化类型 Set<String> 的成员时，Set.add 方法是参数类型为 String 的 ExecutableType. \r\n     * \r\n     * @param containing  包含类型 \r\n     * @param element     元素 \r\n     * @return 从包含类型来看的元素的类型 \r\n     * @throws IllegalArgumentException 如果元素对于给定类型无效 \r\n     */  \r\n    TypeMirror asMemberOf(DeclaredType containing, Element element);  \r\n}  "]],[10798,10798],[16022,16022]]],[1519707449437,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*\n"],[1,2067,"\n\n**"],[-1,2265,"\n\n"],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,7580,"**"],[-1,7589,"*"],[1,7590,"\n"],[-1,8339,"*\n"],[1,8341,"\n\n**"],[-1,8360,"**"],[-1,8369,"*"],[1,8370,"\n"],[1,8738,"**"],[-1,8762,"**"],[-1,8771,"*"],[1,8772,"\n"],[-1,9129,"*\n"],[1,9131,"\n\n**"],[-1,9176,"\n*"],[-1,9723,""],[1,9723,"其中"],[-1,10293,"**"],[-1,10302,"方"],[1,10303,"\n"],[-1,10705,""],[1,10705,"方法"],[-1,10788,"**"],[-1,10797,"*"],[1,10798,"\n"],[-1,10802,"\r"],[1,10803,"\n"],[-1,10827,"\r"],[1,10828,"\n"],[-1,10834,"\r"],[1,10835,"\n"],[-1,10862,"\r"],[1,10863,"\n"],[-1,10872,"\r"],[1,10873,"\n"],[-1,10949,"\r"],[1,10950,"\n"],[-1,10960,"\r"],[1,10961,"\n"],[-1,11000,"\r\n  \r"],[1,11005,"\n\n  \n"],[-1,11014,"\r"],[1,11015,"\n"],[-1,11051,"\r"],[1,11052,"\n"],[-1,11097,"\r"],[1,11098,"\n"],[-1,11108,"\r"],[1,11109,"\n"],[-1,11165,"\r\n  \r"],[1,11170,"\n\n  \n"],[-1,11179,"\r"],[1,11180,"\n"],[-1,11225,"\r"],[1,11226,"\n"],[-1,11234,"\r"],[1,11235,"\n"],[-1,11279,"\r"],[1,11280,"\n"],[-1,11352,"\r"],[1,11353,"\n"],[-1,11363,"\r"],[1,11364,"\n"],[-1,11419,"\r\n  \r"],[1,11424,"\n\n  \n"],[-1,11433,"\r"],[1,11434,"\n"],[-1,11462,"\r"],[1,11463,"\n"],[-1,11471,"\r"],[1,11472,"\n"],[-1,11516,"\r"],[1,11517,"\n"],[-1,11589,"\r"],[1,11590,"\n"],[-1,11600,"\r"],[1,11601,"\n"],[-1,11659,"\r\n  \r"],[1,11664,"\n\n  \n"],[-1,11673,"\r"],[1,11674,"\n"],[-1,11704,"\r"],[1,11705,"\n"],[-1,11713,"\r"],[1,11714,"\n"],[-1,11755,"\r"],[1,11756,"\n"],[-1,11828,"\r"],[1,11829,"\n"],[-1,11839,"\r"],[1,11840,"\n"],[-1,11894,"\r\n  \r"],[1,11899,"\n\n  \n"],[-1,11908,"\r"],[1,11909,"\n"],[-1,11940,"\r"],[1,11941,"\n"],[-1,11949,"\r"],[1,11950,"\n"],[-1,11994,"\r"],[1,11995,"\n"],[-1,12005,"\r"],[1,12006,"\n"],[-1,12074,"\r\n  \r"],[1,12079,"\n\n  \n"],[-1,12088,"\r"],[1,12089,"\n"],[-1,12136,"\r"],[1,12137,"\n"],[-1,12145,"\r"],[1,12146,"\n"],[-1,12182,"\r"],[1,12183,"\n"],[-1,12255,"\r"],[1,12256,"\n"],[-1,12266,"\r"],[1,12267,"\n"],[-1,12332,"\r\n  \r"],[1,12337,"\n\n  \n"],[-1,12346,"\r"],[1,12347,"\n"],[-1,12366,"\r"],[1,12367,"\n"],[-1,12375,"\r"],[1,12376,"\n"],[-1,12402,"\r"],[1,12403,"\n"],[-1,12462,"\r"],[1,12463,"\n"],[-1,12473,"\r"],[1,12474,"\n"],[-1,12514,"\r\n  \r"],[1,12519,"\n\n  \n"],[-1,12528,"\r"],[1,12529,"\n"],[-1,12578,"\r"],[1,12579,"\n"],[-1,12587,"\r"],[1,12588,"\n"],[-1,12615,"\r"],[1,12616,"\n"],[-1,12646,"\r"],[1,12647,"\n"],[-1,12657,"\r"],[1,12658,"\n"],[-1,12705,"\r\n  \r"],[1,12710,"\n\n  \n"],[-1,12719,"\r"],[1,12720,"\n"],[-1,12775,"\r"],[1,12776,"\n"],[-1,12784,"\r"],[1,12785,"\n"],[-1,12810,"\r"],[1,12811,"\n"],[-1,12839,"\r"],[1,12840,"\n"],[-1,12904,"\r"],[1,12905,"\n"],[-1,12915,"\r"],[1,12916,"\n"],[-1,12963,"\r\n  \r"],[1,12968,"\n\n  \n"],[-1,12977,"\r"],[1,12978,"\n"],[-1,13004,"\r"],[1,13005,"\n"],[-1,13013,"\r"],[1,13014,"\n"],[-1,13047,"\r"],[1,13048,"\n"],[-1,13118,"\r"],[1,13119,"\n"],[-1,13129,"\r"],[1,13130,"\n"],[-1,13170,"\r\n  \r"],[1,13175,"\n\n  \n"],[-1,13184,"\r"],[1,13185,"\n"],[-1,13201,"\r"],[1,13202,"\n"],[-1,13210,"\r"],[1,13211,"\n"],[-1,13244,"\r"],[1,13245,"\n"],[-1,13268,"\r"],[1,13269,"\n"],[-1,13325,"\r"],[1,13326,"\n"],[-1,13336,"\r"],[1,13337,"\n"],[-1,13390,"\r\n  \r"],[1,13395,"\n\n  \n"],[-1,13404,"\r"],[1,13405,"\n"],[-1,13439,"\r"],[1,13440,"\n"],[-1,13450,"\r"],[1,13451,"\n"],[-1,13481,"\r\n  \r"],[1,13486,"\n\n  \n"],[-1,13495,"\r"],[1,13496,"\n"],[-1,13526,"\r"],[1,13527,"\n"],[-1,13623,"\r"],[1,13624,"\n"],[-1,13632,"\r"],[1,13633,"\n"],[-1,13664,"\r"],[1,13665,"\n"],[-1,13701,"\r"],[1,13702,"\n"],[-1,13754,"\r"],[1,13755,"\n"],[-1,13765,"\r"],[1,13766,"\n"],[-1,13805,"\r\n  \r"],[1,13810,"\n\n  \n"],[-1,13819,"\r"],[1,13820,"\n"],[-1,13845,"\r"],[1,13846,"\n"],[-1,13854,"\r"],[1,13855,"\n"],[-1,13909,"\r"],[1,13910,"\n"],[-1,13920,"\r"],[1,13921,"\n"],[-1,13977,"\r\n  \r"],[1,13982,"\n\n  \n"],[-1,13991,"\r"],[1,13992,"\n"],[-1,14042,"\r"],[1,14043,"\n"],[-1,14051,"\r"],[1,14052,"\n"],[-1,14105,"\r"],[1,14106,"\n"],[-1,14158,"\r"],[1,14159,"\n"],[-1,14181,"\r"],[1,14182,"\n"],[-1,14230,"\r"],[1,14231,"\n"],[-1,14241,"\r"],[1,14242,"\n"],[-1,14302,"\r"],[1,14303,"\n"],[-1,14362,"\r\n  \r"],[1,14367,"\n\n  \n"],[-1,14376,"\r"],[1,14377,"\n"],[-1,14467,"\r"],[1,14468,"\n"],[-1,14476,"\r"],[1,14477,"\n"],[-1,14550,"\r"],[1,14551,"\n"],[-1,14559,"\r"],[1,14560,"\n"],[-1,14599,"\r"],[1,14600,"\n"],[-1,14701,"\r"],[1,14702,"\n"],[-1,14749,"\r"],[1,14750,"\n"],[-1,14758,"\r"],[1,14759,"\n"],[-1,14789,"\r"],[1,14790,"\n"],[-1,14822,"\r"],[1,14823,"\n"],[-1,14857,"\r"],[1,14858,"\n"],[-1,14932,"\r"],[1,14933,"\n"],[-1,14943,"\r"],[1,14944,"\n"],[-1,15026,"\r\n  \r"],[1,15031,"\n\n  \n"],[-1,15040,"\r"],[1,15041,"\n"],[-1,15097,"\r"],[1,15098,"\n"],[-1,15155,"\r"],[1,15156,"\n"],[-1,15231,"\r"],[1,15232,"\n"],[-1,15240,"\r"],[1,15241,"\n"],[-1,15289,"\r"],[1,15290,"\n"],[-1,15320,"\r"],[1,15321,"\n"],[-1,15353,"\r"],[1,15354,"\n"],[-1,15400,"\r"],[1,15401,"\n"],[-1,15481,"\r"],[1,15482,"\n"],[-1,15492,"\r"],[1,15493,"\n"],[-1,15553,"\r"],[1,15554,"\n"],[-1,15636,"\r\n  \r"],[1,15641,"\n\n  \n"],[-1,15650,"\r"],[1,15651,"\n"],[-1,15695,"\r"],[1,15696,"\n"],[-1,15775,"\r"],[1,15776,"\n"],[-1,15784,"\r"],[1,15785,"\n"],[-1,15817,"\r"],[1,15818,"\n"],[-1,15848,"\r"],[1,15849,"\n"],[-1,15879,"\r"],[1,15880,"\n"],[-1,15934,"\r"],[1,15935,"\n"],[-1,15945,"\r"],[1,15946,"\n"],[-1,16017,"\r"],[1,16018,"\n"],[-1,16026,"*\n"],[1,16028,"\n\n**"],[-1,19709,"··"],[1,19711,""]],[160,160],[19711,19711]]],[1519707449437,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*\n"],[-1,2065,"\n\n**"],[1,2267,"\n\n"],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,7582,"**"],[1,7589,"*"],[-1,7589,"\n"],[1,8339,"*\n"],[-1,8339,"\n\n**"],[1,8362,"**"],[1,8369,"*"],[-1,8369,"\n"],[-1,8738,"**"],[1,8764,"**"],[1,8771,"*"],[-1,8771,"\n"],[1,9129,"*\n"],[-1,9129,"\n\n**"],[1,9178,"\n*"],[1,9723,""],[-1,9723,"其中"],[1,10295,"**"],[1,10302,"方"],[-1,10302,"\n"],[1,10705,""],[-1,10705,"方法"],[1,10790,"**"],[1,10797,"*"],[-1,10797,"\n"],[1,10802,"\r"],[-1,10802,"\n"],[1,10827,"\r"],[-1,10827,"\n"],[1,10834,"\r"],[-1,10834,"\n"],[1,10862,"\r"],[-1,10862,"\n"],[1,10872,"\r"],[-1,10872,"\n"],[1,10949,"\r"],[-1,10949,"\n"],[1,10960,"\r"],[-1,10960,"\n"],[1,11000,"\r\n  \r"],[-1,11000,"\n\n  \n"],[1,11014,"\r"],[-1,11014,"\n"],[1,11051,"\r"],[-1,11051,"\n"],[1,11097,"\r"],[-1,11097,"\n"],[1,11108,"\r"],[-1,11108,"\n"],[1,11165,"\r\n  \r"],[-1,11165,"\n\n  \n"],[1,11179,"\r"],[-1,11179,"\n"],[1,11225,"\r"],[-1,11225,"\n"],[1,11234,"\r"],[-1,11234,"\n"],[1,11279,"\r"],[-1,11279,"\n"],[1,11352,"\r"],[-1,11352,"\n"],[1,11363,"\r"],[-1,11363,"\n"],[1,11419,"\r\n  \r"],[-1,11419,"\n\n  \n"],[1,11433,"\r"],[-1,11433,"\n"],[1,11462,"\r"],[-1,11462,"\n"],[1,11471,"\r"],[-1,11471,"\n"],[1,11516,"\r"],[-1,11516,"\n"],[1,11589,"\r"],[-1,11589,"\n"],[1,11600,"\r"],[-1,11600,"\n"],[1,11659,"\r\n  \r"],[-1,11659,"\n\n  \n"],[1,11673,"\r"],[-1,11673,"\n"],[1,11704,"\r"],[-1,11704,"\n"],[1,11713,"\r"],[-1,11713,"\n"],[1,11755,"\r"],[-1,11755,"\n"],[1,11828,"\r"],[-1,11828,"\n"],[1,11839,"\r"],[-1,11839,"\n"],[1,11894,"\r\n  \r"],[-1,11894,"\n\n  \n"],[1,11908,"\r"],[-1,11908,"\n"],[1,11940,"\r"],[-1,11940,"\n"],[1,11949,"\r"],[-1,11949,"\n"],[1,11994,"\r"],[-1,11994,"\n"],[1,12005,"\r"],[-1,12005,"\n"],[1,12074,"\r\n  \r"],[-1,12074,"\n\n  \n"],[1,12088,"\r"],[-1,12088,"\n"],[1,12136,"\r"],[-1,12136,"\n"],[1,12145,"\r"],[-1,12145,"\n"],[1,12182,"\r"],[-1,12182,"\n"],[1,12255,"\r"],[-1,12255,"\n"],[1,12266,"\r"],[-1,12266,"\n"],[1,12332,"\r\n  \r"],[-1,12332,"\n\n  \n"],[1,12346,"\r"],[-1,12346,"\n"],[1,12366,"\r"],[-1,12366,"\n"],[1,12375,"\r"],[-1,12375,"\n"],[1,12402,"\r"],[-1,12402,"\n"],[1,12462,"\r"],[-1,12462,"\n"],[1,12473,"\r"],[-1,12473,"\n"],[1,12514,"\r\n  \r"],[-1,12514,"\n\n  \n"],[1,12528,"\r"],[-1,12528,"\n"],[1,12578,"\r"],[-1,12578,"\n"],[1,12587,"\r"],[-1,12587,"\n"],[1,12615,"\r"],[-1,12615,"\n"],[1,12646,"\r"],[-1,12646,"\n"],[1,12657,"\r"],[-1,12657,"\n"],[1,12705,"\r\n  \r"],[-1,12705,"\n\n  \n"],[1,12719,"\r"],[-1,12719,"\n"],[1,12775,"\r"],[-1,12775,"\n"],[1,12784,"\r"],[-1,12784,"\n"],[1,12810,"\r"],[-1,12810,"\n"],[1,12839,"\r"],[-1,12839,"\n"],[1,12904,"\r"],[-1,12904,"\n"],[1,12915,"\r"],[-1,12915,"\n"],[1,12963,"\r\n  \r"],[-1,12963,"\n\n  \n"],[1,12977,"\r"],[-1,12977,"\n"],[1,13004,"\r"],[-1,13004,"\n"],[1,13013,"\r"],[-1,13013,"\n"],[1,13047,"\r"],[-1,13047,"\n"],[1,13118,"\r"],[-1,13118,"\n"],[1,13129,"\r"],[-1,13129,"\n"],[1,13170,"\r\n  \r"],[-1,13170,"\n\n  \n"],[1,13184,"\r"],[-1,13184,"\n"],[1,13201,"\r"],[-1,13201,"\n"],[1,13210,"\r"],[-1,13210,"\n"],[1,13244,"\r"],[-1,13244,"\n"],[1,13268,"\r"],[-1,13268,"\n"],[1,13325,"\r"],[-1,13325,"\n"],[1,13336,"\r"],[-1,13336,"\n"],[1,13390,"\r\n  \r"],[-1,13390,"\n\n  \n"],[1,13404,"\r"],[-1,13404,"\n"],[1,13439,"\r"],[-1,13439,"\n"],[1,13450,"\r"],[-1,13450,"\n"],[1,13481,"\r\n  \r"],[-1,13481,"\n\n  \n"],[1,13495,"\r"],[-1,13495,"\n"],[1,13526,"\r"],[-1,13526,"\n"],[1,13623,"\r"],[-1,13623,"\n"],[1,13632,"\r"],[-1,13632,"\n"],[1,13664,"\r"],[-1,13664,"\n"],[1,13701,"\r"],[-1,13701,"\n"],[1,13754,"\r"],[-1,13754,"\n"],[1,13765,"\r"],[-1,13765,"\n"],[1,13805,"\r\n  \r"],[-1,13805,"\n\n  \n"],[1,13819,"\r"],[-1,13819,"\n"],[1,13845,"\r"],[-1,13845,"\n"],[1,13854,"\r"],[-1,13854,"\n"],[1,13909,"\r"],[-1,13909,"\n"],[1,13920,"\r"],[-1,13920,"\n"],[1,13977,"\r\n  \r"],[-1,13977,"\n\n  \n"],[1,13991,"\r"],[-1,13991,"\n"],[1,14042,"\r"],[-1,14042,"\n"],[1,14051,"\r"],[-1,14051,"\n"],[1,14105,"\r"],[-1,14105,"\n"],[1,14158,"\r"],[-1,14158,"\n"],[1,14181,"\r"],[-1,14181,"\n"],[1,14230,"\r"],[-1,14230,"\n"],[1,14241,"\r"],[-1,14241,"\n"],[1,14302,"\r"],[-1,14302,"\n"],[1,14362,"\r\n  \r"],[-1,14362,"\n\n  \n"],[1,14376,"\r"],[-1,14376,"\n"],[1,14467,"\r"],[-1,14467,"\n"],[1,14476,"\r"],[-1,14476,"\n"],[1,14550,"\r"],[-1,14550,"\n"],[1,14559,"\r"],[-1,14559,"\n"],[1,14599,"\r"],[-1,14599,"\n"],[1,14701,"\r"],[-1,14701,"\n"],[1,14749,"\r"],[-1,14749,"\n"],[1,14758,"\r"],[-1,14758,"\n"],[1,14789,"\r"],[-1,14789,"\n"],[1,14822,"\r"],[-1,14822,"\n"],[1,14857,"\r"],[-1,14857,"\n"],[1,14932,"\r"],[-1,14932,"\n"],[1,14943,"\r"],[-1,14943,"\n"],[1,15026,"\r\n  \r"],[-1,15026,"\n\n  \n"],[1,15040,"\r"],[-1,15040,"\n"],[1,15097,"\r"],[-1,15097,"\n"],[1,15155,"\r"],[-1,15155,"\n"],[1,15231,"\r"],[-1,15231,"\n"],[1,15240,"\r"],[-1,15240,"\n"],[1,15289,"\r"],[-1,15289,"\n"],[1,15320,"\r"],[-1,15320,"\n"],[1,15353,"\r"],[-1,15353,"\n"],[1,15400,"\r"],[-1,15400,"\n"],[1,15481,"\r"],[-1,15481,"\n"],[1,15492,"\r"],[-1,15492,"\n"],[1,15553,"\r"],[-1,15553,"\n"],[1,15636,"\r\n  \r"],[-1,15636,"\n\n  \n"],[1,15650,"\r"],[-1,15650,"\n"],[1,15695,"\r"],[-1,15695,"\n"],[1,15775,"\r"],[-1,15775,"\n"],[1,15784,"\r"],[-1,15784,"\n"],[1,15817,"\r"],[-1,15817,"\n"],[1,15848,"\r"],[-1,15848,"\n"],[1,15879,"\r"],[-1,15879,"\n"],[1,15934,"\r"],[-1,15934,"\n"],[1,15945,"\r"],[-1,15945,"\n"],[1,16017,"\r"],[-1,16017,"\n"],[1,16026,"*\n"],[-1,16026,"\n\n**"],[1,19711,"··"],[-1,19711,""]],[19711,19711],[160,160]]],[1519707449064,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,10802,"\r"],[-1,10827,"\r"],[-1,10834,"\r"],[-1,10862,"\r"],[-1,10872,"\r"],[-1,10949,"\r"],[-1,10960,"\r"],[-1,11000,"\r"],[-1,11004,"\r"],[-1,11014,"\r"],[-1,11051,"\r"],[-1,11097,"\r"],[-1,11108,"\r"],[-1,11165,"\r"],[-1,11169,"\r"],[-1,11179,"\r"],[-1,11225,"\r"],[-1,11234,"\r"],[-1,11279,"\r"],[-1,11352,"\r"],[-1,11363,"\r"],[-1,11419,"\r"],[-1,11423,"\r"],[-1,11433,"\r"],[-1,11462,"\r"],[-1,11471,"\r"],[-1,11516,"\r"],[-1,11589,"\r"],[-1,11600,"\r"],[-1,11659,"\r"],[-1,11663,"\r"],[-1,11673,"\r"],[-1,11704,"\r"],[-1,11713,"\r"],[-1,11755,"\r"],[-1,11828,"\r"],[-1,11839,"\r"],[-1,11894,"\r"],[-1,11898,"\r"],[-1,11908,"\r"],[-1,11940,"\r"],[-1,11949,"\r"],[-1,11994,"\r"],[-1,12005,"\r"],[-1,12074,"\r"],[-1,12078,"\r"],[-1,12088,"\r"],[-1,12136,"\r"],[-1,12145,"\r"],[-1,12182,"\r"],[-1,12255,"\r"],[-1,12266,"\r"],[-1,12332,"\r"],[-1,12336,"\r"],[-1,12346,"\r"],[-1,12366,"\r"],[-1,12375,"\r"],[-1,12402,"\r"],[-1,12462,"\r"],[-1,12473,"\r"],[-1,12514,"\r"],[-1,12518,"\r"],[-1,12528,"\r"],[-1,12578,"\r"],[-1,12587,"\r"],[-1,12615,"\r"],[-1,12646,"\r"],[-1,12657,"\r"],[-1,12705,"\r"],[-1,12709,"\r"],[-1,12719,"\r"],[-1,12775,"\r"],[-1,12784,"\r"],[-1,12810,"\r"],[-1,12839,"\r"],[-1,12904,"\r"],[-1,12915,"\r"],[-1,12963,"\r"],[-1,12967,"\r"],[-1,12977,"\r"],[-1,13004,"\r"],[-1,13013,"\r"],[-1,13047,"\r"],[-1,13118,"\r"],[-1,13129,"\r"],[-1,13170,"\r"],[-1,13174,"\r"],[-1,13184,"\r"],[-1,13201,"\r"],[-1,13210,"\r"],[-1,13244,"\r"],[-1,13268,"\r"],[-1,13325,"\r"],[-1,13336,"\r"],[-1,13390,"\r"],[-1,13394,"\r"],[-1,13404,"\r"],[-1,13439,"\r"],[-1,13450,"\r"],[-1,13481,"\r"],[-1,13485,"\r"],[-1,13495,"\r"],[-1,13526,"\r"],[-1,13623,"\r"],[-1,13632,"\r"],[-1,13664,"\r"],[-1,13701,"\r"],[-1,13754,"\r"],[-1,13765,"\r"],[-1,13805,"\r"],[-1,13809,"\r"],[-1,13819,"\r"],[-1,13845,"\r"],[-1,13854,"\r"],[-1,13909,"\r"],[-1,13920,"\r"],[-1,13977,"\r"],[-1,13981,"\r"],[-1,13991,"\r"],[-1,14042,"\r"],[-1,14051,"\r"],[-1,14105,"\r"],[-1,14158,"\r"],[-1,14181,"\r"],[-1,14230,"\r"],[-1,14241,"\r"],[-1,14302,"\r"],[-1,14362,"\r"],[-1,14366,"\r"],[-1,14376,"\r"],[-1,14467,"\r"],[-1,14476,"\r"],[-1,14550,"\r"],[-1,14559,"\r"],[-1,14599,"\r"],[-1,14701,"\r"],[-1,14749,"\r"],[-1,14758,"\r"],[-1,14789,"\r"],[-1,14822,"\r"],[-1,14857,"\r"],[-1,14932,"\r"],[-1,14943,"\r"],[-1,15026,"\r"],[-1,15030,"\r"],[-1,15040,"\r"],[-1,15097,"\r"],[-1,15155,"\r"],[-1,15231,"\r"],[-1,15240,"\r"],[-1,15289,"\r"],[-1,15320,"\r"],[-1,15353,"\r"],[-1,15400,"\r"],[-1,15481,"\r"],[-1,15492,"\r"],[-1,15553,"\r"],[-1,15636,"\r"],[-1,15640,"\r"],[-1,15650,"\r"],[-1,15695,"\r"],[-1,15775,"\r"],[-1,15784,"\r"],[-1,15817,"\r"],[-1,15848,"\r"],[-1,15879,"\r"],[-1,15934,"\r"],[-1,15945,"\r"],[-1,16017,"\r"],[-1,16026,"\n"]],[15858,15858],[15858,15858]]],[1519707465041,[null,[[-1,160,"*"],[1,161,"\n"],[-1,2065,"*"],[1,2067,"\n**"],[-1,2265,"\n\n"],[-1,2287,""],[1,2287,"| "],[-1,2597,"**"],[-1,2606,"源"],[1,2607,"\n"],[1,3071,"源码"],[-1,3269,"\n*"],[-1,3278,"上"],[1,3279,"\n"],[1,4444,"\n上"],[-1,4714,"\n*"],[-1,4723,"*"],[1,4724,"\n"],[1,4875,"**"],[-1,4943,"**"],[-1,4952,"可"],[1,4953,"\n"],[-1,6288,""],[1,6288,"可以"],[-1,6484,"*\n"],[1,7287,"**"],[-1,7304,"\n*"],[-1,7313,"*"],[1,7314,"\n"],[1,7559,"**"],[-1,7580,"**"],[-1,7589,"*"],[1,7590,"\n"],[-1,8339,"*\n"],[1,8341,"\n\n**"],[-1,8360,"**"],[-1,8369,"*"],[1,8370,"\n"],[1,8738,"**"],[-1,8762,"**"],[-1,8771,"*"],[1,8772,"\n"],[-1,9129,"*"],[1,9131,"\n**"],[-1,9176,"\n*"],[1,9178,""],[-1,9723,""],[1,9723,"其中"],[-1,10293,"**"],[-1,10302,"方"],[1,10303,"\n"],[-1,10705,""],[1,10705,"方法"],[-1,10788,"**"],[-1,10797,"*"],[1,10798,"\n"],[-1,15858,""],[1,15858,"**"],[-1,19539,"··"],[1,19541,""]],[160,160],[19541,19541]]],[1519707465041,[null,[[1,160,"*"],[-1,160,"\n"],[1,2065,"*"],[-1,2066,"\n**"],[1,2267,"\n\n"],[1,2287,""],[-1,2287,"| "],[1,2599,"**"],[1,2606,"源"],[-1,2606,"\n"],[-1,3071,"源码"],[1,3271,"\n*"],[1,3278,"上"],[-1,3278,"\n"],[-1,4444,"\n上"],[1,4716,"\n*"],[1,4723,"*"],[-1,4723,"\n"],[-1,4875,"**"],[1,4945,"**"],[1,4952,"可"],[-1,4952,"\n"],[1,6288,""],[-1,6288,"可以"],[1,6486,"*\n"],[-1,7287,"**"],[1,7306,"\n*"],[1,7313,"*"],[-1,7313,"\n"],[-1,7559,"**"],[1,7582,"**"],[1,7589,"*"],[-1,7589,"\n"],[1,8339,"*\n"],[-1,8339,"\n\n**"],[1,8362,"**"],[1,8369,"*"],[-1,8369,"\n"],[-1,8738,"**"],[1,8764,"**"],[1,8771,"*"],[-1,8771,"\n"],[1,9129,"*"],[-1,9130,"\n**"],[1,9178,"\n*"],[-1,9178,""],[1,9723,""],[-1,9723,"其中"],[1,10295,"**"],[1,10302,"方"],[-1,10302,"\n"],[1,10705,""],[-1,10705,"方法"],[1,10790,"**"],[1,10797,"*"],[-1,10797,"\n"],[1,15858,""],[-1,15858,"**"],[1,19541,"··"],[-1,19541,""]],[19541,19541],[160,160]]],[1519707461715,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,15916,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52171135# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52171135# \"copy\")\n\n1.  /** \n2.  * 一个用来处理Element的工具 \n3.  */  \n4.  public interface Elements {  \n\n6.  /** \n7.  * 返回已给出其完全限定名称的包. \n8.  * \n9.  * @param name  完全限定的包名称；对于未命名的包，该参数为 \"\" \n10.  * @return 指定的包；如果没有找到这样的包，则返回 null \n11.  */  \n12.  PackageElement getPackageElement(CharSequence name);  \n\n14.  /** \n15.  * 返回已给出其规范名称的类型元素. \n16.  * \n17.  * @param name  规范名称 \n18.  * @return 指定的类型元素；如果没有找到这样的元素，则返回 null \n19.  */  \n20.  TypeElement getTypeElement(CharSequence name);  \n\n22.  /** \n23.  * 返回注释元素的值，包括默认值. \n24.  * 此值是以映射的形式返回的，该映射将元素与其相应的值关联。只包括那些注释中明确存在其值的元素，不包括那些隐式假定其默认值的元素。 \n25.  * 映射的顺序与值出现在注释源中的顺序匹配 \n26.  * \n27.  * @see AnnotationMirror#getElementValues() \n28.  * @param a  要检查的注释 \n29.  * @return 注释元素的值，包括默认值 \n30.  */  \n31.  Map<? extends ExecutableElement, ? extends AnnotationValue>  \n32.  getElementValuesWithDefaults(AnnotationMirror a);  \n\n34.  /** \n35.  * 返回元素的文档（\"Javadoc\"）注释文本 \n36.  * \n37.  * @param e  将被检查的元素 \n38.  * @return 元素的文档注释；如果没有，则返回 null \n39.  */  \n40.  String getDocComment(Element e);  \n\n42.  /** \n43.  * 如果元素已过时，则返回 true，否则返回 false. \n44.  * \n45.  * @param e  将被检查的元素 \n46.  * @return 如果元素已过时，则返回 true，否则返回 false \n47.  */  \n48.  boolean isDeprecated(Element e);  \n\n50.  /** \n51.  * 返回类型元素的二进制名称. \n52.  * \n53.  * @param type  将被检查的类型元素 \n54.  * @return 二进制名称 \n55.  */  \n56.  Name getBinaryName(TypeElement type);  \n\n58.  /** \n59.  * 返回元素的包。包的包是它本身. \n60.  * \n61.  * @param type 将被检查的元素 \n62.  * @return 元素的包 \n63.  */  \n64.  PackageElement getPackageOf(Element type);  \n\n66.  /** \n67.  * 返回类型元素的所有成员，不管是继承的还是直接声明的。对于一个类，结果还包括其构造方法，但不包括局部类或匿名类. \n68.  * \n69.  * 注意，使用 ElementFilter 中的方法可以隔离某个种类的元素. \n70.  * \n71.  * @param type  将被检查的类型 \n72.  * @return 类型的所有成员 \n73.  */  \n74.  List<? extends Element> getAllMembers(TypeElement type);  \n\n76.  /** \n77.  * 返回元素的所有注释，不管是继承的还是直接存在的. \n78.  * \n79.  * @param e  将被检查的元素 \n80.  * @return 元素的所有注释 \n81.  */  \n82.  List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e);  \n\n84.  /** \n85.  * 测试一个类型、方法或字段是否隐藏了另一个类型、方法或字段. \n86.  * \n87.  * @param hider   第一个元素 \n88.  * @param hidden  第二个元素 \n89.  * @return 当且仅当第一个元素隐藏了第二个元素时返回 true \n90.  */  \n91.  boolean hides(Element hider, Element hidden);  \n\n93.  /** \n94.  * 测试一个方法（作为给定类型的成员）是否重写了另一个方法。当非抽象方法重写抽象方法时，还可以说成是前者实现 了后者. \n95.  * \n96.  * @param overrider  第一个方法，可能是 overrider \n97.  * @param overridden  第二个方法，可能被重写 \n98.  * @param type   第一个方法是其成员的类型 \n99.  * @return 当且仅当第一个方法重写第二个方法时返回 true \n100.  */  \n101.  boolean overrides(ExecutableElement overrider, ExecutableElement overridden,  \n102.  TypeElement type);  \n\n104.  /** \n105.  * 返回表示基本值或字符串的常量表达式 文本。返回文本的形式是一种适合于表示源代码中的值的形式. \n106.  * \n107.  * @param value  基本值或字符串 \n108.  * @return 常量表达式的文本 \n109.  * @throws IllegalArgumentException 如果参数不是基本值或字符串 \n110.  * \n111.  * @see VariableElement#getConstantValue() \n112.  */  \n113.  String getConstantExpression(Object value);  \n\n115.  /** \n116.  * 按指定顺序将元素的表示形式打印到给定 writer。此方法的主要用途是诊断。输出的具体格式没有 指定并且是可以更改的. \n117.  * \n118.  * @param w 输出打印到的 writer \n119.  * @param elements 要打印的元素 \n120.  */  \n121.  void printElements(java.io.Writer w, Element... elements);  \n\n123.  /** \n124.  * 返回与参数具有相同字符序列的名称. \n125.  * \n126.  * @param cs 将以名称形式返回的字符序列 \n127.  * @return 返回与参数具有相同字符序列的名称 \n128.  */  \n129.  Name getName(CharSequence cs);  \n\n131.  /** \n132.  * 如果类型是一个泛型接口则返回 true，否则返回 false \n133.  * \n134.  * @param type 将被检查的类型 \n135.  * @return 如果类型是一个泛型接口则返回 true，否则返回 false \n136.  * @since 1.8 \n137.  */  \n138.  boolean isFunctionalInterface(TypeElement type);  \n139.  }"],[1,19549,"```java"]],[15916,19549],[15923,15923]]],[1519707461880,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,15923,"\n\n"]],[15923,15923],[15924,15924]]],[1519707462577,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,15924,"\n"],[1,15925,"```"]],[15924,15924],[15927,15927]]],[1519707463360,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,15924,"\n"]],[15924,15924],[15925,15925]]],[1519707464432,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,15924,"/** \r\n * 一个用来处理Element的工具 \r\n */  \r\npublic interface Elements {  \r\n  \r\n    /** \r\n     * 返回已给出其完全限定名称的包. \r\n     * \r\n     * @param name  完全限定的包名称；对于未命名的包，该参数为 \"\" \r\n     * @return 指定的包；如果没有找到这样的包，则返回 null \r\n     */  \r\n    PackageElement getPackageElement(CharSequence name);  \r\n  \r\n    /** \r\n     * 返回已给出其规范名称的类型元素. \r\n     * \r\n     * @param name  规范名称 \r\n     * @return 指定的类型元素；如果没有找到这样的元素，则返回 null \r\n     */  \r\n    TypeElement getTypeElement(CharSequence name);  \r\n  \r\n    /** \r\n     * 返回注释元素的值，包括默认值. \r\n     * 此值是以映射的形式返回的，该映射将元素与其相应的值关联。只包括那些注释中明确存在其值的元素，不包括那些隐式假定其默认值的元素。 \r\n     * 映射的顺序与值出现在注释源中的顺序匹配 \r\n     * \r\n     * @see AnnotationMirror#getElementValues() \r\n     * @param a  要检查的注释 \r\n     * @return 注释元素的值，包括默认值 \r\n     */  \r\n    Map<? extends ExecutableElement, ? extends AnnotationValue>  \r\n    getElementValuesWithDefaults(AnnotationMirror a);  \r\n  \r\n    /** \r\n     * 返回元素的文档（\"Javadoc\"）注释文本 \r\n     * \r\n     * @param e  将被检查的元素 \r\n     * @return 元素的文档注释；如果没有，则返回 null \r\n     */  \r\n    String getDocComment(Element e);  \r\n  \r\n    /** \r\n     * 如果元素已过时，则返回 true，否则返回 false. \r\n     * \r\n     * @param e  将被检查的元素 \r\n     * @return 如果元素已过时，则返回 true，否则返回 false \r\n     */  \r\n    boolean isDeprecated(Element e);  \r\n  \r\n    /** \r\n     * 返回类型元素的二进制名称. \r\n     * \r\n     * @param type  将被检查的类型元素 \r\n     * @return 二进制名称 \r\n     */  \r\n    Name getBinaryName(TypeElement type);  \r\n  \r\n    /** \r\n     * 返回元素的包。包的包是它本身. \r\n     * \r\n     * @param type 将被检查的元素 \r\n     * @return 元素的包 \r\n     */  \r\n    PackageElement getPackageOf(Element type);  \r\n  \r\n    /** \r\n     * 返回类型元素的所有成员，不管是继承的还是直接声明的。对于一个类，结果还包括其构造方法，但不包括局部类或匿名类. \r\n     * \r\n     * 注意，使用 ElementFilter 中的方法可以隔离某个种类的元素. \r\n     * \r\n     * @param type  将被检查的类型 \r\n     * @return 类型的所有成员 \r\n     */  \r\n    List<? extends Element> getAllMembers(TypeElement type);  \r\n  \r\n    /** \r\n     * 返回元素的所有注释，不管是继承的还是直接存在的. \r\n     * \r\n     * @param e  将被检查的元素 \r\n     * @return 元素的所有注释 \r\n     */  \r\n    List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e);  \r\n  \r\n    /** \r\n     * 测试一个类型、方法或字段是否隐藏了另一个类型、方法或字段. \r\n     * \r\n     * @param hider   第一个元素 \r\n     * @param hidden  第二个元素 \r\n     * @return 当且仅当第一个元素隐藏了第二个元素时返回 true \r\n     */  \r\n    boolean hides(Element hider, Element hidden);  \r\n  \r\n    /** \r\n     * 测试一个方法（作为给定类型的成员）是否重写了另一个方法。当非抽象方法重写抽象方法时，还可以说成是前者实现 了后者. \r\n     * \r\n     * @param overrider  第一个方法，可能是 overrider \r\n     * @param overridden  第二个方法，可能被重写 \r\n     * @param type   第一个方法是其成员的类型 \r\n     * @return 当且仅当第一个方法重写第二个方法时返回 true \r\n     */  \r\n    boolean overrides(ExecutableElement overrider, ExecutableElement overridden,  \r\n                      TypeElement type);  \r\n  \r\n    /** \r\n     * 返回表示基本值或字符串的常量表达式 文本。返回文本的形式是一种适合于表示源代码中的值的形式. \r\n     * \r\n     * @param value  基本值或字符串 \r\n     * @return 常量表达式的文本 \r\n     * @throws IllegalArgumentException 如果参数不是基本值或字符串 \r\n     * \r\n     * @see VariableElement#getConstantValue() \r\n     */  \r\n    String getConstantExpression(Object value);  \r\n  \r\n    /** \r\n     * 按指定顺序将元素的表示形式打印到给定 writer。此方法的主要用途是诊断。输出的具体格式没有 指定并且是可以更改的. \r\n     * \r\n     * @param w 输出打印到的 writer \r\n     * @param elements 要打印的元素 \r\n     */  \r\n    void printElements(java.io.Writer w, Element... elements);  \r\n  \r\n    /** \r\n     * 返回与参数具有相同字符序列的名称. \r\n     * \r\n     * @param cs 将以名称形式返回的字符序列 \r\n     * @return 返回与参数具有相同字符序列的名称 \r\n     */  \r\n    Name getName(CharSequence cs);  \r\n  \r\n    /** \r\n     * 如果类型是一个泛型接口则返回 true，否则返回 false \r\n     * \r\n     * @param type 将被检查的类型 \r\n     * @return 如果类型是一个泛型接口则返回 true，否则返回 false \r\n     * @since 1.8 \r\n     */  \r\n    boolean isFunctionalInterface(TypeElement type);  \r\n}  "]],[15924,15924],[19482,19482]]]]]]}