{"compress":true,"commitItems":[["1e4edcc5-388c-4c5d-8874-525d9155b45a",1519702698279,"",[[1519702688855,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,0,"自定义注解之运行时注解(RetentionPolicy.RUNTIME)\n===\n\n\n"]],[0,0],[43,43]]],[1519702697445,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,0,"对注解概念不了解的可以先看这个：[Java注解基础概念总结](http://blog.csdn.net/github_35180164/article/details/52107204)\n\n前面有提到注解按生命周期来划分可分为3类：\n\n1、RetentionPolicy.SOURCE：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；\n2、RetentionPolicy.CLASS：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期；\n3、RetentionPolicy.RUNTIME：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在； \n\n这3个生命周期分别对应于：Java源文件(.java文件) ---> .class文件 ---> 内存中的字节码。\n\n那怎么来选择合适的注解生命周期呢？\n\n首先要明确生命周期长度 **SOURCE < CLASS < RUNTIME** ，所以前者能作用的地方后者一定也能作用。一般如果需要在运行时去动态获取注解信息，那只能用 RUNTIME 注解；如果要在编译时进行一些预处理操作，比如生成一些辅助代码（如 [ButterKnife](https://github.com/JakeWharton/butterknife)），就用 CLASS注解；如果只是做一些检查性的操作，比如** @Override** 和 **@SuppressWarnings**，则可选用 SOURCE 注解。\n\n下面来介绍下运行时注解的简单运用。\n\n**获取注解**\n\n你需要通过反射来获取运行时注解，可以从 Package、Class、Field、Method...上面获取，基本方法都一样，几个常见的方法如下：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52118286# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52118286# \"copy\")\n\n1.  /** \n2.  * 获取指定类型的注解 \n3.  */  \n4.  public <A extends Annotation> A getAnnotation(Class<A> annotationType);  \n\n6.  /** \n7.  * 获取所有注解，如果有的话 \n8.  */  \n9.  public Annotation[] getAnnotations();  \n\n11.  /** \n12.  * 获取所有注解，忽略继承的注解 \n13.  */  \n14.  public Annotation[] getDeclaredAnnotations();  \n\n16.  /** \n17.  * 指定注解是否存在该元素上，如果有则返回true，否则false \n18.  */  \n19.  public boolean isAnnotationPresent(Class<? extends Annotation> annotationType);  \n\n21.  /** \n22.  * 获取Method中参数的所有注解 \n23.  */  \n24.  public Annotation[][] getParameterAnnotations();  \n\n要使用这些函数必须先通过反射获取到对应的元素：Class、Field、Method 等。\n\n**"],[-1,5,"之"],[1,6,"**\n\n来看下自定义注解的简单使用方式，这里先定义3个"],[1,11,"：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52118286# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52118286# \"copy\")\n\n1.  // 适用类、接口（包括注解类型）或枚举  \n2.  @Retention"],[1,36,"  "],[1,37,"3.  @Target(ElementType.TYPE)  \n4.  public @interface ClassInfo {  \n5.  String value();  \n6.  }  \n7.  // 适用field属性，也包括enum常量  \n8.  @Retention(RetentionPolicy.RUNTIME)  \n9.  @Target(ElementType.FIELD)  \n10.  public @interface FieldInfo {  \n11.  int[] value();  \n12.  }  \n13.  // 适用方法  \n14.  @Retention(RetentionPolicy.RUNTIME)  \n15.  @Target(ElementType.METHOD)  \n16.  public @interface MethodInfo {  \n17.  String name() default \"long\";  \n18.  String data();  \n19.  int age() default 27;  \n20.  }  \n\n这3个注解分别适用于不同的元素，并都带有不同的属性，在使用注解是需要设置这些属性值。\n\n再定义一个测试类来使用这些注解：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52118286# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52118286# \"copy\")\n\n1.  /** \n2.  * 测试运行时注解 \n3.  */  \n4.  @ClassInfo(\"Test Class\")  \n5.  public class TestRuntimeAnnotation {  \n\n7.  @FieldInfo(value "],[1,38," {1, 2})  \n8.  public String fieldInfo "],[1,39," \"FiledInfo\";  \n\n10.  @FieldInfo(value "],[1,40," {10086})  "],[1,41,"11.  public int i = 100;  "],[1,43,"13.  @MethodInfo(name = \"BlueBird\", data = \"Big\")  \n14.  public static String getMethodInfo() {  \n15.  return TestRuntimeAnnotation.class.getSimpleName();  \n16.  }  \n17.  }  \n\n使用还是很简单的，最后来看怎么在代码中获取注解信息：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52118286# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52118286# \"copy\")\n\n1.  /** \n2.  * 测试运行时注解 \n3.  */  \n4.  private void _testRuntimeAnnotation() {  \n5.  StringBuffer sb = new StringBuffer();  \n6.  Class<?> cls = TestRuntimeAnnotation.class;  \n7.  Constructor<?>[] constructors = cls.getConstructors();  \n8.  // 获取指定类型的注解  \n9.  sb.append(\"Class注解：\").append(\"\\n\");  \n10.  ClassInfo classInfo = cls.getAnnotation(ClassInfo.class);  \n11.  if (classInfo != null) {  \n12.  sb.append(Modifier.toString(cls.getModifiers())).append(\" \")  \n13.  .append(cls.getSimpleName()).append(\"\\n\");  \n14.  sb.append(\"注解值: \").append(classInfo.value()).append(\"\\n\\n\");  \n15.  }  \n\n17.  sb.append(\"Field注解：\").append(\"\\n\");  \n18.  Field[] fields = cls.getDeclaredFields();  \n19.  for (Field field : fields) {  \n20.  FieldInfo fieldInfo = field.getAnnotation(FieldInfo.class);  \n21.  if (fieldInfo != null) {  \n22.  sb.append(Modifier.toString(field.getModifiers())).append(\" \")  \n23.  .append(field.getType().getSimpleName()).append(\" \")  \n24.  .append(field.getName()).append(\"\\n\");  \n25.  sb.append(\"注解值: \").append(Arrays.toString(fieldInfo.value())).append(\"\\n\\n\");  \n26.  }  \n27.  }  \n\n29.  sb.append(\"Method注解：\").append(\"\\n\");  \n30.  Method[] methods = cls.getDeclaredMethods();  \n31.  for (Method method : methods) {  \n32.  MethodInfo methodInfo = method.getAnnotation(MethodInfo.class);  \n33.  if (methodInfo != null) {  \n34.  sb.append(Modifier.toString(method.getModifiers())).append(\" \")  \n35.  .append(method.getReturnType().getSimpleName()).append(\" \")  \n36.  .append(method.getName()).append(\"\\n\");  \n37.  sb.append(\"注解值: \").append(\"\\n\");  \n38.  sb.append(\"name: \").append(methodInfo.name()).append(\"\\n\");  \n39.  sb.append(\"data: \").append(methodInfo.data()).append(\"\\n\");  \n40.  sb.append(\"age: \").append(methodInfo.age()).append(\"\\n\");  \n41.  }  \n42.  }  \n\n44.  System.out.print(sb.toString());  \n45.  }  \n\n所做的操作都是通过反射获取对应元素，再获取元素上面的注解，最后得到注解的属性值。\n\n看一下输出情况，这里我直接显示在手机上：\n\n![](http://img.blog.csdn.net/20160804145145432?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n这个自定义运行时注解是很简单的例子，有很多优秀的开源项目都有使用运行时注解来处理问题，有兴趣可以找一些来研究。因为涉及到反射，所以运行时注解的效率多少会受到影响，现在很多的开源项目使用的是编译时注解，关于编译时注解后面再来详细介绍。"]],[0,43],[5375,5375]]],[1519702711985,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,358," "],[1,359," "],[-1,363," "],[1,364," "],[-1,404," "],[1,405," "],[-1,433," "],[1,434," "],[-1,478," "],[1,479," "],[-1,519," "],[1,520," "],[-1,581," "],[1,582," "],[-1,608," "],[1,609," "],[-1,620," 和 "],[1,623," 和 "],[-1,649," "],[1,650," "],[-1,765,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52118286# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52118286# \"copy\")\n\n"],[-1,952," "],[1,953," "],[-1,959," "],[1,960," "],[-1,969," "],[1,970," "],[-1,977,"  "],[1,979,"  "],[-1,990," <A "],[1,994," <A "],[-1,1001," "],[1,1002," "],[-1,1013," A "],[1,1016," A "],[-1,1038," "],[1,1039," "],[-1,1055,"  "],[1,1057,"  "],[-1,1066," "],[1,1067," "],[-1,1073," "],[1,1074," "],[-1,1086," "],[1,1087," "],[-1,1094,"  "],[1,1096,"  "],[-1,1107," "],[1,1108," "],[-1,1120," "],[1,1121," "],[-1,1138,"  "],[1,1140,"  "],[-1,1150," "],[1,1151," "],[-1,1158," "],[1,1159," "],[-1,1173," "],[1,1174," "],[-1,1182,"  "],[1,1184,"  "],[-1,1196," "],[1,1197," "],[-1,1209," "],[1,1210," "],[-1,1235,"  "],[1,1237,"  "],[-1,1247," "],[1,1248," "],[-1,1255," "],[1,1256," "],[-1,1287," "],[1,1288," "],[-1,1296,"  "],[1,1298,"  "],[-1,1310," "],[1,1311," "],[-1,1318," "],[1,1319," "],[-1,1346," "],[1,1347," "],[-1,1354," "],[1,1355," "],[-1,1366," "],[1,1367," "],[-1,1383,"  "],[1,1385,"  "],[-1,1395," "],[1,1396," "],[-1,1403," "],[1,1404," "],[-1,1420," "],[1,1421," "],[-1,1429,"  "],[1,1431,"  "],[-1,1443," "],[1,1444," "],[-1,1458," "],[1,1459," "],[-1,1485,"  "],[1,1487,"  "],[-1,1587," "],[1,1588," "],[-1,1677," "],[1,1678," "],[-1,1763," "],[1,1764," "],[-1,1781,"  "],[1,1783,"  "],[-1,1823,"  "],[1,1825,"  "],[-1,1855,"  "],[1,1857,"  "],[-1,1868," "],[1,1869," "],[-1,1879," "],[1,1880," "],[-1,1889," {  "],[1,1893," {  "],[-1,1904," "],[1,1905," "],[-1,1913,"  "],[1,1915,"  "],[-1,1921,"  "],[1,1923,"  "],[-1,1930," "],[1,1931," "],[-1,1950,"  "],[1,1952,"  "],[-1,1992,"  "],[1,1994,"  "],[-1,2025,"  "],[1,2027,"  "],[-1,2039," "],[1,2040," "],[-1,2050," "],[1,2051," "],[-1,2060," {  "],[1,2064," {  "],[-1,2075," "],[1,2076," "],[-1,2084,"  "],[1,2086,"  "],[-1,2093,"  "],[1,2095,"  "],[-1,2103," "],[1,2104," "],[-1,2108,"  "],[1,2110,"  "],[-1,2151,"  "],[1,2153,"  "],[-1,2186,"  "],[1,2188,"  "],[-1,2200," "],[1,2201," "],[-1,2211," "],[1,2212," "],[-1,2222," {  "],[1,2226," {  "],[-1,2238," "],[1,2239," "],[-1,2245," "],[1,2246," "],[-1,2253," "],[1,2254," "],[-1,2261,"  "],[1,2263,"  "],[-1,2275," "],[1,2276," "],[-1,2283,"  "],[1,2285,"  "],[-1,2294," "],[1,2295," "],[-1,2300," "],[1,2301," "],[-1,2308," 27;  "],[1,2314," 27;  "],[-1,2321,"  "],[1,2323,"  "],[-1,2397," "],[1,2398," "],[-1,2487," "],[1,2488," "],[-1,2574," "],[1,2575," "],[-1,2581," "],[1,2582," "],[-1,2589," "],[1,2590," "],[-1,2597,"  "],[1,2599,"  "],[-1,2620," "],[1,2621," "],[-1,2628,"  "],[1,2630,"  "],[-1,2641," "],[1,2642," "],[-1,2647," "],[1,2648," "],[-1,2669," {  "],[1,2673," {  "],[-1,2695," = {1, 2})  "],[1,2707," = {1, 2})  "],[-1,2718," "],[1,2719," "],[-1,2725," "],[1,2726," "],[-1,2735," = "],[1,2738," = "],[-1,2750,"  "],[1,2752,"  "],[-1,2775," = "],[1,2778," = "],[-1,2786,"  "],[1,2788,"  "],[-1,2800," int i = "],[1,2809," int i = "],[-1,2813,"  "],[1,2815,"  "],[-1,2838," = "],[1,2841," = "],[-1,2852," "],[1,2853," "],[-1,2857," = "],[1,2860," = "],[-1,2866,"  "],[1,2868,"  "],[-1,2880," "],[1,2881," "],[-1,2887," "],[1,2888," "],[-1,2894," "],[1,2895," "],[-1,2910," {  "],[1,2914," {  "],[-1,2926," "],[1,2927," "],[-1,2971,"  "],[1,2973,"  "],[-1,2980,"  "],[1,2982,"  "],[-1,2989,"  "],[1,2991,"  "],[-1,3031," "],[1,3032," "],[-1,3121," "],[1,3122," "],[-1,3208," "],[1,3209," "],[-1,3215," "],[1,3216," "],[-1,3223," "],[1,3224," "],[-1,3231,"  "],[1,3233,"  "],[-1,3245," "],[1,3246," "],[-1,3250," "],[1,3251," "],[-1,3275," {  "],[1,3279," {  "],[-1,3296," sb = new "],[1,3306," sb = new "],[-1,3321,"  "],[1,3323,"  "],[-1,3336," cls = "],[1,3343," cls = "],[-1,3371,"  "],[1,3373,"  "],[-1,3394," "],[1,3395," "],[-1,3407," = "],[1,3410," = "],[-1,3432,"  "],[1,3434,"  "],[-1,3441," "],[1,3442," "],[-1,3451,"  "],[1,3453,"  "],[-1,3493,"  "],[1,3495,"  "],[-1,3510," "],[1,3511," "],[-1,3520," = "],[1,3523," = "],[-1,3558,"  "],[1,3560,"  "],[-1,3568," "],[1,3569," "],[-1,3579," != "],[1,3583," != "],[-1,3588," {  "],[1,3592," {  "],[-1,3655," \")  "],[1,3660," \")  "],[-1,3708,"  "],[1,3710,"  "],[-1,3731," "],[1,3732," "],[-1,3776,"  "],[1,3778,"  "],[-1,3785,"  "],[1,3787,"  "],[-1,3829,"  "],[1,3831,"  "],[-1,3844," "],[1,3845," "],[-1,3851," = "],[1,3854," = "],[-1,3878,"  "],[1,3880,"  "],[-1,3889," "],[1,3890," "],[-1,3896," "],[1,3897," "],[-1,3902," : "],[1,3905," : "],[-1,3912," {  "],[1,3916," {  "],[-1,3931," "],[1,3932," "],[-1,3941," = "],[1,3944," = "],[-1,3981,"  "],[1,3983,"  "],[-1,3991," "],[1,3992," "],[-1,4002," != "],[1,4006," != "],[-1,4011," {  "],[1,4015," {  "],[-1,4080," \")  "],[1,4085," \")  "],[-1,4140," \")  "],[1,4145," \")  "],[-1,4189,"  "],[1,4191,"  "],[-1,4212," "],[1,4213," "],[-1,4274,"  "],[1,4276,"  "],[-1,4283,"  "],[1,4285,"  "],[-1,4292,"  "],[1,4294,"  "],[-1,4337,"  "],[1,4339,"  "],[-1,4353," "],[1,4354," "],[-1,4361," = "],[1,4364," = "],[-1,4389,"  "],[1,4391,"  "],[-1,4400," "],[1,4401," "],[-1,4408," "],[1,4409," "],[-1,4415," : "],[1,4418," : "],[-1,4426," {  "],[1,4430," {  "],[-1,4446," "],[1,4447," "],[-1,4457," = "],[1,4460," = "],[-1,4499,"  "],[1,4501,"  "],[-1,4509," "],[1,4510," "],[-1,4521," != "],[1,4525," != "],[-1,4530," {  "],[1,4534," {  "],[-1,4600," \")  "],[1,4605," \")  "],[-1,4667," \")  "],[1,4672," \")  "],[-1,4717,"  "],[1,4719,"  "],[-1,4740," "],[1,4741," "],[-1,4757,"  "],[1,4759,"  "],[-1,4781," "],[1,4782," "],[-1,4824,"  "],[1,4826,"  "],[-1,4848," "],[1,4849," "],[-1,4891,"  "],[1,4893,"  "],[-1,4914," "],[1,4915," "],[-1,4956,"  "],[1,4958,"  "],[-1,4965,"  "],[1,4967,"  "],[-1,4974,"  "],[1,4976,"  "],[-1,5015,"  "],[1,5017,"  "],[-1,5024,"  "],[1,5026,"  "]],[764,944],[764,764]]],[1519702826883,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,764,"\n1.  /** \n2.  * 获取指定类型的注解 \n3.  */  \n4.  public <A extends Annotation> A getAnnotation(Class<A> annotationType);  \n\n6.  /** \n7.  * 获取所有注解，如果有的话 \n8.  */  \n9.  public Annotation[] getAnnotations();  \n\n11.  /** \n12.  * 获取所有注解，忽略继承的注解 \n13.  */  \n14.  public Annotation[] getDeclaredAnnotations();  \n\n16.  /** \n17.  * 指定注解是否存在该元素上，如果有则返回true，否则false \n18.  */  \n19.  public boolean isAnnotationPresent(Class<? extends Annotation> annotationType);  \n\n21.  /** \n22.  * 获取Method中参数的所有注解 \n23.  */  \n24.  public Annotation[][] getParameterAnnotations();  "],[1,1307,"···"]],[764,1307],[767,767]]],[1519702827694,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,764,"···"]],[767,767],[764,764]]],[1519702829494,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,764,"```java"]],[764,764],[771,771]]],[1519702829686,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,773,"\n"]],[771,771],[772,772]]],[1519702830551,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,772,"```"]],[772,772],[775,775]]],[1519702831533,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,772,"\n"]],[772,772],[773,773]]],[1519702833262,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,772,"/** \r\n * 获取指定类型的注解 \r\n */  \r\npublic <A extends Annotation> A getAnnotation(Class<A> annotationType);  \r\n  \r\n/** \r\n * 获取所有注解，如果有的话 \r\n */  \r\npublic Annotation[] getAnnotations();  \r\n  \r\n/** \r\n * 获取所有注解，忽略继承的注解 \r\n */  \r\npublic Annotation[] getDeclaredAnnotations();  \r\n  \r\n/** \r\n * 指定注解是否存在该元素上，如果有则返回true，否则false \r\n */  \r\npublic boolean isAnnotationPresent(Class<? extends Annotation> annotationType);  \r\n  \r\n/** \r\n * 获取Method中参数的所有注解 \r\n */  \r\npublic Annotation[][] getParameterAnnotations();"]],[772,772],[1261,1261]]],[1519702841317,[null,[[-1,776,"\r"],[1,777,"\n"],[-1,791,"\r"],[1,792,"\n"],[-1,798,"\r"],[1,799,"\n"],[-1,873,"\r\n  \r"],[1,878,"\n\n  \n"],[-1,883,"\r"],[1,884,"\n"],[-1,901,"\r"],[1,902,"\n"],[-1,908,"\r"],[1,909,"\n"],[-1,949,"\r\n  \r"],[1,954,"\n\n  \n"],[-1,959,"\r"],[1,960,"\n"],[-1,979,"\r"],[1,980,"\n"],[-1,986,"\r"],[1,987,"\n"],[-1,1035,"\r\n  \r"],[1,1040,"\n\n  \n"],[-1,1045,"\r"],[1,1046,"\n"],[-1,1082,"\r"],[1,1083,"\n"],[-1,1089,"\r"],[1,1090,"\n"],[-1,1172,"\r\n  \r"],[1,1177,"\n\n  \n"],[-1,1182,"\r"],[1,1183,"\n"],[-1,1204,"\r"],[1,1205,"\n"],[-1,1211,"\r"],[1,1212,"\n"]],[776,776],[1213,1213]]],[1519702841317,[null,[[1,776,"\r"],[-1,776,"\n"],[1,791,"\r"],[-1,791,"\n"],[1,798,"\r"],[-1,798,"\n"],[1,873,"\r\n  \r"],[-1,873,"\n\n  \n"],[1,883,"\r"],[-1,883,"\n"],[1,901,"\r"],[-1,901,"\n"],[1,908,"\r"],[-1,908,"\n"],[1,949,"\r\n  \r"],[-1,949,"\n\n  \n"],[1,959,"\r"],[-1,959,"\n"],[1,979,"\r"],[-1,979,"\n"],[1,986,"\r"],[-1,986,"\n"],[1,1035,"\r\n  \r"],[-1,1035,"\n\n  \n"],[1,1045,"\r"],[-1,1045,"\n"],[1,1082,"\r"],[-1,1082,"\n"],[1,1089,"\r"],[-1,1089,"\n"],[1,1172,"\r\n  \r"],[-1,1172,"\n\n  \n"],[1,1182,"\r"],[-1,1182,"\n"],[1,1204,"\r"],[-1,1204,"\n"],[1,1211,"\r"],[-1,1211,"\n"]],[1213,1213],[776,776]]],[1519702837449,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,772,"/** \r\n * 获取指定类型的注解 \r\n */  \r\npublic <A extends Annotation> A getAnnotation(Class<A> annotationType);  \r\n  \r\n/** \r\n * 获取所有注解，如果有的话 \r\n */  \r\npublic Annotation[] getAnnotations();  \r\n  \r\n/** \r\n * 获取所有注解，忽略继承的注解 \r\n */  \r\npublic Annotation[] getDeclaredAnnotations();  \r\n  \r\n/** \r\n * 指定注解是否存在该元素上，如果有则返回true，否则false \r\n */  \r\npublic boolean isAnnotationPresent(Class<? extends Annotation> annotationType);  \r\n  \r\n/** \r\n * 获取Method中参数的所有注解 \r\n */  \r\npublic Annotation[][] getParameterAnnotations();"]],[1261,1261],[772,772]]],[1519702840399,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,772,"/** \r\n * 获取指定类型的注解 \r\n */  \r\npublic <A extends Annotation> A getAnnotation(Class<A> annotationType);  \r\n  \r\n/** \r\n * 获取所有注解，如果有的话 \r\n */  \r\npublic Annotation[] getAnnotations();  \r\n  \r\n/** \r\n * 获取所有注解，忽略继承的注解 \r\n */  \r\npublic Annotation[] getDeclaredAnnotations();  \r\n  \r\n/** \r\n * 指定注解是否存在该元素上，如果有则返回true，否则false \r\n */  \r\npublic boolean isAnnotationPresent(Class<? extends Annotation> annotationType);  \r\n  \r\n/** \r\n * 获取Method中参数的所有注解 \r\n */  \r\npublic Annotation[][] getParameterAnnotations();"]],[772,772],[1261,1261]]],[1519702843718,[null,[[-1,776,"\r"],[1,777,"\n"],[-1,791,"\r"],[1,792,"\n"],[-1,798,"\r"],[1,799,"\n"],[-1,873,"\r\n  \r"],[1,878,"\n\n  \n"],[-1,883,"\r"],[1,884,"\n"],[-1,901,"\r"],[1,902,"\n"],[-1,908,"\r"],[1,909,"\n"],[-1,949,"\r\n  \r"],[1,954,"\n\n  \n"],[-1,959,"\r"],[1,960,"\n"],[-1,979,"\r"],[1,980,"\n"],[-1,986,"\r"],[1,987,"\n"],[-1,1035,"\r\n  \r"],[1,1040,"\n\n  \n"],[-1,1045,"\r"],[1,1046,"\n"],[-1,1082,"\r"],[1,1083,"\n"],[-1,1089,"\r"],[1,1090,"\n"],[-1,1172,"\r\n  \r"],[1,1177,"\n\n  \n"],[-1,1182,"\r"],[1,1183,"\n"],[-1,1204,"\r"],[1,1205,"\n"],[-1,1211,"\r"],[1,1212,"\n"]],[776,776],[1213,1213]]],[1519702843718,[null,[[1,776,"\r"],[-1,776,"\n"],[1,791,"\r"],[-1,791,"\n"],[1,798,"\r"],[-1,798,"\n"],[1,873,"\r\n  \r"],[-1,873,"\n\n  \n"],[1,883,"\r"],[-1,883,"\n"],[1,901,"\r"],[-1,901,"\n"],[1,908,"\r"],[-1,908,"\n"],[1,949,"\r\n  \r"],[-1,949,"\n\n  \n"],[1,959,"\r"],[-1,959,"\n"],[1,979,"\r"],[-1,979,"\n"],[1,986,"\r"],[-1,986,"\n"],[1,1035,"\r\n  \r"],[-1,1035,"\n\n  \n"],[1,1045,"\r"],[-1,1045,"\n"],[1,1082,"\r"],[-1,1082,"\n"],[1,1089,"\r"],[-1,1089,"\n"],[1,1172,"\r\n  \r"],[-1,1172,"\n\n  \n"],[1,1182,"\r"],[-1,1182,"\n"],[1,1204,"\r"],[-1,1204,"\n"],[1,1211,"\r"],[-1,1211,"\n"]],[1213,1213],[776,776]]],[1519702843399,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,776,"\r"],[-1,791,"\r"],[-1,798,"\r"],[-1,873,"\r"],[-1,877,"\r"],[-1,883,"\r"],[-1,901,"\r"],[-1,908,"\r"],[-1,949,"\r"],[-1,953,"\r"],[-1,959,"\r"],[-1,979,"\r"],[-1,986,"\r"],[-1,1035,"\r"],[-1,1039,"\r"],[-1,1045,"\r"],[-1,1082,"\r"],[-1,1089,"\r"],[-1,1172,"\r"],[-1,1176,"\r"],[-1,1182,"\r"],[-1,1204,"\r"],[-1,1211,"\r"],[1,1262,""],[-1,1265,"\n"]],[1242,1242],[1242,1242]]],[1519702846214,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1331,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52118286# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52118286# \"copy\")\n\n"]],[1330,1510],[1330,1330]]],[1519702911834,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1266,"**"]],[1266,1266],[1268,1268]]],[1519702912908,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1287,"**"]],[1287,1287],[1289,1289]]],[1519702934875,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1335,"1.  // 适用类、接口（包括注解类型）或枚举  \n2.  @Retention(RetentionPolicy.RUNTIME)  \n3.  @Target(ElementType.TYPE)  \n4.  public @interface ClassInfo {  \n5.  String value();  \n6.  }  \n7.  // 适用field属性，也包括enum常量  \n8.  @Retention(RetentionPolicy.RUNTIME)  \n9.  @Target(ElementType.FIELD)  \n10.  public @interface FieldInfo {  \n11.  int[] value();  \n12.  }  \n13.  // 适用方法  \n14.  @Retention(RetentionPolicy.RUNTIME)  \n15.  @Target(ElementType.METHOD)  \n16.  public @interface MethodInfo {  \n17.  String name() default \"long\";  \n18.  String data();  \n19.  int age() default 27;  \n20.  }  \n"],[1,1902,"```java"]],[1335,1902],[1342,1342]]],[1519702935063,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1343,"\n"]],[1342,1342],[1343,1343]]],[1519702936088,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1343,"```"]],[1343,1343],[1346,1346]]],[1519702937169,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1343,"\n"]],[1343,1343],[1344,1344]]],[1519702938886,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1343,"// 适用类、接口（包括注解类型）或枚举  \r\n@Retention(RetentionPolicy.RUNTIME)  \r\n@Target(ElementType.TYPE)  \r\npublic @interface ClassInfo {  \r\n    String value();  \r\n}  \r\n// 适用field属性，也包括enum常量  \r\n@Retention(RetentionPolicy.RUNTIME)  \r\n@Target(ElementType.FIELD)  \r\npublic @interface FieldInfo {  \r\n    int[] value();  \r\n}  \r\n// 适用方法  \r\n@Retention(RetentionPolicy.RUNTIME)  \r\n@Target(ElementType.METHOD)  \r\npublic @interface MethodInfo {  \r\n    String name() default \"long\";  \r\n    String data();  \r\n    int age() default 27;  \r\n}  "]],[1343,1343],[1857,1857]]],[1519702982365,[null,[[-1,1365,"\r"],[1,1366,"\n"],[-1,1404,"\r"],[1,1405,"\n"],[-1,1433,"\r"],[1,1434,"\n"],[-1,1466,"\r"],[1,1467,"\n"],[-1,1489,"\r"],[1,1490,"\n"],[-1,1494,"\r"],[1,1495,"\n"],[-1,1520,"\r"],[1,1521,"\n"],[-1,1559,"\r"],[1,1560,"\n"],[-1,1589,"\r"],[1,1590,"\n"],[-1,1622,"\r"],[1,1623,"\n"],[-1,1644,"\r"],[1,1645,"\n"],[-1,1649,"\r"],[1,1650,"\n"],[-1,1660,"\r"],[1,1661,"\n"],[-1,1699,"\r"],[1,1700,"\n"],[-1,1730,"\r"],[1,1731,"\n"],[-1,1764,"\r"],[1,1765,"\n"],[-1,1801,"\r"],[1,1802,"\n"],[-1,1823,"\r"],[1,1824,"\n"],[-1,1852,"\r"],[1,1853,"\n"]],[1365,1365],[1854,1854]]],[1519702982366,[null,[[1,1365,"\r"],[-1,1365,"\n"],[1,1404,"\r"],[-1,1404,"\n"],[1,1433,"\r"],[-1,1433,"\n"],[1,1466,"\r"],[-1,1466,"\n"],[1,1489,"\r"],[-1,1489,"\n"],[1,1494,"\r"],[-1,1494,"\n"],[1,1520,"\r"],[-1,1520,"\n"],[1,1559,"\r"],[-1,1559,"\n"],[1,1589,"\r"],[-1,1589,"\n"],[1,1622,"\r"],[-1,1622,"\n"],[1,1644,"\r"],[-1,1644,"\n"],[1,1649,"\r"],[-1,1649,"\n"],[1,1660,"\r"],[-1,1660,"\n"],[1,1699,"\r"],[-1,1699,"\n"],[1,1730,"\r"],[-1,1730,"\n"],[1,1764,"\r"],[-1,1764,"\n"],[1,1801,"\r"],[-1,1801,"\n"],[1,1823,"\r"],[-1,1823,"\n"],[1,1852,"\r"],[-1,1852,"\n"]],[1854,1854],[1365,1365]]],[1519702978737,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1365,"\r"],[-1,1404,"\r"],[-1,1433,"\r"],[-1,1466,"\r"],[-1,1489,"\r"],[-1,1494,"\r"],[-1,1520,"\r"],[-1,1559,"\r"],[-1,1589,"\r"],[-1,1622,"\r"],[-1,1644,"\r"],[-1,1649,"\r"],[-1,1660,"\r"],[-1,1699,"\r"],[-1,1730,"\r"],[-1,1764,"\r"],[-1,1801,"\r"],[-1,1823,"\r"],[-1,1852,"\r"],[-1,1923,"\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52118286# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52118286# \"copy\")\n\n1.  /** \n2.  * 测试运行时注解 \n3.  */  \n4.  @ClassInfo(\"Test Class\")  \n5.  public class TestRuntimeAnnotation {  \n\n7.  @FieldInfo(value = {1, 2})  \n8.  public String fieldInfo = \"FiledInfo\";  \n\n10.  @FieldInfo(value = {10086})  \n11.  public int i = 100;  \n\n13.  @MethodInfo(name = \"BlueBird\", data = \"Big\")  \n14.  public static String getMethodInfo() {  \n15.  return TestRuntimeAnnotation.class.getSimpleName();  \n16.  }  \n17.  }  "],[1,2528,"```java"]],[1904,2509],[1911,1911]]],[1519702978969,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1913,"\n"]],[1911,1911],[1912,1912]]],[1519702980037,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1912,"```"]],[1912,1912],[1915,1915]]],[1519702980989,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1912,"\n"]],[1912,1912],[1913,1913]]],[1519702981886,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,1912,"/** \r\n * 测试运行时注解 \r\n */  \r\n@ClassInfo(\"Test Class\")  \r\npublic class TestRuntimeAnnotation {  \r\n  \r\n    @FieldInfo(value = {1, 2})  \r\n    public String fieldInfo = \"FiledInfo\";  \r\n  \r\n    @FieldInfo(value = {10086})  \r\n    public int i = 100;  \r\n  \r\n    @MethodInfo(name = \"BlueBird\", data = \"Big\")  \r\n    public static String getMethodInfo() {  \r\n        return TestRuntimeAnnotation.class.getSimpleName();  \r\n    }  \r\n}  "]],[1912,1912],[2333,2333]]],[1519703145867,[null,[[-1,1916,"\r"],[1,1917,"\n"],[-1,1929,"\r"],[1,1930,"\n"],[-1,1936,"\r"],[1,1937,"\n"],[-1,1964,"\r"],[1,1965,"\n"],[-1,2004,"\r\n  \r"],[1,2009,"\n\n  \n"],[-1,2042,"\r"],[1,2043,"\n"],[-1,2088,"\r\n  \r"],[1,2093,"\n\n  \n"],[-1,2127,"\r"],[1,2128,"\n"],[-1,2154,"\r\n  \r"],[1,2159,"\n\n  \n"],[-1,2210,"\r"],[1,2211,"\n"],[-1,2256,"\r"],[1,2257,"\n"],[-1,2319,"\r"],[1,2320,"\n"],[-1,2328,"\r"],[1,2329,"\n"]],[1916,1916],[2330,2330]]],[1519703145868,[null,[[1,1916,"\r"],[-1,1916,"\n"],[1,1929,"\r"],[-1,1929,"\n"],[1,1936,"\r"],[-1,1936,"\n"],[1,1964,"\r"],[-1,1964,"\n"],[1,2004,"\r\n  \r"],[-1,2004,"\n\n  \n"],[1,2042,"\r"],[-1,2042,"\n"],[1,2088,"\r\n  \r"],[-1,2088,"\n\n  \n"],[1,2127,"\r"],[-1,2127,"\n"],[1,2154,"\r\n  \r"],[-1,2154,"\n\n  \n"],[1,2210,"\r"],[-1,2210,"\n"],[1,2256,"\r"],[-1,2256,"\n"],[1,2319,"\r"],[-1,2319,"\n"],[1,2328,"\r"],[-1,2328,"\n"]],[2330,2330],[1916,1916]]],[1519703136088,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,1916,"\r"],[-1,1929,"\r"],[-1,1936,"\r"],[-1,1964,"\r"],[-1,2004,"\r"],[-1,2008,"\r"],[-1,2042,"\r"],[-1,2088,"\r"],[-1,2092,"\r"],[-1,2127,"\r"],[-1,2154,"\r"],[-1,2158,"\r"],[-1,2210,"\r"],[-1,2256,"\r"],[-1,2319,"\r"],[-1,2328,"\r"],[-1,2366,"\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52118286# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52118286# \"copy\")\n\n1.  /** \n2.  * 测试运行时注解 \n3.  */  \n4.  private void _testRuntimeAnnotation() {  \n5.  StringBuffer sb = new StringBuffer();  \n6.  Class<?> cls = TestRuntimeAnnotation.class;  \n7.  Constructor<?>[] constructors = cls.getConstructors();  \n8.  // 获取指定类型的注解  \n9.  sb.append(\"Class注解：\").append(\"\\n\");  \n10.  ClassInfo classInfo = cls.getAnnotation(ClassInfo.class);  \n11.  if (classInfo != null) {  \n12.  sb.append(Modifier.toString(cls.getModifiers())).append(\" \")  \n13.  .append(cls.getSimpleName()).append(\"\\n\");  \n14.  sb.append(\"注解值: \").append(classInfo.value()).append(\"\\n\\n\");  \n15.  }  \n\n17.  sb.append(\"Field注解：\").append(\"\\n\");  \n18.  Field[] fields = cls.getDeclaredFields();  \n19.  for (Field field : fields) {  \n20.  FieldInfo fieldInfo = field.getAnnotation(FieldInfo.class);  \n21.  if (fieldInfo != null) {  \n22.  sb.append(Modifier.toString(field.getModifiers())).append(\" \")  \n23.  .append(field.getType().getSimpleName()).append(\" \")  \n24.  .append(field.getName()).append(\"\\n\");  \n25.  sb.append(\"注解值: \").append(Arrays.toString(fieldInfo.value())).append(\"\\n\\n\");  \n26.  }  \n27.  }  \n\n29.  sb.append(\"Method注解：\").append(\"\\n\");  \n30.  Method[] methods = cls.getDeclaredMethods();  \n31.  for (Method method : methods) {  \n32.  MethodInfo methodInfo = method.getAnnotation(MethodInfo.class);  \n33.  if (methodInfo != null) {  \n34.  sb.append(Modifier.toString(method.getModifiers())).append(\" \")  \n35.  .append(method.getReturnType().getSimpleName()).append(\" \")  \n36.  .append(method.getName()).append(\"\\n\");  \n37.  sb.append(\"注解值: \").append(\"\\n\");  \n38.  sb.append(\"name: \").append(methodInfo.name()).append(\"\\n\");  \n39.  sb.append(\"data: \").append(methodInfo.data()).append(\"\\n\");  \n40.  sb.append(\"age: \").append(methodInfo.age()).append(\"\\n\");  \n41.  }  \n42.  }  \n\n44.  System.out.print(sb.toString());  \n45.  }  "]],[2351,4357],[2351,2351]]],[1519703139763,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2351,"```java"]],[2351,2351],[2358,2358]]],[1519703139959,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2359,"\n"]],[2358,2358],[2359,2359]]],[1519703140996,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2359,"```"]],[2359,2359],[2362,2362]]],[1519703145190,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2359,"\n"]],[2358,2358],[2359,2359]]],[1519703151700,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,2359,"/** \r\n * 测试运行时注解 \r\n */  \r\nprivate void _testRuntimeAnnotation() {  \r\n    StringBuffer sb = new StringBuffer();  \r\n    Class<?> cls = TestRuntimeAnnotation.class;  \r\n    Constructor<?>[] constructors = cls.getConstructors();  \r\n    // 获取指定类型的注解  \r\n    sb.append(\"Class注解：\").append(\"\\n\");  \r\n    ClassInfo classInfo = cls.getAnnotation(ClassInfo.class);  \r\n    if (classInfo != null) {  \r\n        sb.append(Modifier.toString(cls.getModifiers())).append(\" \")  \r\n                .append(cls.getSimpleName()).append(\"\\n\");  \r\n        sb.append(\"注解值: \").append(classInfo.value()).append(\"\\n\\n\");  \r\n    }  \r\n  \r\n    sb.append(\"Field注解：\").append(\"\\n\");  \r\n    Field[] fields = cls.getDeclaredFields();  \r\n    for (Field field : fields) {  \r\n        FieldInfo fieldInfo = field.getAnnotation(FieldInfo.class);  \r\n        if (fieldInfo != null) {  \r\n            sb.append(Modifier.toString(field.getModifiers())).append(\" \")  \r\n                    .append(field.getType().getSimpleName()).append(\" \")  \r\n                    .append(field.getName()).append(\"\\n\");  \r\n            sb.append(\"注解值: \").append(Arrays.toString(fieldInfo.value())).append(\"\\n\\n\");  \r\n        }  \r\n    }  \r\n  \r\n    sb.append(\"Method注解：\").append(\"\\n\");  \r\n    Method[] methods = cls.getDeclaredMethods();  \r\n    for (Method method : methods) {  \r\n        MethodInfo methodInfo = method.getAnnotation(MethodInfo.class);  \r\n        if (methodInfo != null) {  \r\n            sb.append(Modifier.toString(method.getModifiers())).append(\" \")  \r\n                    .append(method.getReturnType().getSimpleName()).append(\" \")  \r\n                    .append(method.getName()).append(\"\\n\");  \r\n            sb.append(\"注解值: \").append(\"\\n\");  \r\n            sb.append(\"name: \").append(methodInfo.name()).append(\"\\n\");  \r\n            sb.append(\"data: \").append(methodInfo.data()).append(\"\\n\");  \r\n            sb.append(\"age: \").append(methodInfo.age()).append(\"\\n\");  \r\n        }  \r\n    }  \r\n  \r\n    System.out.print(sb.toString());  \r\n}  "]],[2359,2359],[4347,4347]]],[1519703156267,[null,[[-1,2363,"\r"],[1,2364,"\n"],[-1,2376,"\r"],[1,2377,"\n"],[-1,2383,"\r"],[1,2384,"\n"],[-1,2426,"\r"],[1,2427,"\n"],[-1,2471,"\r"],[1,2472,"\n"],[-1,2522,"\r"],[1,2523,"\n"],[-1,2584,"\r"],[1,2585,"\n"],[-1,2604,"\r"],[1,2605,"\n"],[-1,2647,"\r"],[1,2648,"\n"],[-1,2712,"\r"],[1,2713,"\n"],[-1,2744,"\r"],[1,2745,"\n"],[-1,2816,"\r"],[1,2817,"\n"],[-1,2878,"\r"],[1,2879,"\n"],[-1,2950,"\r"],[1,2951,"\n"],[-1,2959,"\r\n  \r"],[1,2964,"\n\n  \n"],[-1,3006,"\r"],[1,3007,"\n"],[-1,3055,"\r"],[1,3056,"\n"],[-1,3091,"\r"],[1,3092,"\n"],[-1,3162,"\r"],[1,3163,"\n"],[-1,3198,"\r"],[1,3199,"\n"],[-1,3276,"\r"],[1,3277,"\n"],[-1,3352,"\r"],[1,3353,"\n"],[-1,3414,"\r"],[1,3415,"\n"],[-1,3507,"\r"],[1,3508,"\n"],[-1,3520,"\r"],[1,3521,"\n"],[-1,3529,"\r\n  \r"],[1,3534,"\n\n  \n"],[-1,3577,"\r"],[1,3578,"\n"],[-1,3629,"\r"],[1,3630,"\n"],[-1,3668,"\r"],[1,3669,"\n"],[-1,3743,"\r"],[1,3744,"\n"],[-1,3780,"\r"],[1,3781,"\n"],[-1,3859,"\r"],[1,3860,"\n"],[-1,3942,"\r"],[1,3943,"\n"],[-1,4005,"\r"],[1,4006,"\n"],[-1,4053,"\r"],[1,4054,"\n"],[-1,4128,"\r"],[1,4129,"\n"],[-1,4203,"\r"],[1,4204,"\n"],[-1,4276,"\r"],[1,4277,"\n"],[-1,4289,"\r"],[1,4290,"\n"],[-1,4298,"\r\n  \r"],[1,4303,"\n\n  \n"],[-1,4342,"\r"],[1,4343,"\n"]],[2363,2363],[4344,4344]]],[1519703156267,[null,[[1,2363,"\r"],[-1,2363,"\n"],[1,2376,"\r"],[-1,2376,"\n"],[1,2383,"\r"],[-1,2383,"\n"],[1,2426,"\r"],[-1,2426,"\n"],[1,2471,"\r"],[-1,2471,"\n"],[1,2522,"\r"],[-1,2522,"\n"],[1,2584,"\r"],[-1,2584,"\n"],[1,2604,"\r"],[-1,2604,"\n"],[1,2647,"\r"],[-1,2647,"\n"],[1,2712,"\r"],[-1,2712,"\n"],[1,2744,"\r"],[-1,2744,"\n"],[1,2816,"\r"],[-1,2816,"\n"],[1,2878,"\r"],[-1,2878,"\n"],[1,2950,"\r"],[-1,2950,"\n"],[1,2959,"\r\n  \r"],[-1,2959,"\n\n  \n"],[1,3006,"\r"],[-1,3006,"\n"],[1,3055,"\r"],[-1,3055,"\n"],[1,3091,"\r"],[-1,3091,"\n"],[1,3162,"\r"],[-1,3162,"\n"],[1,3198,"\r"],[-1,3198,"\n"],[1,3276,"\r"],[-1,3276,"\n"],[1,3352,"\r"],[-1,3352,"\n"],[1,3414,"\r"],[-1,3414,"\n"],[1,3507,"\r"],[-1,3507,"\n"],[1,3520,"\r"],[-1,3520,"\n"],[1,3529,"\r\n  \r"],[-1,3529,"\n\n  \n"],[1,3577,"\r"],[-1,3577,"\n"],[1,3629,"\r"],[-1,3629,"\n"],[1,3668,"\r"],[-1,3668,"\n"],[1,3743,"\r"],[-1,3743,"\n"],[1,3780,"\r"],[-1,3780,"\n"],[1,3859,"\r"],[-1,3859,"\n"],[1,3942,"\r"],[-1,3942,"\n"],[1,4005,"\r"],[-1,4005,"\n"],[1,4053,"\r"],[-1,4053,"\n"],[1,4128,"\r"],[-1,4128,"\n"],[1,4203,"\r"],[-1,4203,"\n"],[1,4276,"\r"],[-1,4276,"\n"],[1,4289,"\r"],[-1,4289,"\n"],[1,4298,"\r\n  \r"],[-1,4298,"\n\n  \n"],[1,4342,"\r"],[-1,4342,"\n"]],[4344,4344],[2363,2363]]],[1519703155955,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,2322,"\n"],[-1,2363,"\r"],[-1,2376,"\r"],[-1,2383,"\r"],[-1,2426,"\r"],[-1,2471,"\r"],[-1,2522,"\r"],[-1,2584,"\r"],[-1,2604,"\r"],[-1,2647,"\r"],[-1,2712,"\r"],[-1,2744,"\r"],[-1,2816,"\r"],[-1,2878,"\r"],[-1,2950,"\r"],[-1,2959,"\r"],[-1,2963,"\r"],[-1,3006,"\r"],[-1,3055,"\r"],[-1,3091,"\r"],[-1,3162,"\r"],[-1,3198,"\r"],[-1,3276,"\r"],[-1,3352,"\r"],[-1,3414,"\r"],[-1,3507,"\r"],[-1,3520,"\r"],[-1,3529,"\r"],[-1,3533,"\r"],[-1,3577,"\r"],[-1,3629,"\r"],[-1,3668,"\r"],[-1,3743,"\r"],[-1,3780,"\r"],[-1,3859,"\r"],[-1,3942,"\r"],[-1,4005,"\r"],[-1,4053,"\r"],[-1,4128,"\r"],[-1,4203,"\r"],[-1,4276,"\r"],[-1,4289,"\r"],[-1,4298,"\r"],[-1,4302,"\r"],[-1,4342,"\r"]],[2321,2321],[2321,2321]]]]]]}