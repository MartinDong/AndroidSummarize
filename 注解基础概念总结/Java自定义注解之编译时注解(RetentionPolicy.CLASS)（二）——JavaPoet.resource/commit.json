{"compress":true,"commitItems":[["d4ae1d57-6232-4698-b230-468eb7621a94",1519705225311,"",[[1519705211299,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,0,"自定义注解之编译时注解(RetentionPolicy.CLASS)（二）——JavaPoet\n===\n\n\n"]],[0,0],[54,54]]],[1519705224557,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,0,"自定义注解之编译时"],[1,9,"在使用编译时注解时，需要在编译期间对注解进行处理，在这里我们没办法影响程序的运行逻辑，但我们可以进行一些需处理，比如生成一些功能性代码来辅助程序的开发，最常见的是生成**.java** 源文件，并在程序中可以调用到生成的文件。这样我们就可以用注解来帮助我们处理一些固定逻辑的重复性代码（如[butterknife](https://github.com/JakeWharton/butterknife)），提高开发的效率。\n\n通过注解处理器来生成 **.java** 源文件基本上都会使用[javapoet](https://github.com/square/javapoet) 这个库，**JavaPoet**一个是用于产生 **.java** 源文件的辅助库，它可以很方便地帮助我们生成需要的**.java** 源文件，下面来看下具体使用方法。\n\n**JavaPoet**\n\n在使用前需要先引入这个库，和 **AutoService**一样可以通过**AndroidStudio **直接添加，如下：\n\n![](http://img.blog.csdn.net/20160807113725156) \n\n下面以最简单的 **HelloWorld** 例子来看下怎么使用**JavaPoet**。\n\n先定义一个"],[1,11,"：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52141784# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52141784# \"copy\")\n\n1.  /** \n2.  * JavaPoet HelloWorld 例子 \n3.  */  \n4.  @Retention"],[-1,34,"（二）——J"],[1,40,"  \n5.  @Target(ElementType.TYPE)  \n6.  public @interface JPHelloWorld {  \n7.  }  \n\n在定义个注解处理器来处理这个注解：\n\n**[j"],[1,43,"]** [view plain](http://blog.csdn.net/github_35180164/article/details/52141784# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52141784# \"copy\")\n\n1.  /** \n2.  * 处理HelloWorld注解. \n3.  */  \n4.  @AutoService("],[1,44,"r"],[1,45,"cessor.class)  \n5.  public class HelloWorldProc"],[1,46,"ss ex"],[1,47,"ends AbstractProcessor {  "],[1,48,"\n7.  private Filer filer;  \n\n9.  @Override  \n10.  public synchronized void init(ProcessingEnvironment processingEnv) {  \n11.  super.init(processingEnv);  \n12.  // Filer是个接口，支持通过注解处理器创建新文件  \n13.  filer "],[1,49," processingEnv.getFiler();  \n14.  }  \n\n16.  @Override  \n17.  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {  \n18.  for (TypeElement element : annotations) {  \n19.  if (element.getQualifiedName().toString().equals(JPHelloWorld.class.getCanonicalName())) {  \n20.  // 创建main方法  \n21.  MethodSpec main "],[1,50," MethodSpec.methodBuilder(\"main\")  \n22.  .addModifiers(Modifier.PUBLIC, Modifier.STATIC)  \n23.  .returns(void.class)  \n24.  .addParameter(String[].class, \"args\")  \n25.  .addStatement(\"$T.out.println($S)\", System.class, \"Hello, JavaPoet!\")  \n26.  .build();  \n27.  // 创建HelloWorld类  \n28.  TypeSpec helloWorld "],[1,51," TypeSpec.classBuilder(\"HelloWorld\")  "],[1,52,"29.  .addModifiers(Modifier.PUBLIC, Modifier.FINAL)  \n30.  .addMethod(main)  \n31.  .build();  "],[1,54,"33.  try {  \n34.  // 生成 com.example.HelloWorld.java  \n35.  JavaFile javaFile = JavaFile.builder(\"com.example\", helloWorld)  \n36.  .addFileComment(\" This codes are generated automatically. Do not modify!\")  \n37.  .build();  \n38.  //　生成文件  \n39.  javaFile.writeTo(filer);  \n40.  } catch (IOException e) {  \n41.  e.printStackTrace();  \n42.  }  \n43.  }  \n44.  }  \n45.  return true;  \n46.  }  \n\n48.  @Override  \n49.  public Set<String> getSupportedAnnotationTypes() {  \n50.  Set<String> annotations = new LinkedHashSet<>();  \n51.  annotations.add(JPHelloWorld.class.getCanonicalName());  \n52.  return annotations;  \n53.  }  \n\n55.  @Override  \n56.  public SourceVersion getSupportedSourceVersion() {  \n57.  return SourceVersion.latestSupported();  \n58.  }  \n59.  }  \n\n在用 **JavaPoet** 来生成一个**HelloWorld.java**文件之前，我们还必须在 **init（）**方法里获取到 **Filer**，这是一个用来辅助创建文件的接口，我们生成文件都通过它来处理。在 **process（）**方法先创建了个 **MethodSpec** 表示一个方法，再创建一个 **TypeSpec** 表示一个类并添加上前面创建的方法，最后用 **JavaFile** 来生成对应的**HelloWorld.java** 并写入文件。\n\n这是最简单的例子，整个语法结构也很清晰，相信做编程的看到这些使用方法都能猜到是做什么用的，我就没详细说了。除了这个例子，Github上还有很多其它示例，如果你想很好地了解编译时注解的使用的话，还是很有必要把每个例子都过一遍，如果不想自己敲粘贴复制下很容易的。\n\n在代码中使用定义的注解：\n\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52141784# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52141784# \"copy\")\n\n1.  @JPHelloWorld  \n2.  public class MainActivity extends AppCompatActivity{  \n3.  // ...  \n4.  }  \n\n重新 Make 下工程就可以看到生成的 **HelloWorld.java **文件了，目录如下：\n\n![](http://img.blog.csdn.net/20160807131330238)\n\n可以看到已经成功生成了 **HelloWorld.java** 文件，注意生成文件所在的目录，现在我们就可以在项目中直接使用这个 java 类了。当然了，这个例子没有什么实际的使用价值，你可以参考其它例子来生成你想要的代码，用法是很多的。\n\n这里只写了个最简单的例子，没有深入更详细的使用方法，等后面有时间再来整理个更详细的介绍。\n\n[自定义注解之编译时注解(RetentionPolicy.CLASS)（三）—— 常用接口介绍](http://blog.csdn.net/github_35180164/article/details/52171135)"]],[0,54],[4045,4045]]],[1519705298787,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,92," "],[1,93," "],[-1,223," "],[1,224," "],[-1,233," "],[1,234," "],[-1,290," "],[1,291," "],[-1,314," "],[1,315," "],[-1,324," "],[1,325," "],[-1,358," "],[1,359," "],[-1,405," "],[1,406," "],[-1,442," "],[1,443," "],[-1,512," "],[1,513," "],[-1,527," "],[1,528," "],[-1,562,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52141784# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52141784# \"copy\")\n\n1.  /** \n2.  * JavaPoet HelloWorld 例子 \n3.  */  \n4.  @Retention(RetentionPolicy.CLASS)  \n5.  @Target(ElementType.TYPE)  \n6.  public @interface JPHelloWorld {  \n7.  }  "],[1,908,"·"],[-1,939," "],[1,940," "],[-1,1029," "],[1,1030," "],[-1,1116," "],[1,1117," "],[-1,1123," "],[1,1124," "],[-1,1139," "],[1,1140," "],[-1,1147,"  "],[1,1149,"  "],[-1,1183,"  "],[1,1185,"  "],[-1,1196," "],[1,1197," "],[-1,1202," "],[1,1203," "],[-1,1220," "],[1,1221," "],[-1,1228," "],[1,1229," "],[-1,1246," {  "],[1,1250," {  "],[-1,1263," "],[1,1264," "],[-1,1269," "],[1,1270," "],[-1,1276,"  "],[1,1278,"  "],[-1,1293,"  "],[1,1295,"  "],[-1,1307," "],[1,1308," "],[-1,1320," "],[1,1321," "],[-1,1325," "],[1,1326," "],[-1,1352," "],[1,1353," "],[-1,1367," {  "],[1,1371," {  "],[-1,1403,"  "],[1,1405,"  "],[-1,1413," "],[1,1414," "],[-1,1438,"  "],[1,1440,"  "],[-1,1451," = "],[1,1454," = "],[-1,1479,"  "],[1,1481,"  "],[-1,1488,"  "],[1,1490,"  "],[-1,1506,"  "],[1,1508,"  "],[-1,1520," "],[1,1521," "],[-1,1528," "],[1,1529," "],[-1,1542," "],[1,1543," "],[-1,1550," "],[1,1551," "],[-1,1563," "],[1,1564," "],[-1,1576," "],[1,1577," "],[-1,1593," "],[1,1594," "],[-1,1603," {  "],[1,1607," {  "],[-1,1616," "],[1,1617," "],[-1,1629," "],[1,1630," "],[-1,1637," : "],[1,1640," : "],[-1,1652," {  "],[1,1656," {  "],[-1,1664," "],[1,1665," "],[-1,1750," {  "],[1,1754," {  "],[-1,1762," "],[1,1763," "],[-1,1771,"  "],[1,1773,"  "],[-1,1789," "],[1,1790," "],[-1,1794," = "],[1,1797," = "],[-1,1829,"  "],[1,1831,"  "],[-1,1867," "],[1,1868," "],[-1,1884,"  "],[1,1886,"  "],[-1,1912,"  "],[1,1914,"  "],[-1,1949," "],[1,1950," "],[-1,1957,"  "],[1,1959,"  "],[-1,2000," "],[1,2001," "],[-1,2014," "],[1,2015," "],[-1,2022," "],[1,2023," "],[-1,2034,"  "],[1,2036,"  "],[-1,2051,"  "],[1,2053,"  "],[-1,2061," "],[1,2062," "],[-1,2075,"  "],[1,2077,"  "],[-1,2091," "],[1,2092," "],[-1,2102," = "],[1,2105," = "],[-1,2140,"  "],[1,2142,"  "],[-1,2178," "],[1,2179," "],[-1,2194,"  "],[1,2196,"  "],[-1,2218,"  "],[1,2220,"  "],[-1,2235,"  "],[1,2237,"  "],[-1,2247," {  "],[1,2251," {  "],[-1,2259," 生成 "],[1,2263," 生成 "],[-1,2290,"  "],[1,2292,"  "],[-1,2306," "],[1,2307," "],[-1,2315," = "],[1,2318," = "],[-1,2349," "],[1,2350," "],[-1,2361,"  "],[1,2363,"  "],[-1,2386," "],[1,2387," "],[-1,2391," "],[1,2392," "],[-1,2397," are "],[1,2402," are "],[-1,2411," "],[1,2412," "],[-1,2426," Do not "],[1,2434," Do not "],[-1,2443,"  "],[1,2445,"  "],[-1,2460,"  "],[1,2462,"  "],[-1,2475,"  "],[1,2477,"  "],[-1,2507,"  "],[1,2509,"  "],[-1,2516," "],[1,2517," "],[-1,2522," "],[1,2523," "],[-1,2535," e) {  "],[1,2542," e) {  "],[-1,2568,"  "],[1,2570,"  "],[-1,2577,"  "],[1,2579,"  "],[-1,2586,"  "],[1,2588,"  "],[-1,2595,"  "],[1,2597,"  "],[-1,2609," "],[1,2610," "],[-1,2615,"  "],[1,2617,"  "],[-1,2624,"  "],[1,2626,"  "],[-1,2642,"  "],[1,2644,"  "],[-1,2656," "],[1,2657," "],[-1,2668," "],[1,2669," "],[-1,2698," {  "],[1,2702," {  "],[-1,2719," "],[1,2720," "],[-1,2731," = new "],[1,2738," = new "],[-1,2756,"  "],[1,2758,"  "],[-1,2819,"  "],[1,2821,"  "],[-1,2833," "],[1,2834," "],[-1,2846,"  "],[1,2848,"  "],[-1,2855,"  "],[1,2857,"  "],[-1,2873,"  "],[1,2875,"  "],[-1,2887," "],[1,2888," "],[-1,2901," "],[1,2902," "],[-1,2929," {  "],[1,2933," {  "],[-1,2945," "],[1,2946," "],[-1,2978,"  "],[1,2980,"  "],[-1,2987,"  "],[1,2989,"  "],[-1,2996,"  "],[1,2998,"  "],[-1,3002," "],[1,3003," "],[-1,3015," "],[1,3016," "],[-1,3051," "],[1,3052," "],[-1,3068," "],[1,3069," "],[-1,3110," "],[1,3111," "],[-1,3131," "],[1,3132," "],[-1,3146," "],[1,3147," "],[-1,3159," "],[1,3160," "],[-1,3172," "],[1,3173," "],[-1,3193," "],[1,3194," "],[-1,3206," "],[1,3207," "],[-1,3232," "],[1,3233," "],[-1,3396," "],[1,3397," "],[-1,3486," "],[1,3487," "],[-1,3583,"  "],[1,3585,"  "],[-1,3596," "],[1,3597," "],[-1,3602," "],[1,3603," "],[-1,3615," "],[1,3616," "],[-1,3623," "],[1,3624," "],[-1,3642,"  "],[1,3644,"  "],[-1,3651," ...  "],[1,3657," ...  "],[-1,3663,"  "],[1,3665,"  "],[-1,3686," "],[1,3687," "],[-1,3704," "],[1,3705," "],[-1,3778," "],[1,3779," "],[-1,3798," "],[1,3799," ··"]],[562,908],[565,565]]],[1519705299592,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,562,"···"]],[565,565],[562,562]]],[1519705301079,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,562,"```java"]],[562,562],[569,569]]],[1519705301307,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,571,"\n"]],[569,569],[570,570]]],[1519705302284,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,570,"```"]],[570,570],[573,573]]],[1519705303142,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,570,"\n"]],[570,570],[571,571]]],[1519705304300,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,570,"/** \r\n * JavaPoet HelloWorld 例子 \r\n */  \r\n@Retention(RetentionPolicy.CLASS)  \r\n@Target(ElementType.TYPE)  \r\npublic @interface JPHelloWorld {  \r\n}  "]],[570,570],[716,716]]],[1519705325536,[null,[[-1,569,"在"],[1,570,"\n"],[-1,574,"\r"],[1,575,"\n"],[-1,602,"\r"],[1,603,"\n"],[-1,609,"\r"],[1,610,"\n"],[-1,646,"\r"],[1,647,"\n"],[-1,675,"\r"],[1,676,"\n"],[-1,711,"\r"],[1,712,"\n"],[-1,720,"定\n"],[1,722,"\n\n在定"],[-1,3609,"··"]],[569,569],[3609,3609]]],[1519705325536,[null,[[1,569,"在"],[-1,569,"\n"],[1,574,"\r"],[-1,574,"\n"],[1,602,"\r"],[-1,602,"\n"],[1,609,"\r"],[-1,609,"\n"],[1,646,"\r"],[-1,646,"\n"],[1,675,"\r"],[-1,675,"\n"],[1,711,"\r"],[-1,711,"\n"],[1,720,"定\n"],[-1,720,"\n\n在定"],[1,3611,"··"]],[3609,3609],[569,569]]],[1519705317014,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,574,"\r"],[-1,602,"\r"],[-1,609,"\r"],[-1,646,"\r"],[-1,675,"\r"],[-1,711,"\r"],[-1,741,"**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52141784# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52141784# \"copy\")\n\n1.  /** \n2.  * 处理HelloWorld注解. \n3.  */  \n4.  @AutoService(Processor.class)  \n5.  public class HelloWorldProcess extends AbstractProcessor {  \n\n7.  private Filer filer;  \n\n9.  @Override  \n10.  public synchronized void init(ProcessingEnvironment processingEnv) {  \n11.  super.init(processingEnv);  \n12.  // Filer是个接口，支持通过注解处理器创建新文件  \n13.  filer = processingEnv.getFiler();  \n14.  }  \n\n16.  @Override  \n17.  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {  \n18.  for (TypeElement element : annotations) {  \n19.  if (element.getQualifiedName().toString().equals(JPHelloWorld.class.getCanonicalName())) {  \n20.  // 创建main方法  \n21.  MethodSpec main = MethodSpec.methodBuilder(\"main\")  \n22.  .addModifiers(Modifier.PUBLIC, Modifier.STATIC)  \n23.  .returns(void.class)  \n24.  .addParameter(String[].class, \"args\")  \n25.  .addStatement(\"$T.out.println($S)\", System.class, \"Hello, JavaPoet!\")  \n26.  .build();  \n27.  // 创建HelloWorld类  \n28.  TypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")  \n29.  .addModifiers(Modifier.PUBLIC, Modifier.FINAL)  \n30.  .addMethod(main)  \n31.  .build();  \n\n33.  try {  \n34.  // 生成 com.example.HelloWorld.java  \n35.  JavaFile javaFile = JavaFile.builder(\"com.example\", helloWorld)  \n36.  .addFileComment(\" This codes are generated automatically. Do not modify!\")  \n37.  .build();  \n38.  //　生成文件  \n39.  javaFile.writeTo(filer);  \n40.  } catch (IOException e) {  \n41.  e.printStackTrace();  \n42.  }  \n43.  }  \n44.  }  \n45.  return true;  \n46.  }  \n\n48.  @Override  \n49.  public Set<String> getSupportedAnnotationTypes() {  \n50.  Set<String> annotations = new LinkedHashSet<>();  \n51.  annotations.add(JPHelloWorld.class.getCanonicalName());  \n52.  return annotations;  \n53.  }  \n\n55.  @Override  \n56.  public SourceVersion getSupportedSourceVersion() {  \n57.  return SourceVersion.latestSupported();  \n58.  }  \n59.  }  "],[1,2810,"···java"]],[735,2804],[742,742]]],[1519705318857,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,735,"···java"]],[742,742],[735,735]]],[1519705319806,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,735,"···"]],[735,735],[738,738]]],[1519705320536,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,735,"···"]],[738,738],[735,735]]],[1519705322197,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,735,"```java"]],[735,735],[742,742]]],[1519705322346,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,744,"\n"]],[742,742],[743,743]]],[1519705323071,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,743,"```"]],[743,743],[746,746]]],[1519705323988,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,743,"\n"]],[743,743],[744,744]]],[1519705324904,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,743,"/** \r\n * 处理HelloWorld注解. \r\n */  \r\n@AutoService(Processor.class)  \r\npublic class HelloWorldProcess extends AbstractProcessor {  \r\n  \r\n    private Filer filer;  \r\n  \r\n    @Override  \r\n    public synchronized void init(ProcessingEnvironment processingEnv) {  \r\n        super.init(processingEnv);  \r\n        // Filer是个接口，支持通过注解处理器创建新文件  \r\n        filer = processingEnv.getFiler();  \r\n    }  \r\n  \r\n    @Override  \r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {  \r\n        for (TypeElement element : annotations) {  \r\n            if (element.getQualifiedName().toString().equals(JPHelloWorld.class.getCanonicalName())) {  \r\n                // 创建main方法  \r\n                MethodSpec main = MethodSpec.methodBuilder(\"main\")  \r\n                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)  \r\n                        .returns(void.class)  \r\n                        .addParameter(String[].class, \"args\")  \r\n                        .addStatement(\"$T.out.println($S)\", System.class, \"Hello, JavaPoet!\")  \r\n                        .build();  \r\n                // 创建HelloWorld类  \r\n                TypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")  \r\n                        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)  \r\n                        .addMethod(main)  \r\n                        .build();  \r\n  \r\n                try {  \r\n                    // 生成 com.example.HelloWorld.java  \r\n                    JavaFile javaFile = JavaFile.builder(\"com.example\", helloWorld)  \r\n                            .addFileComment(\" This codes are generated automatically. Do not modify!\")  \r\n                            .build();  \r\n                    //　生成文件  \r\n                    javaFile.writeTo(filer);  \r\n                } catch (IOException e) {  \r\n                    e.printStackTrace();  \r\n                }  \r\n            }  \r\n        }  \r\n        return true;  \r\n    }  \r\n  \r\n    @Override  \r\n    public Set<String> getSupportedAnnotationTypes() {  \r\n        Set<String> annotations = new LinkedHashSet<>();  \r\n        annotations.add(JPHelloWorld.class.getCanonicalName());  \r\n        return annotations;  \r\n    }  \r\n  \r\n    @Override  \r\n    public SourceVersion getSupportedSourceVersion() {  \r\n        return SourceVersion.latestSupported();  \r\n    }  \r\n}  "]],[743,743],[3062,3062]]],[1519705341402,[null,[[-1,569,"在"],[1,570,"\n"],[-1,714,"定\n"],[1,716,"\n\n在定"],[-1,733,"**"],[-1,742,"在"],[1,743,"\n"],[-1,747,"\r"],[1,748,"\n"],[-1,768,"\r"],[1,769,"\n"],[-1,775,"\r"],[1,776,"\n"],[-1,808,"\r"],[1,809,"\n"],[-1,870,"\r\n  \r"],[1,875,"\n\n  \n"],[-1,902,"\r\n  \r"],[1,907,"\n\n  \n"],[-1,923,"\r"],[1,924,"\n"],[-1,999,"\r"],[1,1000,"\n"],[-1,1037,"\r"],[1,1038,"\n"],[-1,1076,"\r"],[1,1077,"\n"],[-1,1121,"\r"],[1,1122,"\n"],[-1,1130,"\r\n  \r"],[1,1135,"\n\n  \n"],[-1,1151,"\r"],[1,1152,"\n"],[-1,1250,"\r"],[1,1251,"\n"],[-1,1303,"\r"],[1,1304,"\n"],[-1,1409,"\r"],[1,1410,"\n"],[-1,1440,"\r"],[1,1441,"\n"],[-1,1510,"\r"],[1,1511,"\n"],[-1,1585,"\r"],[1,1586,"\n"],[-1,1633,"\r"],[1,1634,"\n"],[-1,1698,"\r"],[1,1699,"\n"],[-1,1795,"\r"],[1,1796,"\n"],[-1,1832,"\r"],[1,1833,"\n"],[-1,1868,"\r"],[1,1869,"\n"],[-1,1945,"\r"],[1,1946,"\n"],[-1,2019,"\r"],[1,2020,"\n"],[-1,2063,"\r"],[1,2064,"\n"],[-1,2100,"\r\n  \r"],[1,2105,"\n\n  \n"],[-1,2129,"\r"],[1,2130,"\n"],[-1,2186,"\r"],[1,2187,"\n"],[-1,2273,"\r"],[1,2274,"\n"],[-1,2379,"\r"],[1,2380,"\n"],[-1,2420,"\r"],[1,2421,"\n"],[-1,2451,"\r"],[1,2452,"\n"],[-1,2499,"\r"],[1,2500,"\n"],[-1,2544,"\r"],[1,2545,"\n"],[-1,2588,"\r"],[1,2589,"\n"],[-1,2609,"\r"],[1,2610,"\n"],[-1,2626,"\r"],[1,2627,"\n"],[-1,2639,"\r"],[1,2640,"\n"],[-1,2663,"\r"],[1,2664,"\n"],[-1,2672,"\r\n  \r"],[1,2677,"\n\n  \n"],[-1,2693,"\r"],[1,2694,"\n"],[-1,2751,"\r"],[1,2752,"\n"],[-1,2811,"\r"],[1,2812,"\n"],[-1,2878,"\r"],[1,2879,"\n"],[-1,2909,"\r"],[1,2910,"\n"],[-1,2918,"\r\n  \r"],[1,2923,"\n\n  \n"],[-1,2939,"\r"],[1,2940,"\n"],[-1,2997,"\r"],[1,2998,"\n"],[-1,3048,"\r"],[1,3049,"\n"],[-1,3057,"\r"],[1,3058,"\n"],[-1,3066,"用\n"],[1,3068,"\n\n在用"],[-1,3865,"··"],[1,3867,""]],[569,569],[3867,3867]]],[1519705341402,[null,[[1,569,"在"],[-1,569,"\n"],[1,714,"定\n"],[-1,714,"\n\n在定"],[1,735,"**"],[1,742,"在"],[-1,742,"\n"],[1,747,"\r"],[-1,747,"\n"],[1,768,"\r"],[-1,768,"\n"],[1,775,"\r"],[-1,775,"\n"],[1,808,"\r"],[-1,808,"\n"],[1,870,"\r\n  \r"],[-1,870,"\n\n  \n"],[1,902,"\r\n  \r"],[-1,902,"\n\n  \n"],[1,923,"\r"],[-1,923,"\n"],[1,999,"\r"],[-1,999,"\n"],[1,1037,"\r"],[-1,1037,"\n"],[1,1076,"\r"],[-1,1076,"\n"],[1,1121,"\r"],[-1,1121,"\n"],[1,1130,"\r\n  \r"],[-1,1130,"\n\n  \n"],[1,1151,"\r"],[-1,1151,"\n"],[1,1250,"\r"],[-1,1250,"\n"],[1,1303,"\r"],[-1,1303,"\n"],[1,1409,"\r"],[-1,1409,"\n"],[1,1440,"\r"],[-1,1440,"\n"],[1,1510,"\r"],[-1,1510,"\n"],[1,1585,"\r"],[-1,1585,"\n"],[1,1633,"\r"],[-1,1633,"\n"],[1,1698,"\r"],[-1,1698,"\n"],[1,1795,"\r"],[-1,1795,"\n"],[1,1832,"\r"],[-1,1832,"\n"],[1,1868,"\r"],[-1,1868,"\n"],[1,1945,"\r"],[-1,1945,"\n"],[1,2019,"\r"],[-1,2019,"\n"],[1,2063,"\r"],[-1,2063,"\n"],[1,2100,"\r\n  \r"],[-1,2100,"\n\n  \n"],[1,2129,"\r"],[-1,2129,"\n"],[1,2186,"\r"],[-1,2186,"\n"],[1,2273,"\r"],[-1,2273,"\n"],[1,2379,"\r"],[-1,2379,"\n"],[1,2420,"\r"],[-1,2420,"\n"],[1,2451,"\r"],[-1,2451,"\n"],[1,2499,"\r"],[-1,2499,"\n"],[1,2544,"\r"],[-1,2544,"\n"],[1,2588,"\r"],[-1,2588,"\n"],[1,2609,"\r"],[-1,2609,"\n"],[1,2626,"\r"],[-1,2626,"\n"],[1,2639,"\r"],[-1,2639,"\n"],[1,2663,"\r"],[-1,2663,"\n"],[1,2672,"\r\n  \r"],[-1,2672,"\n\n  \n"],[1,2693,"\r"],[-1,2693,"\n"],[1,2751,"\r"],[-1,2751,"\n"],[1,2811,"\r"],[-1,2811,"\n"],[1,2878,"\r"],[-1,2878,"\n"],[1,2909,"\r"],[-1,2909,"\n"],[1,2918,"\r\n  \r"],[-1,2918,"\n\n  \n"],[1,2939,"\r"],[-1,2939,"\n"],[1,2997,"\r"],[-1,2997,"\n"],[1,3048,"\r"],[-1,3048,"\n"],[1,3057,"\r"],[-1,3057,"\n"],[1,3066,"用\n"],[-1,3066,"\n\n在用"],[1,3867,"··"],[-1,3867,""]],[3867,3867],[569,569]]],[1519705335515,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,747,"\r"],[-1,768,"\r"],[-1,775,"\r"],[-1,808,"\r"],[-1,870,"\r"],[-1,874,"\r"],[-1,902,"\r"],[-1,906,"\r"],[-1,923,"\r"],[-1,999,"\r"],[-1,1037,"\r"],[-1,1076,"\r"],[-1,1121,"\r"],[-1,1130,"\r"],[-1,1134,"\r"],[-1,1151,"\r"],[-1,1250,"\r"],[-1,1303,"\r"],[-1,1409,"\r"],[-1,1440,"\r"],[-1,1510,"\r"],[-1,1585,"\r"],[-1,1633,"\r"],[-1,1698,"\r"],[-1,1795,"\r"],[-1,1832,"\r"],[-1,1868,"\r"],[-1,1945,"\r"],[-1,2019,"\r"],[-1,2063,"\r"],[-1,2100,"\r"],[-1,2104,"\r"],[-1,2129,"\r"],[-1,2186,"\r"],[-1,2273,"\r"],[-1,2379,"\r"],[-1,2420,"\r"],[-1,2451,"\r"],[-1,2499,"\r"],[-1,2544,"\r"],[-1,2588,"\r"],[-1,2609,"\r"],[-1,2626,"\r"],[-1,2639,"\r"],[-1,2663,"\r"],[-1,2672,"\r"],[-1,2676,"\r"],[-1,2693,"\r"],[-1,2751,"\r"],[-1,2811,"\r"],[-1,2878,"\r"],[-1,2909,"\r"],[-1,2918,"\r"],[-1,2922,"\r"],[-1,2939,"\r"],[-1,2997,"\r"],[-1,3048,"\r"],[-1,3057,"\r"],[-1,3453,"\n**[java]** [view plain](http://blog.csdn.net/github_35180164/article/details/52141784# \"view plain\") [copy](http://blog.csdn.net/github_35180164/article/details/52141784# \"copy\")\n\n1.  @JPHelloWorld  \n2.  public class MainActivity extends AppCompatActivity{  \n3.  // ...  \n4.  }  \n"],[1,3734,"```java"]],[3395,3676],[3402,3402]]],[1519705335677,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3403,"\n"]],[3402,3402],[3403,3403]]],[1519705337476,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3403,"```\\"]],[3403,3403],[3407,3407]]],[1519705337495,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3408,"\n"]],[3407,3407],[3408,3408]]],[1519705338222,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,3408,"\n"]],[3408,3408],[3407,3407]]],[1519705339313,["xiaoyulaoshi@DESKTOP-LAD9940",[[-1,3406,"\\"]],[3407,3407],[3406,3406]]],[1519705340067,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3403,"\n"]],[3403,3403],[3404,3404]]],[1519705341035,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,3403,"@JPHelloWorld  \r\npublic class MainActivity extends AppCompatActivity{  \r\n    // ...  \r\n}  "]],[3403,3403],[3493,3493]]]]]]}