{"compress":true,"commitItems":[["dcae5d94-460a-4572-b8f1-69957eb86544",1519807824984,"",[[1519807815205,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,0,"WebView性能优化\n===\n\n\n"]],[0,0],[18,18]]],[1519807824045,["xiaoyulaoshi@DESKTOP-LAD9940",[[1,0,"# "],[1,12,"\n作者: 郭嘉 \n邮箱: guoxiaoxingv@163.com \n博客: [https://guoxiaoxing.github.io/](https://guoxiaoxing.github.io/) \n知乎: [https://www.zhihu.com/people/allen-wells](https://www.zhihu.com/people/allen-wells)\n\n**关于作者**\n\n> Android Coder一枚, 目前就职于杭州大搜车汽车汽车服务有限公司。爱技术、爱烹饪、爱小提琴、爱一切新鲜有趣的事物。 \n> 人生格言: 不想当程序员的歌手不是好厨师。\n\n**关于文章**\n\n> 作者的每一篇文章都会同时发布在Github、CSDN和知乎上, 文章顶部也会附上Github上的文章链接和代码链接。如果文章中有什么疑问欢迎发邮件与 \n> 我交流, 对于交流的问题, 请描述清楚并附上代码与日志, 我一般都会给予回复。如果文章中有什么错误, 也欢迎斧正。如果你觉得本文章对你 \n> 有所帮助, 也欢迎去star文章, 关注文章的最新的动态。\n\n本系列文章讨论WebView的各种用法以及使用技巧, 一共包含三篇文章:\n\n[WebView基本用法](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md) \n[WebView代码交互](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92.md) \n[WebView性能优化](https://github.com/guoxiaoxing/webview-best-practice/blob/master/doc/WebView%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md)\n\n# 一 优化网页加载速度\n\n默认情况html代码下载到WebView后，webkit开始解析网页各个节点，发现有外部样式文件或者外部脚本文件时，会异步发起网络请求下载文件，但如果 \n在这之前也有解析到image节点，那势必也会发起网络请求下载相应的图片。在网络情况较差的情况下，过多的网络请求就会造成带宽紧张，影响到css或 \njs文件加载完成的时间，造成页面空白loading过久。解决的方法就是告诉WebView先不要自动加载图片，等页面finish后再发起图片加载。\n\n设置WebView, 先禁止加载图片\n\n```java\nWebSettings webSettings "],[1,13," mWebView.getSettings();\n\n//图片加载\nif(Build.VERSION.SDK_INT >"],[1,14," 19){\n    webSettings.setLoadsImagesAutomatically(true);\n}else {\n    webSettings.setLoadsImagesAutomatically(false);\n}12345678\n```\n\n覆写WebViewClient的onPageFinished()方法, 页面加载结束后再加载图片\n\n```java\n@Override\npublic void onPageFinished(WebView view, String url) {\n    super.onPageFinished(view, url);\n    if (!view.getSettings().getLoadsImagesAutomatically()) {\n        view.getSettings().setLoadsImagesAutomatically(true);\n    }\n}1234567\n```\n\n**注意**: 4.4以上系统在onPageFinished时再恢复图片加载时,如果存在多张图片引用的是相同的src时，会只有一个image标签得到加载，因而对于这样的系统我们就先直接加载。\n\n# 二 硬件加速页面闪烁问题\n\n4.0以上的系统我们开启硬件加速后，WebView渲染页面更加快速，拖动也更加顺滑。但有个副作用就是，当WebView视图被整体遮住一块，然后突然恢复时（比如使用SlideMenu将WebView从侧边 \n滑出来时），这个过渡期会出现白块同时界面闪烁。解决这个问题的方法是在过渡期前将WebView的硬件加速临时关闭，过渡期后再开启，如下所示:\n\n过度前关闭硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n}123\n```\n\n过度前开启硬件加速\n\n```java\nif(Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB){\n    mWebView.setLayerType(View.LAYER_TYPE_HARDWARE, null);\n}123\n```\n\n以上三篇, 大致就说这么多, 在实际的项目中我们通常会自己去封装一个H5Activity用来统一显示H5页面, 下面就提供了完整的H5Activity, 封装了WebView各种特性与jockeyjs代码交互。\n\n该H5Activity提供WebView常用设置、H5页面解析、标题解析、进度条显示、错误页面展示、重新加载等功能。可以拿去稍作改造, 用于自己的项目中。\n\n```java\npackage com.guoxiaoxing.webview;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.Window;\nimport android.webkit.JsResult;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebResourceError;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.ProgressBar;\n\nimport com.jockeyjs.Jockey;\nimport com.jockeyjs.JockeyImpl;\n\n/**\n * Author: guoxiaoxing\n * Date: 16/7/21 下午4:03\n * Function: H5Activity 提供各种功能载入Web页面\n * <p>\n * For more information, you can visit https://github.com/guoxiaoxing or contact me by\n * guoxiaoxingv@163.com\n */\npublic class H5Activity extends AppCompatActivity {\n\n    public static final String H5_URL "],[1,15," \"H5_URL\";"],[1,16,"    private static final String JOCKEY_EVENT_NAME = \"JOCKEY_EVENT_NAME\";\n    private static final String TAG = H5Activity.class.getSimpleName();"],[1,18,"    private Toolbar mToolbar;\n    private ProgressBar mProgressBar;\n\n    private Jockey mJockey;\n    private WebView mWebView;\n    private WebViewClient mWebViewClient;\n    private WebChromeClient mWebChromeClient;\n\n    private String mUrl;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        supportRequestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.activity_h5);\n        setupView();\n        setupSettings();\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        setupJockey();\n        setupData();\n    }\n\n    private void setupView() {\n        mToolbar = (Toolbar) findViewById(R.id.h5_toolbar);\n        mProgressBar = (ProgressBar) findViewById(R.id.h5_progressbar);\n        mWebView = (WebView) findViewById(R.id.h5_webview);\n    }\n\n    private void setupSettings() {\n\n        mWebView.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);\n        mWebView.setHorizontalScrollBarEnabled(false);\n        mWebView.setOverScrollMode(WebView.OVER_SCROLL_NEVER);\n\n        WebSettings mWebSettings = mWebView.getSettings();\n        mWebSettings.setSupportZoom(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDefaultTextEncodingName(\"utf-8\");\n        mWebSettings.setLoadsImagesAutomatically(true);\n\n        //JS\n        mWebSettings.setJavaScriptEnabled(true);\n        mWebSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n\n        mWebSettings.setAllowFileAccess(true);\n        mWebSettings.setUseWideViewPort(true);\n        mWebSettings.setDatabaseEnabled(true);\n        mWebSettings.setLoadWithOverviewMode(true);\n        mWebSettings.setDomStorageEnabled(true);\n\n        //缓存\n        ConnectivityManager connectivityManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo info = connectivityManager.getActiveNetworkInfo();\n        if (info != null && info.isConnected()) {\n            String wvcc = info.getTypeName();\n            Log.d(TAG, \"current network: \" + wvcc);\n            mWebSettings.setCacheMode(WebSettings.LOAD_DEFAULT);\n        } else {\n            Log.d(TAG, \"No network is connected, use cache\");\n            mWebSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);\n        }\n\n        if (Build.VERSION.SDK_INT >= 16) {\n            mWebSettings.setAllowFileAccessFromFileURLs(true);\n            mWebSettings.setAllowUniversalAccessFromFileURLs(true);\n        }\n\n        if (Build.VERSION.SDK_INT >= 12) {\n            mWebSettings.setAllowContentAccess(true);\n        }\n\n        setupWebViewClient();\n        setupWebChromeClient();\n    }\n\n    private void setupJockey() {\n        mJockey = JockeyImpl.getDefault();\n        mJockey.configure(mWebView);\n        mJockey.setWebViewClient(mWebViewClient);\n        mJockey.setOnValidateListener(new Jockey.OnValidateListener() {\n            @Override\n            public boolean validate(String host) {\n                return \"yourdomain.com\".equals(host);\n            }\n        });\n\n        //TODO set your event handler\n        mJockey.on(JOCKEY_EVENT_NAME, new EventHandler());\n    }\n\n    private void setupData() {\n        mUrl = getIntent().getStringExtra(H5_URL);\n        if (TextUtils.isEmpty(mUrl)) {\n            //TODO show error page\n        } else {\n            mWebView.loadUrl(mUrl);\n        }\n    }\n\n    private void setupWebViewClient() {\n        mWebViewClient = new WebViewClient() {\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n                //TODO 处理URL, 例如对指定的URL做不同的处理等\n                return false;\n            }\n\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n            }\n\n            @Override\n            public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                super.onPageStarted(view, url, favicon);\n            }\n\n            @Override\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n                super.onReceivedError(view, request, error);\n            }\n        };\n        mWebView.setWebViewClient(mWebViewClient);\n    }\n\n    private void setupWebChromeClient() {\n        mWebChromeClient = new WebChromeClient() {\n            @Override\n            public void onReceivedTitle(WebView view, String title) {\n                super.onReceivedTitle(view, title);\n                mToolbar.setTitle(title);\n\n            }\n\n            @Override\n            public void onProgressChanged(WebView view, int newProgress) {\n                super.onProgressChanged(view, newProgress);\n                mProgressBar.setProgress(newProgress);\n                if (newProgress == 100) {\n                    mProgressBar.setVisibility(View.GONE);\n                } else {\n                    mProgressBar.setVisibility(View.VISIBLE);\n                }\n            }\n\n            @Override\n            public boolean onJsAlert(WebView view, String url, String message, JsResult result) {\n                return super.onJsAlert(view, url, message, result);\n            }\n        };\n        mWebView.setWebChromeClient(mWebChromeClient);\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if ((keyCode == KeyEvent.KEYCODE_BACK) && mWebView.canGoBack()) {\n            mWebView.goBack();\n            return true;\n        }\n        return super.onKeyDown(keyCode, event);\n    }\n}\n```"]],[0,18],[9393,9393]]]]]]}