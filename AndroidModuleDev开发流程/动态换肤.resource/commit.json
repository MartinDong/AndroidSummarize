{"compress":true,"commitItems":[["afddc8e8-4fb2-461d-a155-a52d53e0cb8d",1521553229916,"",[[1521553228354,["Kotlin@DESKTOP-C3FKI4V",[[1,0,"动态换肤\n===\n\n\n"]],[0,0],[11,11]]],[1521553243638,["Kotlin@DESKTOP-C3FKI4V",[[-1,10,"\n"],[1,11,"本着"]],[11,11],[12,12]]],[1521553244150,["Kotlin@DESKTOP-C3FKI4V",[[-1,10,"本着"]],[12,12],[10,10]]],[1521553287872,["Kotlin@DESKTOP-C3FKI4V",[[-1,9,"\n"],[1,10,"遵从最少知识原则，我们的换肤框架要让调用者尽可能少的知道"]],[10,10],[37,37]]],[1521553289344,["Kotlin@DESKTOP-C3FKI4V",[[-1,35,"知道"]],[37,37],[35,35]]],[1521553305371,["Kotlin@DESKTOP-C3FKI4V",[[1,35,"了解我们的内部实现，在使用的时候最好是直接"]],[35,35],[56,56]]],[1521553439328,["Kotlin@DESKTOP-C3FKI4V",[[1,56,"调用一句初始化操作"]],[9,56],[65,65]]],[1521553441851,["Kotlin@DESKTOP-C3FKI4V",[[-1,63,"操作"]],[65,65],[63,63]]],[1521553444411,["Kotlin@DESKTOP-C3FKI4V",[[1,63,"的代码SkinManager.init(this);"]],[63,63],[89,89]]],[1521553445497,["Kotlin@DESKTOP-C3FKI4V",[[-1,63,"的代码SkinManager.init(this);"]],[89,89],[63,63]]],[1521553446834,["Kotlin@DESKTOP-C3FKI4V",[[1,63," ··"]],[63,63],[66,66]]],[1521553447821,["Kotlin@DESKTOP-C3FKI4V",[[-1,64,"··"]],[66,66],[64,64]]],[1521553451784,["Kotlin@DESKTOP-C3FKI4V",[[1,64,"```SkinManager.init(this);```"]],[64,64],[93,93]]],[1521553460805,["Kotlin@DESKTOP-C3FKI4V",[[1,93,"jiu"]],[93,93],[96,96]]],[1521553461674,["Kotlin@DESKTOP-C3FKI4V",[[-1,93,"jiu"]],[96,96],[93,93]]],[1521553471346,["Kotlin@DESKTOP-C3FKI4V",[[1,93,"就可以让我们的APP支持换肤。"]],[93,93],[108,108]]],[1521553479706,["Kotlin@DESKTOP-C3FKI4V",[[-1,84,"this"],[1,88,"context"]],[84,88],[91,91]]],[1521553492711,["Kotlin@DESKTOP-C3FKI4V",[[1,111,"那么究竟要怎么去实现呢？"]],[111,111],[123,123]]],[1521553493300,["Kotlin@DESKTOP-C3FKI4V",[[1,123,"\n\n"]],[123,123],[124,124]]],[1521553494352,["Kotlin@DESKTOP-C3FKI4V",[[-1,124,"\n"]],[124,124],[123,123]]],[1521553503174,["Kotlin@DESKTOP-C3FKI4V",[[1,123,"接下来我们就一探究竟。"]],[123,123],[134,134]]],[1521553504015,["Kotlin@DESKTOP-C3FKI4V",[[1,135,"\n"]],[134,134],[135,135]]],[1521553505288,["Kotlin@DESKTOP-C3FKI4V",[[1,136,"\n"]],[135,135],[136,136]]],[1521553542060,["Kotlin@DESKTOP-C3FKI4V",[[-1,136,"\n"],[1,137,"首先我们要知道我们的控件是怎么一个个显示在屏幕上的呢？"]],[136,136],[163,163]]],[1521553545334,["Kotlin@DESKTOP-C3FKI4V",[[1,163,"\n\n"]],[163,163],[164,164]]],[1521553562742,["Kotlin@DESKTOP-C3FKI4V",[[-1,164,"\n"],[1,165,"通过阅读原码可以得到下面的接过后"]],[164,164],[180,180]]],[1521553563330,["Kotlin@DESKTOP-C3FKI4V",[[-1,177,"接过后"]],[180,180],[177,177]]],[1521553565603,["Kotlin@DESKTOP-C3FKI4V",[[1,177,"结构图"]],[177,177],[180,180]]],[1521553566458,["Kotlin@DESKTOP-C3FKI4V",[[-1,177,"结构图"]],[180,180],[177,177]]],[1521553569024,["Kotlin@DESKTOP-C3FKI4V",[[-1,174,"下面的"]],[177,177],[174,174]]],[1521553578541,["Kotlin@DESKTOP-C3FKI4V",[[1,174,"下面的屏幕渲染结构图"]],[174,174],[184,184]]],[1521554537680,["Kotlin@DESKTOP-C3FKI4V",[[1,184,"\n\n"]],[184,184],[185,185]]],[1521554544685,["Kotlin@DESKTOP-C3FKI4V",[[1,186,"![Android屏幕绘制层级嵌套1]($res/Android%E5%B1%8F%E5%B9%95%E7%BB%98%E5%88%B6%E5%B1%82%E7%BA%A7%E5%B5%8C%E5%A5%971.png)\n\n"]],[185,185],[297,297]]],[1521554597206,["Kotlin@DESKTOP-C3FKI4V",[[-1,185,"\n"]],[185,185],[185,185]]],[1521554598456,["Kotlin@DESKTOP-C3FKI4V",[[1,185,"\n"]],[185,185],[185,185]]],[1521554600474,["Kotlin@DESKTOP-C3FKI4V",[[1,298,"\n"]],[297,297],[298,298]]],[1521554603459,["Kotlin@DESKTOP-C3FKI4V",[[-1,298,"\n"],[1,299,"通过"]],[298,298],[300,300]]],[1521554604203,["Kotlin@DESKTOP-C3FKI4V",[[-1,298,"通过"]],[300,300],[298,298]]],[1521554608048,["Kotlin@DESKTOP-C3FKI4V",[[-1,297,"\n"],[1,298,"绘制流程"]],[298,298],[301,301]]],[1521554609531,["Kotlin@DESKTOP-C3FKI4V",[[1,297,"\n"]],[297,297],[298,298]]],[1521554611975,["Kotlin@DESKTOP-C3FKI4V",[[1,302,"："]],[302,302],[303,303]]],[1521554612330,["Kotlin@DESKTOP-C3FKI4V",[[1,303,"\n\n"]],[303,303],[304,304]]],[1521554619117,["Kotlin@DESKTOP-C3FKI4V",[[-1,304,"\n"],[1,305,"Activity--"]],[304,304],[314,314]]],[1521554619668,["Kotlin@DESKTOP-C3FKI4V",[[-1,313,"-"]],[314,314],[313,313]]],[1521554619989,["Kotlin@DESKTOP-C3FKI4V",[[1,313,"——"]],[313,313],[315,315]]],[1521554620810,["Kotlin@DESKTOP-C3FKI4V",[[-1,312,"-——"]],[315,315],[312,312]]],[1521554622210,["Kotlin@DESKTOP-C3FKI4V",[[1,312,"——》"]],[312,312],[315,315]]],[1521554622733,["Kotlin@DESKTOP-C3FKI4V",[[-1,314,"》"]],[315,315],[314,314]]],[1521554639642,["Kotlin@DESKTOP-C3FKI4V",[[1,314,">Window()"]],[314,314],[323,323]]],[1521554644289,["Kotlin@DESKTOP-C3FKI4V",[[1,315,"Phone"]],[315,315],[320,320]]],[1521554647374,["Kotlin@DESKTOP-C3FKI4V",[[1,327,"jicheng"]],[327,327],[334,334]]],[1521554648694,["Kotlin@DESKTOP-C3FKI4V",[[-1,327,"jicheng"]],[334,334],[327,327]]],[1521554659698,["Kotlin@DESKTOP-C3FKI4V",[[1,327,"继承"]],[327,327],[329,329]]],[1521554665237,["Kotlin@DESKTOP-C3FKI4V",[[1,329,"自 Window"]],[329,329],[337,337]]],[1521554668155,["Kotlin@DESKTOP-C3FKI4V",[[1,312," "]],[312,312],[313,313]]],[1521554669023,["Kotlin@DESKTOP-C3FKI4V",[[1,316," "]],[316,316],[317,317]]],[1521554671398,["Kotlin@DESKTOP-C3FKI4V",[[1,328," "]],[328,328],[329,329]]],[1521554672557,["Kotlin@DESKTOP-C3FKI4V",[[1,341," "]],[341,341],[342,342]]],[1521554673272,["Kotlin@DESKTOP-C3FKI4V",[[1,340," "]],[340,340],[341,341]]],[1521554674714,["Kotlin@DESKTOP-C3FKI4V",[[1,343,"-"]],[343,343],[344,344]]],[1521554675150,["Kotlin@DESKTOP-C3FKI4V",[[-1,343,"-"]],[344,344],[343,343]]],[1521554675452,["Kotlin@DESKTOP-C3FKI4V",[[1,343,"_"]],[343,343],[344,344]]],[1521554676059,["Kotlin@DESKTOP-C3FKI4V",[[-1,343,"_"]],[344,344],[343,343]]],[1521554692398,["Kotlin@DESKTOP-C3FKI4V",[[1,343,"——>DecorView"]],[343,343],[355,355]]],[1521554695545,["Kotlin@DESKTOP-C3FKI4V",[[1,346," "]],[346,346],[347,347]]],[1521555485589,["Kotlin@DESKTOP-C3FKI4V",[[-1,186,"![Android屏幕绘制层级嵌套1]($res/Android%E5%B1%8F%E5%B9%95%E7%BB%98%E5%88%B6%E5%B1%82%E7%BA%A7%E5%B5%8C%E5%A5%971.png)"]],[186,296],[186,186]]],[1521555491375,["Kotlin@DESKTOP-C3FKI4V",[[1,187,"![Android屏幕绘制层级嵌套2]($res/Android%E5%B1%8F%E5%B9%95%E7%BB%98%E5%88%B6%E5%B1%82%E7%BA%A7%E5%B5%8C%E5%A5%972.png)\n\n"]],[186,186],[298,298]]],[1521555495012,["Kotlin@DESKTOP-C3FKI4V",[[-1,204,"2"]],[205,205],[204,204]]],[1521555495211,["Kotlin@DESKTOP-C3FKI4V",[[1,204,"1"]],[204,204],[205,205]]],[1521555502520,["Kotlin@DESKTOP-C3FKI4V",[[1,358,"()"]],[358,358],[360,360]]],[1521555504131,["Kotlin@DESKTOP-C3FKI4V",[[1,358," "]],[358,358],[359,359]]],[1521555506066,["Kotlin@DESKTOP-C3FKI4V",[[1,360,"jia"]],[360,360],[363,363]]],[1521555506963,["Kotlin@DESKTOP-C3FKI4V",[[-1,360,"jia"]],[363,363],[360,360]]],[1521555513431,["Kotlin@DESKTOP-C3FKI4V",[[1,360,"加载 "]],[360,360],[363,363]]],[1521556705845,["Kotlin@DESKTOP-C3FKI4V",[[1,363,"screen_simple.xml 布局"]],[363,363],[383,383]]],[1521556710623,["Kotlin@DESKTOP-C3FKI4V",[[1,384," _"]],[384,384],[386,386]]],[1521556711197,["Kotlin@DESKTOP-C3FKI4V",[[-1,385,"_"]],[386,386],[385,385]]],[1521556722131,["Kotlin@DESKTOP-C3FKI4V",[[1,385,"——> tong"]],[385,385],[393,393]]],[1521556723118,["Kotlin@DESKTOP-C3FKI4V",[[-1,389,"tong"]],[393,393],[389,389]]],[1521556724528,["Kotlin@DESKTOP-C3FKI4V",[[1,389,"通过"]],[389,389],[391,391]]],[1521556737852,["Kotlin@DESKTOP-C3FKI4V",[[-1,389,"通过"]],[389,391],[389,389]]],[1521556741524,["Kotlin@DESKTOP-C3FKI4V",[[1,389,"Activities"]],[389,389],[399,399]]],[1521556744270,["Kotlin@DESKTOP-C3FKI4V",[[-1,389,"Activities"]],[399,399],[389,389]]],[1521556745525,["Kotlin@DESKTOP-C3FKI4V",[[1,389,"tong"]],[389,389],[393,393]]],[1521556746571,["Kotlin@DESKTOP-C3FKI4V",[[-1,389,"tong"]],[393,393],[389,389]]],[1521556755178,["Kotlin@DESKTOP-C3FKI4V",[[1,389,"通过我们自己实现Activity的"]],[389,389],[406,406]]],[1521556763947,["Kotlin@DESKTOP-C3FKI4V",[[1,406,"onCreat"]],[406,406],[413,413]]],[1521556767425,["Kotlin@DESKTOP-C3FKI4V",[[1,406," "]],[406,406],[407,407]]],[1521556768576,["Kotlin@DESKTOP-C3FKI4V",[[1,405," "]],[405,405],[406,406]]],[1521556770601,["Kotlin@DESKTOP-C3FKI4V",[[1,397," "]],[397,397],[398,398]]],[1521556809901,["Kotlin@DESKTOP-C3FKI4V",[[-1,391,"我们自己实现"],[1,397,"重写"]],[391,397],[393,393]]],[1521556812694,["Kotlin@DESKTOP-C3FKI4V",[[1,412,"e"]],[405,412],[413,413]]],[1521556813987,["Kotlin@DESKTOP-C3FKI4V",[[-1,412,"e"]],[413,413],[405,412]]],[1521556814950,["Kotlin@DESKTOP-C3FKI4V",[[1,412,"e"]],[405,412],[413,413]]],[1521556816815,["Kotlin@DESKTOP-C3FKI4V",[[1,413," fang"]],[413,413],[418,418]]],[1521556817585,["Kotlin@DESKTOP-C3FKI4V",[[-1,414,"fang"]],[418,418],[414,414]]],[1521556820119,["Kotlin@DESKTOP-C3FKI4V",[[1,414,"方法设置"]],[414,414],[418,418]]],[1521556821113,["Kotlin@DESKTOP-C3FKI4V",[[-1,416,"设置"]],[418,418],[416,416]]],[1521556830604,["Kotlin@DESKTOP-C3FKI4V",[[1,416,"并调用 setContentView ()"]],[416,416],[437,437]]],[1521556835922,["Kotlin@DESKTOP-C3FKI4V",[[1,436," layoutId"]],[436,436],[445,445]]],[1521556838847,["Kotlin@DESKTOP-C3FKI4V",[[-1,438,"a"]],[438,438],[438,438]]],[1521556839750,["Kotlin@DESKTOP-C3FKI4V",[[1,438,"L"]],[438,438],[439,439]]],[1521556842485,["Kotlin@DESKTOP-C3FKI4V",[[-1,437,"l"]],[437,437],[437,437]]],[1521556843612,["Kotlin@DESKTOP-C3FKI4V",[[1,438,"a"]],[438,438],[439,439]]],[1521556845819,["Kotlin@DESKTOP-C3FKI4V",[[1,445," "]],[445,445],[446,446]]],[1521556852286,["Kotlin@DESKTOP-C3FKI4V",[[1,447," la"]],[447,447],[450,450]]],[1521556852883,["Kotlin@DESKTOP-C3FKI4V",[[-1,448,"la"]],[450,450],[448,448]]],[1521556868908,["Kotlin@DESKTOP-C3FKI4V",[[1,448,"来实现对  screen_simple.xml  中 content区域"]],[448,448],[484,484]]],[1521556870240,["Kotlin@DESKTOP-C3FKI4V",[[1,482," "]],[482,482],[483,483]]],[1521556873923,["Kotlin@DESKTOP-C3FKI4V",[[1,485," 的填充"]],[485,485],[489,489]]],[1521556876303,["Kotlin@DESKTOP-C3FKI4V",[[1,489,"，"]],[489,489],[490,490]]],[1521556879181,["Kotlin@DESKTOP-C3FKI4V",[[-1,485," "]],[486,486],[485,485]]],[1521556882627,["Kotlin@DESKTOP-C3FKI4V",[[-1,488,"，"]],[489,489],[488,488]]],[1521556882898,["Kotlin@DESKTOP-C3FKI4V",[[1,488,"；"]],[488,488],[489,489]]],[1521556916202,["Kotlin@DESKTOP-C3FKI4V",[[1,488,"，一般我们UI设计中都使用不到"]],[488,488],[503,503]]],[1521556920638,["Kotlin@DESKTOP-C3FKI4V",[[-1,491,"我们UI设计中都使用不到"]],[503,503],[491,491]]],[1521556943424,["Kotlin@DESKTOP-C3FKI4V",[[1,491,"如果我们的UI设计的不是符合MD设计风格的，很难直接使用系统所提供的"]],[491,491],[525,525]]],[1521556956086,["Kotlin@DESKTOP-C3FKI4V",[[1,525," action_mode_bar_stub q"]],[525,525],[548,548]]],[1521556956768,["Kotlin@DESKTOP-C3FKI4V",[[-1,547,"q"]],[548,548],[547,547]]],[1521556958838,["Kotlin@DESKTOP-C3FKI4V",[[1,547,"区域，"]],[547,547],[550,550]]],[1521556960547,["Kotlin@DESKTOP-C3FKI4V",[[-1,549,"，"]],[550,550],[549,549]]],[1521556979518,["Kotlin@DESKTOP-C3FKI4V",[[1,550,"\n\n"]],[550,550],[551,551]]],[1521556979686,["Kotlin@DESKTOP-C3FKI4V",[[1,552,"\n"]],[551,551],[552,552]]],[1521556986573,["Kotlin@DESKTOP-C3FKI4V",[[-1,552,"\n"],[1,553,"通过上面的介绍"]],[552,552],[559,559]]],[1521556991550,["Kotlin@DESKTOP-C3FKI4V",[[-1,551,"\n通过上面的介绍"]],[551,559],[551,551]]],[1521556993474,["Kotlin@DESKTOP-C3FKI4V",[[1,551,"\n\n"]],[551,551],[552,552]]],[1521556993623,["Kotlin@DESKTOP-C3FKI4V",[[1,553,"\n"]],[552,552],[553,553]]],[1521556994401,["Kotlin@DESKTOP-C3FKI4V",[[-1,553,"\n"]],[553,553],[552,552]]],[1521557009878,["Kotlin@DESKTOP-C3FKI4V",[[-1,552,"\n"],[1,553,"点进 setContentView chaka"]],[552,552],[575,575]]],[1521557010923,["Kotlin@DESKTOP-C3FKI4V",[[-1,570,"chaka"]],[575,575],[570,570]]],[1521557018490,["Kotlin@DESKTOP-C3FKI4V",[[1,570,"查看实现，发现"]],[570,570],[577,577]]],[1521557050091,["Kotlin@DESKTOP-C3FKI4V",[[1,577,"布局的填充使用的是 LayoutInflater "]],[577,577],[602,602]]],[1521557055113,["Kotlin@DESKTOP-C3FKI4V",[[-1,601," "]],[602,602],[601,601]]],[1521557062480,["Kotlin@DESKTOP-C3FKI4V",[[1,601,".inflate jinxing"]],[601,601],[617,617]]],[1521557063808,["Kotlin@DESKTOP-C3FKI4V",[[-1,610,"jinxing"]],[617,617],[610,610]]],[1521557065224,["Kotlin@DESKTOP-C3FKI4V",[[1,610,"就你行"]],[610,610],[613,613]]],[1521557066291,["Kotlin@DESKTOP-C3FKI4V",[[-1,609," 就你行"]],[613,613],[609,609]]],[1521557071829,["Kotlin@DESKTOP-C3FKI4V",[[1,609," 进行的布局填充操作"]],[609,609],[619,619]]],[1521557081626,["Kotlin@DESKTOP-C3FKI4V",[[-1,613,"布局填充操作"]],[619,619],[613,613]]],[1521557083023,["Kotlin@DESKTOP-C3FKI4V",[[1,613,"xml"]],[613,613],[616,616]]],[1521557084242,["Kotlin@DESKTOP-C3FKI4V",[[-1,613,"xml"]],[616,616],[613,613]]],[1521557101812,["Kotlin@DESKTOP-C3FKI4V",[[1,613,"布局初始化操作，那么"]],[613,613],[623,623]]],[1521557105333,["Kotlin@DESKTOP-C3FKI4V",[[-1,621,"那么"]],[623,623],[621,621]]],[1521557115667,["Kotlin@DESKTOP-C3FKI4V",[[1,621,"追根溯源，我们再次点击"]],[621,621],[632,632]]],[1521557119148,["Kotlin@DESKTOP-C3FKI4V",[[-1,620,"，追根溯源，我们再次点击"]],[632,632],[620,620]]],[1521557149140,["Kotlin@DESKTOP-C3FKI4V",[[-1,552,"点进 setContentView 查看实现，发现布局的填充使用的是 LayoutInflater.inflate 进行的布局初始化操作"]],[552,620],[552,552]]],[1521557150349,["Kotlin@DESKTOP-C3FKI4V",[[1,552,"\n\n"]],[552,552],[553,553]]],[1521557152246,["Kotlin@DESKTOP-C3FKI4V",[[-1,553,"\n"]],[553,553],[552,552]]],[1521557161821,["Kotlin@DESKTOP-C3FKI4V",[[-1,552,"\n"],[1,553,"查看PhoneWindw"]],[552,552],[564,564]]],[1521557162796,["Kotlin@DESKTOP-C3FKI4V",[[-1,563,"w"]],[564,564],[563,563]]],[1521557163837,["Kotlin@DESKTOP-C3FKI4V",[[1,563,"ow"]],[563,563],[565,565]]],[1521557167196,["Kotlin@DESKTOP-C3FKI4V",[[1,554," "]],[554,554],[555,555]]],[1521557169102,["Kotlin@DESKTOP-C3FKI4V",[[1,566," yuan"]],[566,566],[571,571]]],[1521557170057,["Kotlin@DESKTOP-C3FKI4V",[[-1,567,"yuan"]],[571,571],[567,567]]],[1521557174937,["Kotlin@DESKTOP-C3FKI4V",[[1,567,"原码可以看到"]],[567,567],[573,573]]],[1521557176844,["Kotlin@DESKTOP-C3FKI4V",[[1,573,"\n\n"]],[573,573],[574,574]]],[1521557179926,["Kotlin@DESKTOP-C3FKI4V",[[-1,574,"\n"],[1,575,"```java"]],[574,574],[581,581]]],[1521557180120,["Kotlin@DESKTOP-C3FKI4V",[[1,581,"\n\n"]],[581,581],[582,582]]],[1521557181269,["Kotlin@DESKTOP-C3FKI4V",[[-1,582,"\n"],[1,583,"```"]],[582,582],[585,585]]],[1521557182571,["Kotlin@DESKTOP-C3FKI4V",[[1,582,"\n"]],[581,581],[582,582]]],[1521557183137,["Kotlin@DESKTOP-C3FKI4V",[[1,582,"@Override public void setContentView(int layoutResID) {\n    // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n // decor, when theme attributes and the like are crystalized. Do not check the feature // before this happens.  if (mContentParent == null) {\n        installDecor();\n  } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n        mContentParent.removeAllViews();\n  }\n\n    if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n        final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n  getContext());\n  transitionTo(newScene);\n  } else {\n        mLayoutInflater.inflate(layoutResID, mContentParent);\n  }\n    mContentParent.requestApplyInsets();\n final Callback cb = getCallback();\n if (cb != null && !isDestroyed()) {\n        cb.onContentChanged();\n  }\n    mContentParentExplicitlySet = true; }"]],[582,582],[1445,1445]]],[1521557188132,["Kotlin@DESKTOP-C3FKI4V",[[-1,582,"@Override public void setContentView(int layoutResID) {\n    // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n // decor, when theme attributes and the like are crystalized. Do not check the feature // before this happens.  if (mContentParent == null) {\n        installDecor();\n  } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n        mContentParent.removeAllViews();\n  }\n\n    if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n        final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n  getContext());\n  transitionTo(newScene);\n  } else {\n        mLayoutInflater.inflate(layoutResID, mContentParent);\n  }\n    mContentParent.requestApplyInsets();\n final Callback cb = getCallback();\n if (cb != null && !isDestroyed()) {\n        cb.onContentChanged();\n  }\n    mContentParentExplicitlySet = true; }"]],[1445,1445],[582,582]]],[1521557189103,["Kotlin@DESKTOP-C3FKI4V",[[1,582," @Override\r\n    public void setContentView(int layoutResID) {\r\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\r\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\r\n        // before this happens.\r\n        if (mContentParent == null) {\r\n            installDecor();\r\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\r\n            mContentParent.removeAllViews();\r\n        }\r\n\r\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\r\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\r\n                    getContext());\r\n            transitionTo(newScene);\r\n        } else {\r\n            mLayoutInflater.inflate(layoutResID, mContentParent);\r\n        }\r\n        mContentParent.requestApplyInsets();\r\n        final Callback cb = getCallback();\r\n        if (cb != null && !isDestroyed()) {\r\n            cb.onContentChanged();\r\n        }\r\n        mContentParentExplicitlySet = true;\r\n    }"]],[582,582],[1608,1608]]],[1521557250235,[null,[[-1,592,"\r"],[1,593,"\n"],[-1,643,"\r"],[1,644,"\n"],[-1,740,"\r"],[1,741,"\n"],[-1,836,"\r"],[1,837,"\n"],[-1,869,"\r"],[1,870,"\n"],[-1,908,"\r"],[1,909,"\n"],[-1,937,"\r"],[1,938,"\n"],[-1,1001,"\r"],[1,1002,"\n"],[-1,1047,"\r"],[1,1048,"\n"],[-1,1058,"\r\n\r"],[1,1061,"\n\n\n"],[-1,1116,"\r"],[1,1117,"\n"],[-1,1205,"\r"],[1,1206,"\n"],[-1,1241,"\r"],[1,1242,"\n"],[-1,1278,"\r"],[1,1279,"\n"],[-1,1296,"\r"],[1,1297,"\n"],[-1,1363,"\r"],[1,1364,"\n"],[-1,1374,"\r"],[1,1375,"\n"],[-1,1420,"\r"],[1,1421,"\n"],[-1,1464,"\r"],[1,1465,"\n"],[-1,1509,"\r"],[1,1510,"\n"],[-1,1545,"\r"],[1,1546,"\n"],[-1,1556,"\r"],[1,1557,"\n"],[-1,1601,"\r"],[1,1602,"\n"]],[592,592],[1603,1603]]],[1521557250235,[null,[[1,592,"\r"],[-1,592,"\n"],[1,643,"\r"],[-1,643,"\n"],[1,740,"\r"],[-1,740,"\n"],[1,836,"\r"],[-1,836,"\n"],[1,869,"\r"],[-1,869,"\n"],[1,908,"\r"],[-1,908,"\n"],[1,937,"\r"],[-1,937,"\n"],[1,1001,"\r"],[-1,1001,"\n"],[1,1047,"\r"],[-1,1047,"\n"],[1,1058,"\r\n\r"],[-1,1058,"\n\n\n"],[1,1116,"\r"],[-1,1116,"\n"],[1,1205,"\r"],[-1,1205,"\n"],[1,1241,"\r"],[-1,1241,"\n"],[1,1278,"\r"],[-1,1278,"\n"],[1,1296,"\r"],[-1,1296,"\n"],[1,1363,"\r"],[-1,1363,"\n"],[1,1374,"\r"],[-1,1374,"\n"],[1,1420,"\r"],[-1,1420,"\n"],[1,1464,"\r"],[-1,1464,"\n"],[1,1509,"\r"],[-1,1509,"\n"],[1,1545,"\r"],[-1,1545,"\n"],[1,1556,"\r"],[-1,1556,"\n"],[1,1601,"\r"],[-1,1601,"\n"]],[1603,1603],[592,592]]],[1521557203500,["Kotlin@DESKTOP-C3FKI4V",[[1,573,"t"],[-1,574,""],[-1,592,"\r"],[-1,643,"\r"],[-1,740,"\r"],[-1,836,"\r"],[-1,869,"\r"],[-1,908,"\r"],[-1,937,"\r"],[-1,1001,"\r"],[-1,1047,"\r"],[-1,1058,"\r"],[-1,1060,"\r"],[-1,1116,"\r"],[-1,1205,"\r"],[-1,1241,"\r"],[-1,1278,"\r"],[-1,1296,"\r"],[-1,1363,"\r"],[-1,1374,"\r"],[-1,1420,"\r"],[-1,1464,"\r"],[-1,1509,"\r"],[-1,1545,"\r"],[-1,1556,"\r"],[-1,1601,"\r"]],[573,573],[574,574]]],[1521557203783,["Kotlin@DESKTOP-C3FKI4V",[[1,574,"ian"]],[574,574],[577,577]]],[1521557204971,["Kotlin@DESKTOP-C3FKI4V",[[-1,573,"tian"]],[577,577],[573,573]]],[1521557214143,["Kotlin@DESKTOP-C3FKI4V",[[1,573,"填充 我们视图的"]],[573,573],[581,581]]],[1521557214715,["Kotlin@DESKTOP-C3FKI4V",[[-1,580,"的"]],[581,581],[580,580]]],[1521557217035,["Kotlin@DESKTOP-C3FKI4V",[[1,580,"使用的是"]],[580,580],[584,584]]],[1521557220062,["Kotlin@DESKTOP-C3FKI4V",[[-1,575," 我们视图使用的是"]],[584,584],[575,575]]],[1521557222994,["Kotlin@DESKTOP-C3FKI4V",[[1,575,"视图使用的是"]],[575,575],[581,581]]],[1521557225901,["Kotlin@DESKTOP-C3FKI4V",[[-1,576,"图使用的是"]],[581,581],[576,576]]],[1521557226585,["Kotlin@DESKTOP-C3FKI4V",[[1,576,"器"]],[576,576],[577,577]]],[1521557226963,["Kotlin@DESKTOP-C3FKI4V",[[-1,575,"视器"]],[577,577],[575,575]]],[1521557229577,["Kotlin@DESKTOP-C3FKI4V",[[1,575,"视图钱"]],[575,575],[578,578]]],[1521557230027,["Kotlin@DESKTOP-C3FKI4V",[[-1,577,"钱"]],[578,578],[577,577]]],[1521557233557,["Kotlin@DESKTOP-C3FKI4V",[[1,577,"前使用的是 mLayoutInflater.inflate("]],[577,577],[607,607]]],[1521557236680,["Kotlin@DESKTOP-C3FKI4V",[[-1,583,"m"]],[584,584],[583,583]]],[1521557238232,["Kotlin@DESKTOP-C3FKI4V",[[-1,605,"("]],[606,606],[605,605]]],[1521557242930,["Kotlin@DESKTOP-C3FKI4V",[[1,605," 进行的初始化操作"]],[605,605],[614,614]]],[1521557245781,["Kotlin@DESKTOP-C3FKI4V",[[-1,583,"LayoutInflater.inflate "]],[583,606],[583,583]]],[1521557247315,["Kotlin@DESKTOP-C3FKI4V",[[1,583,"··"]],[583,583],[585,585]]],[1521557248265,["Kotlin@DESKTOP-C3FKI4V",[[-1,583,"··"]],[585,585],[583,583]]],[1521557249135,["Kotlin@DESKTOP-C3FKI4V",[[1,583,"```"]],[583,583],[586,586]]],[1521557250725,["Kotlin@DESKTOP-C3FKI4V",[[1,586,"```"]],[586,586],[589,589]]],[1521557251970,["Kotlin@DESKTOP-C3FKI4V",[[1,586,"LayoutInflater.inflate "]],[586,586],[609,609]]],[1521557266195,["Kotlin@DESKTOP-C3FKI4V",[[1,620,","]],[620,620],[621,621]]],[1521557266938,["Kotlin@DESKTOP-C3FKI4V",[[-1,620,","]],[621,621],[620,620]]],[1521557270134,["Kotlin@DESKTOP-C3FKI4V",[[1,1635,"\n\n"]],[1635,1635],[1636,1636]]],[1521557270625,["Kotlin@DESKTOP-C3FKI4V",[[1,1637,"\n"]],[1636,1636],[1637,1637]]],[1521557274310,["Kotlin@DESKTOP-C3FKI4V",[[1,1636,"jinru"]],[1636,1636],[1641,1641]]],[1521557275379,["Kotlin@DESKTOP-C3FKI4V",[[-1,1636,"jinru"]],[1641,1641],[1636,1636]]],[1521557285918,["Kotlin@DESKTOP-C3FKI4V",[[1,1636,"进入LayoutInfleater"]],[1636,1636],[1653,1653]]],[1521557301458,["Kotlin@DESKTOP-C3FKI4V",[[-1,1638,"LayoutInfleater"],[1,1653," LayoutInflater 进行"]],[1638,1653],[1656,1656]]],[1521557303400,["Kotlin@DESKTOP-C3FKI4V",[[-1,1654,"进行"]],[1656,1656],[1654,1654]]],[1521557304852,["Kotlin@DESKTOP-C3FKI4V",[[1,1654,"对于ing"]],[1654,1654],[1659,1659]]],[1521557305816,["Kotlin@DESKTOP-C3FKI4V",[[-1,1654,"对于ing"]],[1659,1659],[1654,1654]]],[1521557317784,["Kotlin@DESKTOP-C3FKI4V",[[1,1654,"对应的 inflate "]],[1654,1654],[1666,1666]]],[1521557318591,["Kotlin@DESKTOP-C3FKI4V",[[-1,1665," "]],[1666,1666],[1665,1665]]],[1521557319045,["Kotlin@DESKTOP-C3FKI4V",[[1,1665,"()"]],[1665,1665],[1667,1667]]],[1521557322280,["Kotlin@DESKTOP-C3FKI4V",[[-1,1658,"inflate()"]],[1658,1667],[1658,1658]]],[1521557323784,["Kotlin@DESKTOP-C3FKI4V",[[1,1658,"···"]],[1658,1658],[1661,1661]]],[1521557324837,["Kotlin@DESKTOP-C3FKI4V",[[-1,1658,"···"]],[1661,1661],[1658,1658]]],[1521557331669,["Kotlin@DESKTOP-C3FKI4V",[[1,1658,"```inflate()``` f"]],[1658,1658],[1675,1675]]],[1521557331906,["Kotlin@DESKTOP-C3FKI4V",[[1,1676,"n"]],[1676,1676],[1677,1677]]],[1521557332588,["Kotlin@DESKTOP-C3FKI4V",[[-1,1674,"fan"]],[1677,1677],[1674,1674]]],[1521557336422,["Kotlin@DESKTOP-C3FKI4V",[[1,1674,"方法查看，"]],[1674,1674],[1679,1679]]],[1521557370698,[null,[[1,1680,"\n"]],[1680,1680],[1681,1681]]],[1521557370698,[null,[[-1,1680,"\n"]],[1681,1681],[1680,1680]]],[1521557343459,["Kotlin@DESKTOP-C3FKI4V",[[-1,1678,"，"]],[1679,1679],[1678,1678]]],[1521557344250,["Kotlin@DESKTOP-C3FKI4V",[[1,1678,"；"]],[1678,1678],[1679,1679]]],[1521557344438,["Kotlin@DESKTOP-C3FKI4V",[[1,1681,"\n"]],[1679,1679],[1680,1680]]],[1521557345566,["Kotlin@DESKTOP-C3FKI4V",[[-1,1681,"\n"]],[1680,1680],[1679,1679]]],[1521557346057,["Kotlin@DESKTOP-C3FKI4V",[[-1,1678,"；"]],[1679,1679],[1678,1678]]],[1521557347538,["Kotlin@DESKTOP-C3FKI4V",[[1,1680,"\n"]],[1678,1678],[1679,1679]]],[1521557349076,["Kotlin@DESKTOP-C3FKI4V",[[1,1679,"···"]],[1679,1679],[1682,1682]]],[1521557349997,["Kotlin@DESKTOP-C3FKI4V",[[-1,1679,"···"]],[1682,1682],[1679,1679]]],[1521557352005,["Kotlin@DESKTOP-C3FKI4V",[[1,1679,"```java"]],[1679,1679],[1686,1686]]],[1521557352294,["Kotlin@DESKTOP-C3FKI4V",[[1,1688,"\n"]],[1686,1686],[1687,1687]]],[1521557353876,["Kotlin@DESKTOP-C3FKI4V",[[1,1687,"```"]],[1687,1687],[1690,1690]]],[1521557355068,["Kotlin@DESKTOP-C3FKI4V",[[1,1687,"\n"]],[1687,1687],[1688,1688]]],[1521557369971,["Kotlin@DESKTOP-C3FKI4V",[[1,1687,"public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\r\n        final Resources res = getContext().getResources();\r\n        if (DEBUG) {\r\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\r\n                    + Integer.toHexString(resource) + \")\");\r\n        }\r\n\r\n        final XmlResourceParser parser = res.getLayout(resource);\r\n        try {\r\n            return inflate(parser, root, attachToRoot);\r\n        } finally {\r\n            parser.close();\r\n        }\r\n    }"]],[1687,1687],[2239,2239]]],[1521557599074,[null,[[-1,1781,"\r"],[1,1782,"\n"],[-1,1841,"\r"],[1,1842,"\n"],[-1,1863,"\r"],[1,1864,"\n"],[-1,1958,"\r"],[1,1959,"\n"],[-1,2019,"\r"],[1,2020,"\n"],[-1,2030,"\r\n\r"],[1,2033,"\n\n\n"],[-1,2099,"\r"],[1,2100,"\n"],[-1,2114,"\r"],[1,2115,"\n"],[-1,2171,"\r"],[1,2172,"\n"],[-1,2192,"\r"],[1,2193,"\n"],[-1,2221,"\r"],[1,2222,"\n"],[-1,2232,"\r"],[1,2233,"\n"]],[1781,1781],[2234,2234]]],[1521557599074,[null,[[1,1781,"\r"],[-1,1781,"\n"],[1,1841,"\r"],[-1,1841,"\n"],[1,1863,"\r"],[-1,1863,"\n"],[1,1958,"\r"],[-1,1958,"\n"],[1,2019,"\r"],[-1,2019,"\n"],[1,2030,"\r\n\r"],[-1,2030,"\n\n\n"],[1,2099,"\r"],[-1,2099,"\n"],[1,2114,"\r"],[-1,2114,"\n"],[1,2171,"\r"],[-1,2171,"\n"],[1,2192,"\r"],[-1,2192,"\n"],[1,2221,"\r"],[-1,2221,"\n"],[1,2232,"\r"],[-1,2232,"\n"]],[2234,2234],[1781,1781]]],[1521557597942,["Kotlin@DESKTOP-C3FKI4V",[[1,1687," /**\r\n     * Inflate a new view hierarchy from the specified xml resource. Throws\r\n     * {@link InflateException} if there is an error.\r\n     *\r\n     * @param resource ID for an XML layout resource to load (e.g.,\r\n     *        <code>R.layout.main_page</code>)\r\n     * @param root Optional view to be the parent of the generated hierarchy (if\r\n     *        <em>attachToRoot</em> is true), or else simply an object that\r\n     *        provides a set of LayoutParams values for root of the returned\r\n     *        hierarchy (if <em>attachToRoot</em> is false.)\r\n     * @param attachToRoot Whether the inflated hierarchy should be attached to\r\n     *        the root parameter? If false, root is only used to create the\r\n     *        correct subclass of LayoutParams for the root view in the XML.\r\n     * @return The root View of the inflated hierarchy. If root was supplied and\r\n     *         attachToRoot is true, this is root; otherwise it is the root of\r\n     *         the inflated XML file.\r\n     */\r\n    "]],[1687,2226],[3251,3251]]],[1521557602899,[null,[[-1,1691,"\r"],[1,1692,"\n"],[-1,1768,"\r"],[1,1769,"\n"],[-1,1823,"\r"],[1,1824,"\n"],[-1,1831,"\r"],[1,1832,"\n"],[-1,1900,"\r"],[1,1901,"\n"],[-1,1948,"\r"],[1,1949,"\n"],[-1,2030,"\r"],[1,2031,"\n"],[-1,2107,"\r"],[1,2108,"\n"],[-1,2185,"\r"],[1,2186,"\n"],[-1,2247,"\r"],[1,2248,"\n"],[-1,2328,"\r"],[1,2329,"\n"],[-1,2405,"\r"],[1,2406,"\n"],[-1,2483,"\r"],[1,2484,"\n"],[-1,2565,"\r"],[1,2566,"\n"],[-1,2645,"\r"],[1,2646,"\n"],[-1,2684,"\r"],[1,2685,"\n"],[-1,2693,"\r"],[1,2694,"\n"],[-1,2793,"\r"],[1,2794,"\n"],[-1,2853,"\r"],[1,2854,"\n"],[-1,2875,"\r"],[1,2876,"\n"],[-1,2970,"\r"],[1,2971,"\n"],[-1,3031,"\r"],[1,3032,"\n"],[-1,3042,"\r\n\r"],[1,3045,"\n\n\n"],[-1,3111,"\r"],[1,3112,"\n"],[-1,3126,"\r"],[1,3127,"\n"],[-1,3183,"\r"],[1,3184,"\n"],[-1,3204,"\r"],[1,3205,"\n"],[-1,3233,"\r"],[1,3234,"\n"],[-1,3244,"\r"],[1,3245,"\n"]],[1691,1691],[3246,3246]]],[1521557602899,[null,[[1,1691,"\r"],[-1,1691,"\n"],[1,1768,"\r"],[-1,1768,"\n"],[1,1823,"\r"],[-1,1823,"\n"],[1,1831,"\r"],[-1,1831,"\n"],[1,1900,"\r"],[-1,1900,"\n"],[1,1948,"\r"],[-1,1948,"\n"],[1,2030,"\r"],[-1,2030,"\n"],[1,2107,"\r"],[-1,2107,"\n"],[1,2185,"\r"],[-1,2185,"\n"],[1,2247,"\r"],[-1,2247,"\n"],[1,2328,"\r"],[-1,2328,"\n"],[1,2405,"\r"],[-1,2405,"\n"],[1,2483,"\r"],[-1,2483,"\n"],[1,2565,"\r"],[-1,2565,"\n"],[1,2645,"\r"],[-1,2645,"\n"],[1,2684,"\r"],[-1,2684,"\n"],[1,2693,"\r"],[-1,2693,"\n"],[1,2793,"\r"],[-1,2793,"\n"],[1,2853,"\r"],[-1,2853,"\n"],[1,2875,"\r"],[-1,2875,"\n"],[1,2970,"\r"],[-1,2970,"\n"],[1,3031,"\r"],[-1,3031,"\n"],[1,3042,"\r\n\r"],[-1,3042,"\n\n\n"],[1,3111,"\r"],[-1,3111,"\n"],[1,3126,"\r"],[-1,3126,"\n"],[1,3183,"\r"],[-1,3183,"\n"],[1,3204,"\r"],[-1,3204,"\n"],[1,3233,"\r"],[-1,3233,"\n"],[1,3244,"\r"],[-1,3244,"\n"]],[3246,3246],[1691,1691]]],[1521557601716,["Kotlin@DESKTOP-C3FKI4V",[[-1,1691,"\r"],[-1,1768,"\r"],[-1,1823,"\r"],[-1,1831,"\r"],[-1,1900,"\r"],[-1,1948,"\r"],[-1,2030,"\r"],[-1,2107,"\r"],[-1,2185,"\r"],[-1,2247,"\r"],[-1,2328,"\r"],[-1,2405,"\r"],[-1,2483,"\r"],[-1,2565,"\r"],[-1,2645,"\r"],[-1,2684,"\r"],[-1,2693,"\r"],[-1,2793,"\r"],[-1,2853,"\r"],[-1,2875,"\r"],[-1,2970,"\r"],[-1,3031,"\r"],[-1,3042,"\r"],[-1,3044,"\r"],[-1,3111,"\r"],[-1,3126,"\r"],[-1,3183,"\r"],[-1,3204,"\r"],[-1,3233,"\r"],[-1,3244,"\r"],[1,3251,"\n"]],[3221,3221],[3222,3222]]],[1521557601882,["Kotlin@DESKTOP-C3FKI4V",[[1,3223,"\n"]],[3222,3222],[3223,3223]]],[1521557602054,["Kotlin@DESKTOP-C3FKI4V",[[1,3224,"\n"]],[3223,3223],[3224,3224]]],[1521557602225,["Kotlin@DESKTOP-C3FKI4V",[[1,3225,"\n"]],[3224,3224],[3225,3225]]],[1521557602376,["Kotlin@DESKTOP-C3FKI4V",[[1,3226,"\n"]],[3225,3225],[3226,3226]]],[1521557616200,["Kotlin@DESKTOP-C3FKI4V",[[1,3226,"/**\n * Inflate a new view hierarchy from the specified XML node. Throws * {@link InflateException} if there is an error.\n * <p>\n  * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance\n * reasons, view inflation relies heavily on pre-processing of XML files * that is done at build time. Therefore, it is not currently possible to * use LayoutInflater with an XmlPullParser over a plain XML file at runtime. * * @param parser XML dom node containing the description of the view\n *        hierarchy. * @param root Optional view to be the parent of the generated hierarchy (if\n * <em>attachToRoot</em> is true), or else simply an object that\n *        provides a set of LayoutParams values for root of the returned *        hierarchy (if <em>attachToRoot</em> is false.)\n * @param attachToRoot Whether the inflated hierarchy should be attached to\n *        the root parameter? If false, root is only used to create the *        correct subclass of LayoutParams for the root view in the XML. * @return The root View of the inflated hierarchy. If root was supplied and\n *         attachToRoot is true, this is root; otherwise it is the root of *         the inflated XML file. */ public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n    synchronized (mConstructorArgs) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");   final Context inflaterContext = mContext;\n final AttributeSet attrs = Xml.asAttributeSet(parser);\n  Context lastContext = (Context) mConstructorArgs[0];\n  mConstructorArgs[0] = inflaterContext;\n  View result = root;   try {\n            // Look for the root node.\n  int type;\n while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                    type != XmlPullParser.END_DOCUMENT) {\n                // Empty\n  }\n\n            if (type != XmlPullParser.START_TAG) {\n                throw new InflateException(parser.getPositionDescription()\n                        + \": No start tag found!\");\n  }\n\n            final String name = parser.getName();   if (DEBUG) {\n                System.out.println(\"**************************\");\n  System.out.println(\"Creating root view: \"\n  + name);\n  System.out.println(\"**************************\");\n  }\n\n            if (TAG_MERGE.equals(name)) {\n                if (root == null || !attachToRoot) {\n                    throw new InflateException(\"<merge /> can be used only with a valid \"\n  + \"ViewGroup root and attachToRoot=true\");\n  }\n\n                rInflate(parser, root, inflaterContext, attrs, false);\n  } else {\n                // Temp is the root view that was found in the xml\n  final View temp = createViewFromTag(root, name, inflaterContext, attrs);    ViewGroup.LayoutParams params = null;   if (root != null) {\n                    if (DEBUG) {\n                        System.out.println(\"Creating params from root: \" +\n                                root);\n  }\n                    // Create layout params that match root, if supplied\n  params = root.generateLayoutParams(attrs);\n if (!attachToRoot) {\n                        // Set the layout params for temp if we are not\n // attaching. (If we are, we use addView, below)  temp.setLayoutParams(params);\n  }\n                }\n\n                if (DEBUG) {\n                    System.out.println(\"-----> start inflating children\");\n  }\n\n                // Inflate all children under temp against its context.\n  rInflateChildren(parser, temp, attrs, true);   if (DEBUG) {\n                    System.out.println(\"-----> done inflating children\");\n  }\n\n                // We are supposed to attach all the views we found (int temp)\n // to root. Do that now.  if (root != null && attachToRoot) {\n                    root.addView(temp, params);\n  }\n\n                // Decide whether to return the root that was passed in or the\n // top view found in xml.  if (root == null || !attachToRoot) {\n                    result = temp;\n  }\n            }\n\n        } catch (XmlPullParserException e) {\n            final InflateException ie = new InflateException(e.getMessage(), e);\n  ie.setStackTrace(EMPTY_STACK_TRACE);\n throw ie;\n  } catch (Exception e) {\n            final InflateException ie = new InflateException(parser.getPositionDescription()\n                    + \": \" + e.getMessage(), e);\n  ie.setStackTrace(EMPTY_STACK_TRACE);\n throw ie;\n  } finally {\n            // Don't retain static reference on context.\n  mConstructorArgs[0] = lastContext;\n  mConstructorArgs[1] = null;    Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n  }\n\n        return result;\n  }\n}"]],[3226,3226],[7769,7769]]],[1521557618139,["Kotlin@DESKTOP-C3FKI4V",[[-1,3225,"\n"]],[3224,3224],[3224,3224]]],[1521557619066,["Kotlin@DESKTOP-C3FKI4V",[[-1,3224,"\n"]],[3224,3224],[3223,3223]]],[1521557622764,["Kotlin@DESKTOP-C3FKI4V",[[1,3224,"\n"]],[3223,3223],[3224,3224]]],[1521557623324,["Kotlin@DESKTOP-C3FKI4V",[[1,3225,"\n"]],[3224,3224],[3224,3224]]],[1521557623987,["Kotlin@DESKTOP-C3FKI4V",[[-1,3226,"/**\n * Inflate a new view hierarchy from the specified XML node. Throws * {@link InflateException} if there is an error.\n * <p>\n  * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance\n * reasons, view inflation relies heavily on pre-processing of XML files * that is done at build time. Therefore, it is not currently possible to * use LayoutInflater with an XmlPullParser over a plain XML file at runtime. * * @param parser XML dom node containing the description of the view\n *        hierarchy. * @param root Optional view to be the parent of the generated hierarchy (if\n * <em>attachToRoot</em> is true), or else simply an object that\n *        provides a set of LayoutParams values for root of the returned *        hierarchy (if <em>attachToRoot</em> is false.)\n * @param attachToRoot Whether the inflated hierarchy should be attached to\n *        the root parameter? If false, root is only used to create the *        correct subclass of LayoutParams for the root view in the XML. * @return The root View of the inflated hierarchy. If root was supplied and\n *         attachToRoot is true, this is root; otherwise it is the root of *         the inflated XML file. */ public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n    synchronized (mConstructorArgs) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");   final Context inflaterContext = mContext;\n final AttributeSet attrs = Xml.asAttributeSet(parser);\n  Context lastContext = (Context) mConstructorArgs[0];\n  mConstructorArgs[0] = inflaterContext;\n  View result = root;   try {\n            // Look for the root node.\n  int type;\n while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                    type != XmlPullParser.END_DOCUMENT) {\n                // Empty\n  }\n\n            if (type != XmlPullParser.START_TAG) {\n                throw new InflateException(parser.getPositionDescription()\n                        + \": No start tag found!\");\n  }\n\n            final String name = parser.getName();   if (DEBUG) {\n                System.out.println(\"**************************\");\n  System.out.println(\"Creating root view: \"\n  + name);\n  System.out.println(\"**************************\");\n  }\n\n            if (TAG_MERGE.equals(name)) {\n                if (root == null || !attachToRoot) {\n                    throw new InflateException(\"<merge /> can be used only with a valid \"\n  + \"ViewGroup root and attachToRoot=true\");\n  }\n\n                rInflate(parser, root, inflaterContext, attrs, false);\n  } else {\n                // Temp is the root view that was found in the xml\n  final View temp = createViewFromTag(root, name, inflaterContext, attrs);    ViewGroup.LayoutParams params = null;   if (root != null) {\n                    if (DEBUG) {\n                        System.out.println(\"Creating params from root: \" +\n                                root);\n  }\n                    // Create layout params that match root, if supplied\n  params = root.generateLayoutParams(attrs);\n if (!attachToRoot) {\n                        // Set the layout params for temp if we are not\n // attaching. (If we are, we use addView, below)  temp.setLayoutParams(params);\n  }\n                }\n\n                if (DEBUG) {\n                    System.out.println(\"-----> start inflating children\");\n  }\n\n                // Inflate all children under temp against its context.\n  rInflateChildren(parser, temp, attrs, true);   if (DEBUG) {\n                    System.out.println(\"-----> done inflating children\");\n  }\n\n                // We are supposed to attach all the views we found (int temp)\n // to root. Do that now.  if (root != null && attachToRoot) {\n                    root.addView(temp, params);\n  }\n\n                // Decide whether to return the root that was passed in or the\n // top view found in xml.  if (root == null || !attachToRoot) {\n                    result = temp;\n  }\n            }\n\n        } catch (XmlPullParserException e) {\n            final InflateException ie = new InflateException(e.getMessage(), e);\n  ie.setStackTrace(EMPTY_STACK_TRACE);\n throw ie;\n  } catch (Exception e) {\n            final InflateException ie = new InflateException(parser.getPositionDescription()\n                    + \": \" + e.getMessage(), e);\n  ie.setStackTrace(EMPTY_STACK_TRACE);\n throw ie;\n  } finally {\n            // Don't retain static reference on context.\n  mConstructorArgs[0] = lastContext;\n  mConstructorArgs[1] = null;    Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n  }\n\n        return result;\n  }\n}"]],[7769,7769],[3226,3226]]],[1521557625153,["Kotlin@DESKTOP-C3FKI4V",[[1,3226,"/**\r\n     * Inflate a new view hierarchy from the specified XML node. Throws\r\n     * {@link InflateException} if there is an error.\r\n     * <p>\r\n     * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance\r\n     * reasons, view inflation relies heavily on pre-processing of XML files\r\n     * that is done at build time. Therefore, it is not currently possible to\r\n     * use LayoutInflater with an XmlPullParser over a plain XML file at runtime.\r\n     *\r\n     * @param parser XML dom node containing the description of the view\r\n     *        hierarchy.\r\n     * @param root Optional view to be the parent of the generated hierarchy (if\r\n     *        <em>attachToRoot</em> is true), or else simply an object that\r\n     *        provides a set of LayoutParams values for root of the returned\r\n     *        hierarchy (if <em>attachToRoot</em> is false.)\r\n     * @param attachToRoot Whether the inflated hierarchy should be attached to\r\n     *        the root parameter? If false, root is only used to create the\r\n     *        correct subclass of LayoutParams for the root view in the XML.\r\n     * @return The root View of the inflated hierarchy. If root was supplied and\r\n     *         attachToRoot is true, this is root; otherwise it is the root of\r\n     *         the inflated XML file.\r\n     */\r\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\r\n        synchronized (mConstructorArgs) {\r\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\r\n\r\n            final Context inflaterContext = mContext;\r\n            final AttributeSet attrs = Xml.asAttributeSet(parser);\r\n            Context lastContext = (Context) mConstructorArgs[0];\r\n            mConstructorArgs[0] = inflaterContext;\r\n            View result = root;\r\n\r\n            try {\r\n                // Look for the root node.\r\n                int type;\r\n                while ((type = parser.next()) != XmlPullParser.START_TAG &&\r\n                        type != XmlPullParser.END_DOCUMENT) {\r\n                    // Empty\r\n                }\r\n\r\n                if (type != XmlPullParser.START_TAG) {\r\n                    throw new InflateException(parser.getPositionDescription()\r\n                            + \": No start tag found!\");\r\n                }\r\n\r\n                final String name = parser.getName();\r\n\r\n                if (DEBUG) {\r\n                    System.out.println(\"**************************\");\r\n                    System.out.println(\"Creating root view: \"\r\n                            + name);\r\n                    System.out.println(\"**************************\");\r\n                }\r\n\r\n                if (TAG_MERGE.equals(name)) {\r\n                    if (root == null || !attachToRoot) {\r\n                        throw new InflateException(\"<merge /> can be used only with a valid \"\r\n                                + \"ViewGroup root and attachToRoot=true\");\r\n                    }\r\n\r\n                    rInflate(parser, root, inflaterContext, attrs, false);\r\n                } else {\r\n                    // Temp is the root view that was found in the xml\r\n                    final View temp = createViewFromTag(root, name, inflaterContext, attrs);\r\n\r\n                    ViewGroup.LayoutParams params = null;\r\n\r\n                    if (root != null) {\r\n                        if (DEBUG) {\r\n                            System.out.println(\"Creating params from root: \" +\r\n                                    root);\r\n                        }\r\n                        // Create layout params that match root, if supplied\r\n                        params = root.generateLayoutParams(attrs);\r\n                        if (!attachToRoot) {\r\n                            // Set the layout params for temp if we are not\r\n                            // attaching. (If we are, we use addView, below)\r\n                            temp.setLayoutParams(params);\r\n                        }\r\n                    }\r\n\r\n                    if (DEBUG) {\r\n                        System.out.println(\"-----> start inflating children\");\r\n                    }\r\n\r\n                    // Inflate all children under temp against its context.\r\n                    rInflateChildren(parser, temp, attrs, true);\r\n\r\n                    if (DEBUG) {\r\n                        System.out.println(\"-----> done inflating children\");\r\n                    }\r\n\r\n                    // We are supposed to attach all the views we found (int temp)\r\n                    // to root. Do that now.\r\n                    if (root != null && attachToRoot) {\r\n                        root.addView(temp, params);\r\n                    }\r\n\r\n                    // Decide whether to return the root that was passed in or the\r\n                    // top view found in xml.\r\n                    if (root == null || !attachToRoot) {\r\n                        result = temp;\r\n                    }\r\n                }\r\n\r\n            } catch (XmlPullParserException e) {\r\n                final InflateException ie = new InflateException(e.getMessage(), e);\r\n                ie.setStackTrace(EMPTY_STACK_TRACE);\r\n                throw ie;\r\n            } catch (Exception e) {\r\n                final InflateException ie = new InflateException(parser.getPositionDescription()\r\n                        + \": \" + e.getMessage(), e);\r\n                ie.setStackTrace(EMPTY_STACK_TRACE);\r\n                throw ie;\r\n            } finally {\r\n                // Don't retain static reference on context.\r\n                mConstructorArgs[0] = lastContext;\r\n                mConstructorArgs[1] = null;\r\n\r\n                Trace.traceEnd(Trace.TRACE_TAG_VIEW);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }"]],[3226,3226],[8938,8938]]],[1521557676657,[null,[[-1,3229,"\r"],[1,3230,"\n"],[-1,3302,"\r"],[1,3303,"\n"],[-1,3357,"\r"],[1,3358,"\n"],[-1,3369,"\r"],[1,3370,"\n"],[-1,3446,"\r"],[1,3447,"\n"],[-1,3524,"\r"],[1,3525,"\n"],[-1,3603,"\r"],[1,3604,"\n"],[-1,3686,"\r"],[1,3687,"\n"],[-1,3694,"\r"],[1,3695,"\n"],[-1,3768,"\r"],[1,3769,"\n"],[-1,3794,"\r"],[1,3795,"\n"],[-1,3876,"\r"],[1,3877,"\n"],[-1,3953,"\r"],[1,3954,"\n"],[-1,4031,"\r"],[1,4032,"\n"],[-1,4093,"\r"],[1,4094,"\n"],[-1,4174,"\r"],[1,4175,"\n"],[-1,4251,"\r"],[1,4252,"\n"],[-1,4329,"\r"],[1,4330,"\n"],[-1,4411,"\r"],[1,4412,"\n"],[-1,4491,"\r"],[1,4492,"\n"],[-1,4530,"\r"],[1,4531,"\n"],[-1,4539,"\r"],[1,4540,"\n"],[-1,4636,"\r"],[1,4637,"\n"],[-1,4679,"\r"],[1,4680,"\n"],[-1,4743,"\r\n\r"],[1,4746,"\n\n\n"],[-1,4800,"\r"],[1,4801,"\n"],[-1,4868,"\r"],[1,4869,"\n"],[-1,4934,"\r"],[1,4935,"\n"],[-1,4986,"\r"],[1,4987,"\n"],[-1,5019,"\r\n\r"],[1,5022,"\n\n\n"],[-1,5040,"\r"],[1,5041,"\n"],[-1,5084,"\r"],[1,5085,"\n"],[-1,5111,"\r"],[1,5112,"\n"],[-1,5188,"\r"],[1,5189,"\n"],[-1,5251,"\r"],[1,5252,"\n"],[-1,5281,"\r"],[1,5282,"\n"],[-1,5300,"\r\n\r"],[1,5303,"\n\n\n"],[-1,5358,"\r"],[1,5359,"\n"],[-1,5438,"\r"],[1,5439,"\n"],[-1,5495,"\r"],[1,5496,"\n"],[-1,5514,"\r\n\r"],[1,5517,"\n\n\n"],[-1,5571,"\r\n\r"],[1,5574,"\n\n\n"],[-1,5603,"\r"],[1,5604,"\n"],[-1,5674,"\r"],[1,5675,"\n"],[-1,5737,"\r"],[1,5738,"\n"],[-1,5775,"\r"],[1,5776,"\n"],[-1,5846,"\r"],[1,5847,"\n"],[-1,5865,"\r\n\r"],[1,5868,"\n\n\n"],[-1,5914,"\r"],[1,5915,"\n"],[-1,5972,"\r"],[1,5973,"\n"],[-1,6067,"\r"],[1,6068,"\n"],[-1,6143,"\r"],[1,6144,"\n"],[-1,6166,"\r\n\r"],[1,6169,"\n\n\n"],[-1,6244,"\r"],[1,6245,"\n"],[-1,6270,"\r"],[1,6271,"\n"],[-1,6342,"\r"],[1,6343,"\n"],[-1,6436,"\r\n\r"],[1,6439,"\n\n\n"],[-1,6497,"\r\n\r"],[1,6500,"\n\n\n"],[-1,6540,"\r"],[1,6541,"\n"],[-1,6578,"\r"],[1,6579,"\n"],[-1,6658,"\r"],[1,6659,"\n"],[-1,6702,"\r"],[1,6703,"\n"],[-1,6729,"\r"],[1,6730,"\n"],[-1,6807,"\r"],[1,6808,"\n"],[-1,6875,"\r"],[1,6876,"\n"],[-1,6921,"\r"],[1,6922,"\n"],[-1,6998,"\r"],[1,6999,"\n"],[-1,7076,"\r"],[1,7077,"\n"],[-1,7135,"\r"],[1,7136,"\n"],[-1,7162,"\r"],[1,7163,"\n"],[-1,7185,"\r\n\r"],[1,7188,"\n\n\n"],[-1,7221,"\r"],[1,7222,"\n"],[-1,7301,"\r"],[1,7302,"\n"],[-1,7324,"\r\n\r"],[1,7327,"\n\n\n"],[-1,7403,"\r"],[1,7404,"\n"],[-1,7469,"\r\n\r"],[1,7472,"\n\n\n"],[-1,7505,"\r"],[1,7506,"\n"],[-1,7584,"\r"],[1,7585,"\n"],[-1,7607,"\r\n\r"],[1,7610,"\n\n\n"],[-1,7693,"\r"],[1,7694,"\n"],[-1,7739,"\r"],[1,7740,"\n"],[-1,7796,"\r"],[1,7797,"\n"],[-1,7849,"\r"],[1,7850,"\n"],[-1,7872,"\r\n\r"],[1,7875,"\n\n\n"],[-1,7958,"\r"],[1,7959,"\n"],[-1,8005,"\r"],[1,8006,"\n"],[-1,8063,"\r"],[1,8064,"\n"],[-1,8103,"\r"],[1,8104,"\n"],[-1,8126,"\r"],[1,8127,"\n"],[-1,8145,"\r\n\r"],[1,8148,"\n\n\n"],[-1,8197,"\r"],[1,8198,"\n"],[-1,8283,"\r"],[1,8284,"\n"],[-1,8337,"\r"],[1,8338,"\n"],[-1,8364,"\r"],[1,8365,"\n"],[-1,8401,"\r"],[1,8402,"\n"],[-1,8499,"\r"],[1,8500,"\n"],[-1,8553,"\r"],[1,8554,"\n"],[-1,8607,"\r"],[1,8608,"\n"],[-1,8634,"\r"],[1,8635,"\n"],[-1,8659,"\r"],[1,8660,"\n"],[-1,8721,"\r"],[1,8722,"\n"],[-1,8773,"\r"],[1,8774,"\n"],[-1,8818,"\r\n\r"],[1,8821,"\n\n\n"],[-1,8875,"\r"],[1,8876,"\n"],[-1,8890,"\r\n\r"],[1,8893,"\n\n\n"],[-1,8920,"\r"],[1,8921,"\n"],[-1,8931,"\r"],[1,8932,"\n"]],[3229,3229],[8933,8933]]],[1521557676657,[null,[[1,3229,"\r"],[-1,3229,"\n"],[1,3302,"\r"],[-1,3302,"\n"],[1,3357,"\r"],[-1,3357,"\n"],[1,3369,"\r"],[-1,3369,"\n"],[1,3446,"\r"],[-1,3446,"\n"],[1,3524,"\r"],[-1,3524,"\n"],[1,3603,"\r"],[-1,3603,"\n"],[1,3686,"\r"],[-1,3686,"\n"],[1,3694,"\r"],[-1,3694,"\n"],[1,3768,"\r"],[-1,3768,"\n"],[1,3794,"\r"],[-1,3794,"\n"],[1,3876,"\r"],[-1,3876,"\n"],[1,3953,"\r"],[-1,3953,"\n"],[1,4031,"\r"],[-1,4031,"\n"],[1,4093,"\r"],[-1,4093,"\n"],[1,4174,"\r"],[-1,4174,"\n"],[1,4251,"\r"],[-1,4251,"\n"],[1,4329,"\r"],[-1,4329,"\n"],[1,4411,"\r"],[-1,4411,"\n"],[1,4491,"\r"],[-1,4491,"\n"],[1,4530,"\r"],[-1,4530,"\n"],[1,4539,"\r"],[-1,4539,"\n"],[1,4636,"\r"],[-1,4636,"\n"],[1,4679,"\r"],[-1,4679,"\n"],[1,4743,"\r\n\r"],[-1,4743,"\n\n\n"],[1,4800,"\r"],[-1,4800,"\n"],[1,4868,"\r"],[-1,4868,"\n"],[1,4934,"\r"],[-1,4934,"\n"],[1,4986,"\r"],[-1,4986,"\n"],[1,5019,"\r\n\r"],[-1,5019,"\n\n\n"],[1,5040,"\r"],[-1,5040,"\n"],[1,5084,"\r"],[-1,5084,"\n"],[1,5111,"\r"],[-1,5111,"\n"],[1,5188,"\r"],[-1,5188,"\n"],[1,5251,"\r"],[-1,5251,"\n"],[1,5281,"\r"],[-1,5281,"\n"],[1,5300,"\r\n\r"],[-1,5300,"\n\n\n"],[1,5358,"\r"],[-1,5358,"\n"],[1,5438,"\r"],[-1,5438,"\n"],[1,5495,"\r"],[-1,5495,"\n"],[1,5514,"\r\n\r"],[-1,5514,"\n\n\n"],[1,5571,"\r\n\r"],[-1,5571,"\n\n\n"],[1,5603,"\r"],[-1,5603,"\n"],[1,5674,"\r"],[-1,5674,"\n"],[1,5737,"\r"],[-1,5737,"\n"],[1,5775,"\r"],[-1,5775,"\n"],[1,5846,"\r"],[-1,5846,"\n"],[1,5865,"\r\n\r"],[-1,5865,"\n\n\n"],[1,5914,"\r"],[-1,5914,"\n"],[1,5972,"\r"],[-1,5972,"\n"],[1,6067,"\r"],[-1,6067,"\n"],[1,6143,"\r"],[-1,6143,"\n"],[1,6166,"\r\n\r"],[-1,6166,"\n\n\n"],[1,6244,"\r"],[-1,6244,"\n"],[1,6270,"\r"],[-1,6270,"\n"],[1,6342,"\r"],[-1,6342,"\n"],[1,6436,"\r\n\r"],[-1,6436,"\n\n\n"],[1,6497,"\r\n\r"],[-1,6497,"\n\n\n"],[1,6540,"\r"],[-1,6540,"\n"],[1,6578,"\r"],[-1,6578,"\n"],[1,6658,"\r"],[-1,6658,"\n"],[1,6702,"\r"],[-1,6702,"\n"],[1,6729,"\r"],[-1,6729,"\n"],[1,6807,"\r"],[-1,6807,"\n"],[1,6875,"\r"],[-1,6875,"\n"],[1,6921,"\r"],[-1,6921,"\n"],[1,6998,"\r"],[-1,6998,"\n"],[1,7076,"\r"],[-1,7076,"\n"],[1,7135,"\r"],[-1,7135,"\n"],[1,7162,"\r"],[-1,7162,"\n"],[1,7185,"\r\n\r"],[-1,7185,"\n\n\n"],[1,7221,"\r"],[-1,7221,"\n"],[1,7301,"\r"],[-1,7301,"\n"],[1,7324,"\r\n\r"],[-1,7324,"\n\n\n"],[1,7403,"\r"],[-1,7403,"\n"],[1,7469,"\r\n\r"],[-1,7469,"\n\n\n"],[1,7505,"\r"],[-1,7505,"\n"],[1,7584,"\r"],[-1,7584,"\n"],[1,7607,"\r\n\r"],[-1,7607,"\n\n\n"],[1,7693,"\r"],[-1,7693,"\n"],[1,7739,"\r"],[-1,7739,"\n"],[1,7796,"\r"],[-1,7796,"\n"],[1,7849,"\r"],[-1,7849,"\n"],[1,7872,"\r\n\r"],[-1,7872,"\n\n\n"],[1,7958,"\r"],[-1,7958,"\n"],[1,8005,"\r"],[-1,8005,"\n"],[1,8063,"\r"],[-1,8063,"\n"],[1,8103,"\r"],[-1,8103,"\n"],[1,8126,"\r"],[-1,8126,"\n"],[1,8145,"\r\n\r"],[-1,8145,"\n\n\n"],[1,8197,"\r"],[-1,8197,"\n"],[1,8283,"\r"],[-1,8283,"\n"],[1,8337,"\r"],[-1,8337,"\n"],[1,8364,"\r"],[-1,8364,"\n"],[1,8401,"\r"],[-1,8401,"\n"],[1,8499,"\r"],[-1,8499,"\n"],[1,8553,"\r"],[-1,8553,"\n"],[1,8607,"\r"],[-1,8607,"\n"],[1,8634,"\r"],[-1,8634,"\n"],[1,8659,"\r"],[-1,8659,"\n"],[1,8721,"\r"],[-1,8721,"\n"],[1,8773,"\r"],[-1,8773,"\n"],[1,8818,"\r\n\r"],[-1,8818,"\n\n\n"],[1,8875,"\r"],[-1,8875,"\n"],[1,8890,"\r\n\r"],[-1,8890,"\n\n\n"],[1,8920,"\r"],[-1,8920,"\n"],[1,8931,"\r"],[-1,8931,"\n"]],[8933,8933],[3229,3229]]],[1521557674682,["Kotlin@DESKTOP-C3FKI4V",[[-1,3229,"\r"],[-1,3302,"\r"],[-1,3357,"\r"],[-1,3369,"\r"],[-1,3446,"\r"],[-1,3524,"\r"],[-1,3603,"\r"],[-1,3686,"\r"],[-1,3694,"\r"],[-1,3768,"\r"],[-1,3794,"\r"],[-1,3876,"\r"],[-1,3953,"\r"],[-1,4031,"\r"],[-1,4093,"\r"],[-1,4174,"\r"],[-1,4251,"\r"],[-1,4329,"\r"],[-1,4411,"\r"],[-1,4491,"\r"],[-1,4530,"\r"],[-1,4539,"\r"],[-1,4636,"\r"],[-1,4679,"\r"],[-1,4743,"\r"],[-1,4745,"\r"],[-1,4800,"\r"],[-1,4868,"\r"],[-1,4934,"\r"],[-1,4986,"\r"],[-1,5019,"\r"],[-1,5021,"\r"],[-1,5040,"\r"],[-1,5084,"\r"],[-1,5111,"\r"],[-1,5188,"\r"],[-1,5251,"\r"],[-1,5281,"\r"],[-1,5300,"\r"],[-1,5302,"\r"],[-1,5358,"\r"],[-1,5438,"\r"],[-1,5495,"\r"],[-1,5514,"\r"],[-1,5516,"\r"],[-1,5571,"\r"],[-1,5573,"\r"],[-1,5603,"\r"],[-1,5674,"\r"],[-1,5737,"\r"],[-1,5775,"\r"],[-1,5846,"\r"],[-1,5865,"\r"],[-1,5867,"\r"],[-1,5914,"\r"],[-1,5972,"\r"],[-1,6067,"\r"],[-1,6143,"\r"],[-1,6166,"\r"],[-1,6168,"\r"],[-1,6244,"\r"],[-1,6270,"\r"],[-1,6342,"\r"],[-1,6436,"\r"],[-1,6438,"\r"],[-1,6497,"\r"],[-1,6499,"\r"],[-1,6540,"\r"],[-1,6578,"\r"],[-1,6658,"\r"],[-1,6702,"\r"],[-1,6729,"\r"],[-1,6807,"\r"],[-1,6875,"\r"],[-1,6921,"\r"],[-1,6998,"\r"],[-1,7076,"\r"],[-1,7135,"\r"],[-1,7162,"\r"],[-1,7185,"\r"],[-1,7187,"\r"],[-1,7221,"\r"],[-1,7301,"\r"],[-1,7324,"\r"],[-1,7326,"\r"],[-1,7403,"\r"],[-1,7469,"\r"],[-1,7471,"\r"],[-1,7505,"\r"],[-1,7584,"\r"],[-1,7607,"\r"],[-1,7609,"\r"],[-1,7693,"\r"],[-1,7739,"\r"],[-1,7796,"\r"],[-1,7849,"\r"],[-1,7872,"\r"],[-1,7874,"\r"],[-1,7958,"\r"],[-1,8005,"\r"],[-1,8063,"\r"],[-1,8103,"\r"],[-1,8126,"\r"],[-1,8145,"\r"],[-1,8147,"\r"],[-1,8197,"\r"],[-1,8283,"\r"],[-1,8337,"\r"],[-1,8364,"\r"],[-1,8401,"\r"],[-1,8499,"\r"],[-1,8553,"\r"],[-1,8607,"\r"],[-1,8634,"\r"],[-1,8659,"\r"],[-1,8721,"\r"],[-1,8773,"\r"],[-1,8818,"\r"],[-1,8820,"\r"],[-1,8875,"\r"],[-1,8890,"\r"],[-1,8892,"\r"],[-1,8920,"\r"],[-1,8931,"\r"],[1,8938,"\n"]],[8814,8814],[8815,8815]]],[1521557674819,["Kotlin@DESKTOP-C3FKI4V",[[1,8816,"\n"]],[8815,8815],[8816,8816]]],[1521557675021,["Kotlin@DESKTOP-C3FKI4V",[[1,8817,"\n"]],[8816,8816],[8817,8817]]],[1521557675941,["Kotlin@DESKTOP-C3FKI4V",[[1,8817,"/**\r\n     * Creates a view from a tag name using the supplied attribute set.\r\n     * <p>\r\n     * <strong>Note:</strong> Default visibility so the BridgeInflater can\r\n     * override it.\r\n     *\r\n     * @param parent the parent view, used to inflate layout params\r\n     * @param name the name of the XML tag used to define the view\r\n     * @param context the inflation context for the view, typically the\r\n     *                {@code parent} or base layout inflater context\r\n     * @param attrs the attribute set for the XML tag used to define the view\r\n     * @param ignoreThemeAttr {@code true} to ignore the {@code android:theme}\r\n     *                        attribute (if set) for the view being inflated,\r\n     *                        {@code false} otherwise\r\n     */\r\n    View createViewFromTag(View parent, String name, Context context, AttributeSet attrs,\r\n            boolean ignoreThemeAttr) {\r\n        if (name.equals(\"view\")) {\r\n            name = attrs.getAttributeValue(null, \"class\");\r\n        }\r\n\r\n        // Apply a theme wrapper, if allowed and one is specified.\r\n        if (!ignoreThemeAttr) {\r\n            final TypedArray ta = context.obtainStyledAttributes(attrs, ATTRS_THEME);\r\n            final int themeResId = ta.getResourceId(0, 0);\r\n            if (themeResId != 0) {\r\n                context = new ContextThemeWrapper(context, themeResId);\r\n            }\r\n            ta.recycle();\r\n        }\r\n\r\n        if (name.equals(TAG_1995)) {\r\n            // Let's party like it's 1995!\r\n            return new BlinkLayout(context, attrs);\r\n        }\r\n\r\n        try {\r\n            View view;\r\n            if (mFactory2 != null) {\r\n                view = mFactory2.onCreateView(parent, name, context, attrs);\r\n            } else if (mFactory != null) {\r\n                view = mFactory.onCreateView(name, context, attrs);\r\n            } else {\r\n                view = null;\r\n            }\r\n\r\n            if (view == null && mPrivateFactory != null) {\r\n                view = mPrivateFactory.onCreateView(parent, name, context, attrs);\r\n            }\r\n\r\n            if (view == null) {\r\n                final Object lastContext = mConstructorArgs[0];\r\n                mConstructorArgs[0] = context;\r\n                try {\r\n                    if (-1 == name.indexOf('.')) {\r\n                        view = onCreateView(parent, name, attrs);\r\n                    } else {\r\n                        view = createView(name, null, attrs);\r\n                    }\r\n                } finally {\r\n                    mConstructorArgs[0] = lastContext;\r\n                }\r\n            }\r\n\r\n            return view;\r\n        } catch (InflateException e) {\r\n            throw e;\r\n\r\n        } catch (ClassNotFoundException e) {\r\n            final InflateException ie = new InflateException(attrs.getPositionDescription()\r\n                    + \": Error inflating class \" + name, e);\r\n            ie.setStackTrace(EMPTY_STACK_TRACE);\r\n            throw ie;\r\n\r\n        } catch (Exception e) {\r\n            final InflateException ie = new InflateException(attrs.getPositionDescription()\r\n                    + \": Error inflating class \" + name, e);\r\n            ie.setStackTrace(EMPTY_STACK_TRACE);\r\n            throw ie;\r\n        }\r\n    }"]],[8817,8817],[12060,12060]]],[1521557796671,[null,[[-1,8820,"\r"],[1,8821,"\n"],[-1,8893,"\r"],[1,8894,"\n"],[-1,8905,"\r"],[1,8906,"\n"],[-1,8981,"\r"],[1,8982,"\n"],[-1,9002,"\r"],[1,9003,"\n"],[-1,9010,"\r"],[1,9011,"\n"],[-1,9079,"\r"],[1,9080,"\n"],[-1,9147,"\r"],[1,9148,"\n"],[-1,9220,"\r"],[1,9221,"\n"],[-1,9290,"\r"],[1,9291,"\n"],[-1,9369,"\r"],[1,9370,"\n"],[-1,9449,"\r"],[1,9450,"\n"],[-1,9528,"\r"],[1,9529,"\n"],[-1,9583,"\r"],[1,9584,"\n"],[-1,9592,"\r"],[1,9593,"\n"],[-1,9683,"\r"],[1,9684,"\n"],[-1,9723,"\r"],[1,9724,"\n"],[-1,9759,"\r"],[1,9760,"\n"],[-1,9819,"\r"],[1,9820,"\n"],[-1,9830,"\r\n\r"],[1,9833,"\n\n\n"],[-1,9900,"\r"],[1,9901,"\n"],[-1,9933,"\r"],[1,9934,"\n"],[-1,10020,"\r"],[1,10021,"\n"],[-1,10080,"\r"],[1,10081,"\n"],[-1,10116,"\r"],[1,10117,"\n"],[-1,10189,"\r"],[1,10190,"\n"],[-1,10204,"\r"],[1,10205,"\n"],[-1,10231,"\r"],[1,10232,"\n"],[-1,10242,"\r\n\r"],[1,10245,"\n\n\n"],[-1,10282,"\r"],[1,10283,"\n"],[-1,10326,"\r"],[1,10327,"\n"],[-1,10379,"\r"],[1,10380,"\n"],[-1,10390,"\r\n\r"],[1,10393,"\n\n\n"],[-1,10407,"\r"],[1,10408,"\n"],[-1,10431,"\r"],[1,10432,"\n"],[-1,10469,"\r"],[1,10470,"\n"],[-1,10547,"\r"],[1,10548,"\n"],[-1,10591,"\r"],[1,10592,"\n"],[-1,10660,"\r"],[1,10661,"\n"],[-1,10682,"\r"],[1,10683,"\n"],[-1,10712,"\r"],[1,10713,"\n"],[-1,10727,"\r\n\r"],[1,10730,"\n\n\n"],[-1,10789,"\r"],[1,10790,"\n"],[-1,10873,"\r"],[1,10874,"\n"],[-1,10888,"\r\n\r"],[1,10891,"\n\n\n"],[-1,10923,"\r"],[1,10924,"\n"],[-1,10988,"\r"],[1,10989,"\n"],[-1,11036,"\r"],[1,11037,"\n"],[-1,11059,"\r"],[1,11060,"\n"],[-1,11111,"\r"],[1,11112,"\n"],[-1,11178,"\r"],[1,11179,"\n"],[-1,11208,"\r"],[1,11209,"\n"],[-1,11271,"\r"],[1,11272,"\n"],[-1,11294,"\r"],[1,11295,"\n"],[-1,11323,"\r"],[1,11324,"\n"],[-1,11379,"\r"],[1,11380,"\n"],[-1,11398,"\r"],[1,11399,"\n"],[-1,11413,"\r\n\r"],[1,11416,"\n\n\n"],[-1,11441,"\r"],[1,11442,"\n"],[-1,11481,"\r"],[1,11482,"\n"],[-1,11503,"\r\n\r"],[1,11506,"\n\n\n"],[-1,11551,"\r"],[1,11552,"\n"],[-1,11644,"\r"],[1,11645,"\n"],[-1,11706,"\r"],[1,11707,"\n"],[-1,11756,"\r"],[1,11757,"\n"],[-1,11779,"\r\n\r"],[1,11782,"\n\n\n"],[-1,11814,"\r"],[1,11815,"\n"],[-1,11907,"\r"],[1,11908,"\n"],[-1,11969,"\r"],[1,11970,"\n"],[-1,12019,"\r"],[1,12020,"\n"],[-1,12042,"\r"],[1,12043,"\n"],[-1,12053,"\r"],[1,12054,"\n"]],[8820,8820],[12055,12055]]],[1521557796671,[null,[[1,8820,"\r"],[-1,8820,"\n"],[1,8893,"\r"],[-1,8893,"\n"],[1,8905,"\r"],[-1,8905,"\n"],[1,8981,"\r"],[-1,8981,"\n"],[1,9002,"\r"],[-1,9002,"\n"],[1,9010,"\r"],[-1,9010,"\n"],[1,9079,"\r"],[-1,9079,"\n"],[1,9147,"\r"],[-1,9147,"\n"],[1,9220,"\r"],[-1,9220,"\n"],[1,9290,"\r"],[-1,9290,"\n"],[1,9369,"\r"],[-1,9369,"\n"],[1,9449,"\r"],[-1,9449,"\n"],[1,9528,"\r"],[-1,9528,"\n"],[1,9583,"\r"],[-1,9583,"\n"],[1,9592,"\r"],[-1,9592,"\n"],[1,9683,"\r"],[-1,9683,"\n"],[1,9723,"\r"],[-1,9723,"\n"],[1,9759,"\r"],[-1,9759,"\n"],[1,9819,"\r"],[-1,9819,"\n"],[1,9830,"\r\n\r"],[-1,9830,"\n\n\n"],[1,9900,"\r"],[-1,9900,"\n"],[1,9933,"\r"],[-1,9933,"\n"],[1,10020,"\r"],[-1,10020,"\n"],[1,10080,"\r"],[-1,10080,"\n"],[1,10116,"\r"],[-1,10116,"\n"],[1,10189,"\r"],[-1,10189,"\n"],[1,10204,"\r"],[-1,10204,"\n"],[1,10231,"\r"],[-1,10231,"\n"],[1,10242,"\r\n\r"],[-1,10242,"\n\n\n"],[1,10282,"\r"],[-1,10282,"\n"],[1,10326,"\r"],[-1,10326,"\n"],[1,10379,"\r"],[-1,10379,"\n"],[1,10390,"\r\n\r"],[-1,10390,"\n\n\n"],[1,10407,"\r"],[-1,10407,"\n"],[1,10431,"\r"],[-1,10431,"\n"],[1,10469,"\r"],[-1,10469,"\n"],[1,10547,"\r"],[-1,10547,"\n"],[1,10591,"\r"],[-1,10591,"\n"],[1,10660,"\r"],[-1,10660,"\n"],[1,10682,"\r"],[-1,10682,"\n"],[1,10712,"\r"],[-1,10712,"\n"],[1,10727,"\r\n\r"],[-1,10727,"\n\n\n"],[1,10789,"\r"],[-1,10789,"\n"],[1,10873,"\r"],[-1,10873,"\n"],[1,10888,"\r\n\r"],[-1,10888,"\n\n\n"],[1,10923,"\r"],[-1,10923,"\n"],[1,10988,"\r"],[-1,10988,"\n"],[1,11036,"\r"],[-1,11036,"\n"],[1,11059,"\r"],[-1,11059,"\n"],[1,11111,"\r"],[-1,11111,"\n"],[1,11178,"\r"],[-1,11178,"\n"],[1,11208,"\r"],[-1,11208,"\n"],[1,11271,"\r"],[-1,11271,"\n"],[1,11294,"\r"],[-1,11294,"\n"],[1,11323,"\r"],[-1,11323,"\n"],[1,11379,"\r"],[-1,11379,"\n"],[1,11398,"\r"],[-1,11398,"\n"],[1,11413,"\r\n\r"],[-1,11413,"\n\n\n"],[1,11441,"\r"],[-1,11441,"\n"],[1,11481,"\r"],[-1,11481,"\n"],[1,11503,"\r\n\r"],[-1,11503,"\n\n\n"],[1,11551,"\r"],[-1,11551,"\n"],[1,11644,"\r"],[-1,11644,"\n"],[1,11706,"\r"],[-1,11706,"\n"],[1,11756,"\r"],[-1,11756,"\n"],[1,11779,"\r\n\r"],[-1,11779,"\n\n\n"],[1,11814,"\r"],[-1,11814,"\n"],[1,11907,"\r"],[-1,11907,"\n"],[1,11969,"\r"],[-1,11969,"\n"],[1,12019,"\r"],[-1,12019,"\n"],[1,12042,"\r"],[-1,12042,"\n"],[1,12053,"\r"],[-1,12053,"\n"]],[12055,12055],[8820,8820]]],[1521557744806,["Kotlin@DESKTOP-C3FKI4V",[[-1,8820,"\r"],[-1,8893,"\r"],[-1,8905,"\r"],[-1,8981,"\r"],[-1,9002,"\r"],[-1,9010,"\r"],[-1,9079,"\r"],[-1,9147,"\r"],[-1,9220,"\r"],[-1,9290,"\r"],[-1,9369,"\r"],[-1,9449,"\r"],[-1,9528,"\r"],[-1,9583,"\r"],[-1,9592,"\r"],[-1,9683,"\r"],[-1,9723,"\r"],[-1,9759,"\r"],[-1,9819,"\r"],[-1,9830,"\r"],[-1,9832,"\r"],[-1,9900,"\r"],[-1,9933,"\r"],[-1,10020,"\r"],[-1,10080,"\r"],[-1,10116,"\r"],[-1,10189,"\r"],[-1,10204,"\r"],[-1,10231,"\r"],[-1,10242,"\r"],[-1,10244,"\r"],[-1,10282,"\r"],[-1,10326,"\r"],[-1,10379,"\r"],[-1,10390,"\r"],[-1,10392,"\r"],[-1,10407,"\r"],[-1,10431,"\r"],[-1,10469,"\r"],[-1,10547,"\r"],[-1,10591,"\r"],[-1,10660,"\r"],[-1,10682,"\r"],[-1,10712,"\r"],[-1,10727,"\r"],[-1,10729,"\r"],[-1,10789,"\r"],[-1,10873,"\r"],[-1,10888,"\r"],[-1,10890,"\r"],[-1,10923,"\r"],[-1,10988,"\r"],[-1,11036,"\r"],[-1,11059,"\r"],[-1,11111,"\r"],[-1,11178,"\r"],[-1,11208,"\r"],[-1,11271,"\r"],[-1,11294,"\r"],[-1,11323,"\r"],[-1,11379,"\r"],[-1,11398,"\r"],[-1,11413,"\r"],[-1,11415,"\r"],[-1,11441,"\r"],[-1,11481,"\r"],[-1,11503,"\r"],[-1,11505,"\r"],[-1,11551,"\r"],[-1,11644,"\r"],[-1,11706,"\r"],[-1,11756,"\r"],[-1,11779,"\r"],[-1,11781,"\r"],[-1,11814,"\r"],[-1,11907,"\r"],[-1,11969,"\r"],[-1,12019,"\r"],[-1,12042,"\r"],[-1,12053,"\r"],[-1,12061,""],[1,12064,"\n"]],[11984,11984],[11985,11985]]],[1521557744942,["Kotlin@DESKTOP-C3FKI4V",[[1,11987,"\n"]],[11985,11985],[11986,11986]]],[1521557746495,["Kotlin@DESKTOP-C3FKI4V",[[1,11986,"zui"]],[11986,11986],[11989,11989]]],[1521557747274,["Kotlin@DESKTOP-C3FKI4V",[[-1,11986,"zui"]],[11989,11989],[11986,11986]]],[1521557747731,["Kotlin@DESKTOP-C3FKI4V",[[-1,11987,"\n"]],[11986,11986],[11985,11985]]],[1521557749276,["Kotlin@DESKTOP-C3FKI4V",[[1,11985,"zuizhon"]],[11985,11985],[11992,11992]]],[1521557750629,["Kotlin@DESKTOP-C3FKI4V",[[-1,11985,"zuizhon"]],[11992,11992],[11985,11985]]],[1521557761943,["Kotlin@DESKTOP-C3FKI4V",[[1,11985,"最终我们追溯到了创建View "]],[11985,11985],[12000,12000]]],[1521557767980,["Kotlin@DESKTOP-C3FKI4V",[[-1,11992,"了创建View "]],[12000,12000],[11992,11992]]],[1521557774631,["Kotlin@DESKTOP-C3FKI4V",[[1,11992," 通过 "]],[11992,11992],[11996,11996]]],[1521557775822,["Kotlin@DESKTOP-C3FKI4V",[[-1,11992," 通过 "]],[11996,11996],[11992,11992]]],[1521557777975,["Kotlin@DESKTOP-C3FKI4V",[[1,11992,"通过"]],[11992,11992],[11994,11994]]],[1521557778340,["Kotlin@DESKTOP-C3FKI4V",[[-1,11992,"通过"]],[11994,11994],[11992,11992]]],[1521557780706,["Kotlin@DESKTOP-C3FKI4V",[[1,11992,"如何"]],[11992,11992],[11994,11994]]],[1521557781222,["Kotlin@DESKTOP-C3FKI4V",[[-1,11992,"如何"]],[11994,11994],[11992,11992]]],[1521557792055,["Kotlin@DESKTOP-C3FKI4V",[[1,11992,"系统是如何通过 layout。"]],[11992,11992],[12007,12007]]],[1521557792592,["Kotlin@DESKTOP-C3FKI4V",[[-1,12006,"。"]],[12007,12007],[12006,12006]]],[1521557796063,["Kotlin@DESKTOP-C3FKI4V",[[1,12006,".xml 进行的"]],[12006,12006],[12014,12014]]],[1521557803397,["Kotlin@DESKTOP-C3FKI4V",[[1,12014,"视图的初始化操作，"]],[12014,12014],[12023,12023]]],[1521557804706,["Kotlin@DESKTOP-C3FKI4V",[[-1,12022,"，"]],[12023,12023],[12022,12022]]],[1521557804944,["Kotlin@DESKTOP-C3FKI4V",[[1,12024,"\n"]],[12022,12022],[12023,12023]]],[1521557806239,["Kotlin@DESKTOP-C3FKI4V",[[-1,12024,"\n"]],[12023,12023],[12022,12022]]],[1521557812386,["Kotlin@DESKTOP-C3FKI4V",[[1,12022,"，关键代码如下："]],[12022,12022],[12030,12030]]],[1521557812645,["Kotlin@DESKTOP-C3FKI4V",[[1,12032,"\n"]],[12030,12030],[12031,12031]]],[1521557814040,["Kotlin@DESKTOP-C3FKI4V",[[1,12031,"···"]],[12031,12031],[12034,12034]]],[1521557814744,["Kotlin@DESKTOP-C3FKI4V",[[-1,12031,"···"]],[12034,12034],[12031,12031]]],[1521557815605,["Kotlin@DESKTOP-C3FKI4V",[[1,12031,"111"]],[12031,12031],[12034,12034]]],[1521557816299,["Kotlin@DESKTOP-C3FKI4V",[[-1,12031,"111"]],[12034,12034],[12031,12031]]],[1521557819076,["Kotlin@DESKTOP-C3FKI4V",[[1,12031,"```java"]],[12031,12031],[12038,12038]]],[1521557819648,["Kotlin@DESKTOP-C3FKI4V",[[1,12040,"\n"]],[12038,12038],[12039,12039]]],[1521557820853,["Kotlin@DESKTOP-C3FKI4V",[[1,12039,"```"]],[12039,12039],[12042,12042]]],[1521557823044,["Kotlin@DESKTOP-C3FKI4V",[[1,12039,"\n"]],[12039,12039],[12040,12040]]],[1521557824252,["Kotlin@DESKTOP-C3FKI4V",[[1,12039," View view;\r\n            if (mFactory2 != null) {\r\n                view = mFactory2.onCreateView(parent, name, context, attrs);\r\n            } else if (mFactory != null) {\r\n                view = mFactory.onCreateView(name, context, attrs);\r\n            } else {\r\n                view = null;\r\n            }\r\n\r\n            if (view == null && mPrivateFactory != null) {\r\n                view = mPrivateFactory.onCreateView(parent, name, context, attrs);\r\n            }\r\n\r\n            if (view == null) {\r\n                final Object lastContext = mConstructorArgs[0];\r\n                mConstructorArgs[0] = context;\r\n                try {\r\n                    if (-1 == name.indexOf('.')) {\r\n                        view = onCreateView(parent, name, attrs);\r\n                    } else {\r\n                        view = createView(name, null, attrs);\r\n                    }\r\n                } finally {\r\n                    mConstructorArgs[0] = lastContext;\r\n                }\r\n            }\r\n\r\n            return view;"]],[12039,12039],[13060,13060]]],[1521557852742,[null,[[-1,12050,"\r"],[1,12051,"\n"],[-1,12088,"\r"],[1,12089,"\n"],[-1,12166,"\r"],[1,12167,"\n"],[-1,12210,"\r"],[1,12211,"\n"],[-1,12279,"\r"],[1,12280,"\n"],[-1,12301,"\r"],[1,12302,"\n"],[-1,12331,"\r"],[1,12332,"\n"],[-1,12346,"\r\n\r"],[1,12349,"\n\n\n"],[-1,12408,"\r"],[1,12409,"\n"],[-1,12492,"\r"],[1,12493,"\n"],[-1,12507,"\r\n\r"],[1,12510,"\n\n\n"],[-1,12542,"\r"],[1,12543,"\n"],[-1,12607,"\r"],[1,12608,"\n"],[-1,12655,"\r"],[1,12656,"\n"],[-1,12678,"\r"],[1,12679,"\n"],[-1,12730,"\r"],[1,12731,"\n"],[-1,12797,"\r"],[1,12798,"\n"],[-1,12827,"\r"],[1,12828,"\n"],[-1,12890,"\r"],[1,12891,"\n"],[-1,12913,"\r"],[1,12914,"\n"],[-1,12942,"\r"],[1,12943,"\n"],[-1,12998,"\r"],[1,12999,"\n"],[-1,13017,"\r"],[1,13018,"\n"],[-1,13032,"\r\n\r"],[1,13035,"\n\n\n"]],[12050,12050],[13038,13038]]],[1521557852742,[null,[[1,12050,"\r"],[-1,12050,"\n"],[1,12088,"\r"],[-1,12088,"\n"],[1,12166,"\r"],[-1,12166,"\n"],[1,12210,"\r"],[-1,12210,"\n"],[1,12279,"\r"],[-1,12279,"\n"],[1,12301,"\r"],[-1,12301,"\n"],[1,12331,"\r"],[-1,12331,"\n"],[1,12346,"\r\n\r"],[-1,12346,"\n\n\n"],[1,12408,"\r"],[-1,12408,"\n"],[1,12492,"\r"],[-1,12492,"\n"],[1,12507,"\r\n\r"],[-1,12507,"\n\n\n"],[1,12542,"\r"],[-1,12542,"\n"],[1,12607,"\r"],[-1,12607,"\n"],[1,12655,"\r"],[-1,12655,"\n"],[1,12678,"\r"],[-1,12678,"\n"],[1,12730,"\r"],[-1,12730,"\n"],[1,12797,"\r"],[-1,12797,"\n"],[1,12827,"\r"],[-1,12827,"\n"],[1,12890,"\r"],[-1,12890,"\n"],[1,12913,"\r"],[-1,12913,"\n"],[1,12942,"\r"],[-1,12942,"\n"],[1,12998,"\r"],[-1,12998,"\n"],[1,13017,"\r"],[-1,13017,"\n"],[1,13032,"\r\n\r"],[-1,13032,"\n\n\n"]],[13038,13038],[12050,12050]]],[1521557830100,["Kotlin@DESKTOP-C3FKI4V",[[1,12040,"\t"],[-1,12050,"\r"],[-1,12088,"\r"],[-1,12166,"\r"],[-1,12210,"\r"],[-1,12279,"\r"],[-1,12301,"\r"],[-1,12331,"\r"],[-1,12346,"\r"],[-1,12348,"\r"],[-1,12408,"\r"],[-1,12492,"\r"],[-1,12507,"\r"],[-1,12509,"\r"],[-1,12542,"\r"],[-1,12607,"\r"],[-1,12655,"\r"],[-1,12678,"\r"],[-1,12730,"\r"],[-1,12797,"\r"],[-1,12827,"\r"],[-1,12890,"\r"],[-1,12913,"\r"],[-1,12942,"\r"],[-1,12998,"\r"],[-1,13017,"\r"],[-1,13032,"\r"],[-1,13034,"\r"]],[12040,12040],[12041,12041]]],[1521557831141,["Kotlin@DESKTOP-C3FKI4V",[[1,12041,"\t\t"]],[12041,12041],[12043,12043]]],[1521557850406,["Kotlin@DESKTOP-C3FKI4V",[[-1,12039," \t\t\t"],[1,12053,"\r"],[-1,12054,"            "],[1,12090,"\r"],[-1,12091,"            "],[1,12167,"\r"],[-1,12168,"            "],[1,12210,"\r"],[-1,12211,"            "],[1,12278,"\r"],[-1,12279,"            "],[1,12299,"\r"],[-1,12304,"            "],[1,12328,"\r"],[-1,12329,"            "],[1,12342,"\r"],[1,12343,"\r"],[-1,12344,"            "],[1,12402,"\r"],[-1,12407,"            "],[1,12485,"\r"],[-1,12486,"            "],[1,12499,"\r"],[1,12500,"\r"],[-1,12501,"            "],[1,12532,"\r"],[-1,12537,"            "],[1,12596,"\r"],[-1,12601,"            "],[1,12643,"\r"],[-1,12648,"            "],[1,12665,"\r"],[-1,12674,"            "],[1,12716,"\r"],[-1,12717,"            "],[1,12782,"\r"],[-1,12783,"     "],[-1,12796,"       "],[1,12811,"\r"],[-1,12812,"            "],[1,12873,"\r"],[-1,12882,"            "],[1,12895,"\r"],[-1,12900,"            "],[1,12923,"\r"],[-1,12924,"            "],[1,12978,"\r"],[-1,12983,"            "],[1,12996,"\r"],[-1,12997,"            "],[1,13010,"\r"],[1,13011,"\r"],[-1,13012,"            "]],[12039,13036],[12771,12771]]],[1521557927458,[null,[[-1,12049,"\r"],[1,12050,"\n"],[-1,12075,"\r"],[1,12076,"\n"],[-1,12141,"\r"],[1,12142,"\n"],[-1,12173,"\r"],[1,12174,"\n"],[-1,12230,"\r"],[1,12231,"\n"],[-1,12240,"\r"],[1,12241,"\n"],[-1,12258,"\r\n}\r\n\r"],[1,12264,"\n\n}\n\n\n"],[-1,12311,"\r"],[1,12312,"\n"],[-1,12383,"\r\n}\r\n\r"],[1,12389,"\n\n}\n\n\n"],[-1,12409,"\r"],[1,12410,"\n"],[-1,12462,"\r"],[1,12463,"\n"],[-1,12498,"\r"],[1,12499,"\n"],[-1,12509,"\r"],[1,12510,"\n"],[-1,12549,"\r"],[1,12550,"\n"],[-1,12604,"\r"],[1,12605,"\n"],[-1,12622,"\r"],[1,12623,"\n"],[-1,12673,"\r"],[1,12674,"\n"],[-1,12684,"\r"],[1,12685,"\n"],[-1,12701,"\r"],[1,12702,"\n"],[-1,12745,"\r"],[1,12746,"\n"],[-1,12752,"\r\n}\r\n\r"],[1,12758,"\n\n}\n\n\n"]],[12049,12049],[12764,12764]]],[1521557927458,[null,[[1,12049,"\r"],[-1,12049,"\n"],[1,12075,"\r"],[-1,12075,"\n"],[1,12141,"\r"],[-1,12141,"\n"],[1,12173,"\r"],[-1,12173,"\n"],[1,12230,"\r"],[-1,12230,"\n"],[1,12240,"\r"],[-1,12240,"\n"],[1,12258,"\r\n}\r\n\r"],[-1,12258,"\n\n}\n\n\n"],[1,12311,"\r"],[-1,12311,"\n"],[1,12383,"\r\n}\r\n\r"],[-1,12383,"\n\n}\n\n\n"],[1,12409,"\r"],[-1,12409,"\n"],[1,12462,"\r"],[-1,12462,"\n"],[1,12498,"\r"],[-1,12498,"\n"],[1,12509,"\r"],[-1,12509,"\n"],[1,12549,"\r"],[-1,12549,"\n"],[1,12604,"\r"],[-1,12604,"\n"],[1,12622,"\r"],[-1,12622,"\n"],[1,12673,"\r"],[-1,12673,"\n"],[1,12684,"\r"],[-1,12684,"\n"],[1,12701,"\r"],[-1,12701,"\n"],[1,12745,"\r"],[-1,12745,"\n"],[1,12752,"\r\n}\r\n\r"],[-1,12752,"\n\n}\n\n\n"]],[12764,12764],[12049,12049]]],[1521557926600,["Kotlin@DESKTOP-C3FKI4V",[[1,8820,"\r"],[-1,8821," "],[1,8892,"\r"],[-1,8893," "],[1,8903,"\r"],[-1,8904," "],[1,8978,"\r"],[-1,8979," "],[1,8998,"\r"],[-1,8999," "],[1,9005,"\r"],[-1,9006," "],[1,9073,"\r"],[-1,9074," "],[1,9140,"\r"],[-1,9145," "],[1,9212,"\r"],[-1,9213," "],[1,9281,"\r"],[-1,9282," "],[1,9359,"\r"],[-1,9364," "],[1,9438,"\r"],[-1,9443," "],[1,9516,"\r"],[-1,9517," "],[1,9570,"\r"],[-1,9571," "],[1,9578,"\r"],[-1,9579,"    "],[1,9668,"\r"],[-1,9677,"    "],[1,9707,"\r"],[-1,9708," "],[-1,9713,"   "],[1,9742,"\r"],[-1,9743," "],[-1,9752,"   "],[1,9801,"\r"],[-1,9802,"   "],[-1,9809," "],[1,9811,"\r"],[1,9812,"\r"],[-1,9813," "],[-1,9818,"   "],[1,9879,"\r"],[-1,9880,"    "],[1,9911,"\r"],[-1,9912,"  "],[-1,9922,"  "],[1,9997,"\r"],[-1,9998,"    "],[1,10056,"\r"],[-1,10057,"   "],[-1,10068," "],[1,10091,"\r"],[-1,10092,"    "],[1,10163,"\r"],[-1,10164,"    "],[1,10177,"\r"],[-1,10178,"    "],[1,10203,"\r"],[-1,10204,"    "],[1,10213,"\r"],[1,10214,"\r"],[-1,10215,"    "],[1,10251,"\r"],[-1,10260,"    "],[1,10294,"\r"],[-1,10303,"    "],[1,10346,"\r"],[-1,10347,"   "],[-1,10354," "],[1,10356,"\r"],[1,10357,"\r"],[-1,10362,"    "],[1,10371,"\r"],[-1,10372,"    "],[1,10394,"\r"],[-1,10395," "],[-1,10404,"   "],[1,10431,"\r"],[-1,10432,"    "],[1,10508,"\r"],[-1,10509,"  "],[-1,10519,"  "],[1,10551,"\r"],[-1,10552,"    "],[1,10619,"\r"],[-1,10620,"   "],[-1,10631," "],[1,10640,"\r"],[-1,10641,"    "],[1,10669,"\r"],[-1,10670,"    "],[1,10683,"\r"],[1,10684,"\r"],[-1,10685,"    "],[1,10743,"\r"],[-1,10744,"    "],[1,10826,"\r"],[-1,10827,"    "],[1,10840,"\r"],[1,10841,"\r"],[-1,10842,"    "],[1,10873,"\r"],[-1,10874,"    "],[1,10937,"\r"],[-1,10938,"    "],[1,10984,"\r"],[-1,10997,"    "],[1,11006,"\r"],[-1,11007,"    "],[1,11057,"\r"],[-1,11058," "],[-1,11079,"   "],[1,11123,"\r"],[-1,11124,"    "],[1,11152,"\r"],[-1,11153,"  "],[-1,11175,"  "],[1,11214,"\r"],[-1,11215,"    "],[1,11236,"\r"],[-1,11237,"   "],[-1,11252," "],[1,11264,"\r"],[-1,11265,"    "],[1,11319,"\r"],[-1,11320,"    "],[1,11337,"\r"],[-1,11338,"    "],[1,11351,"\r"],[1,11352,"\r"],[-1,11353,"    "],[1,11377,"\r"],[-1,11378,"    "],[1,11416,"\r"],[-1,11417,"    "],[1,11437,"\r"],[1,11438,"\r"],[-1,11439,"    "],[1,11483,"\r"],[-1,11484,"    "],[1,11575,"\r"],[-1,11592,"    "],[1,11636,"\r"],[-1,11637," "],[-1,11646,"   "],[1,11685,"\r"],[-1,11686," "],[-1,11695,"   "],[1,11707,"\r"],[1,11708,"\r"],[-1,11709,"    "],[1,11740,"\r"],[-1,11741," "],[-1,11750,"   "],[1,11832,"\r"],[-1,11833,"    "],[1,11893,"\r"],[-1,11894,"  "],[-1,11904,"  "],[1,11942,"\r"],[-1,11943,"    "],[1,11964,"\r"],[-1,11965,"   "],[-1,11972," "],[1,11974,"\r"],[-1,11975,"    "],[-1,12049,"\r"],[-1,12075,"\r"],[-1,12141,"\r"],[-1,12173,"\r"],[-1,12230,"\r"],[-1,12240,"\r"],[-1,12258,"\r"],[-1,12261,"\r"],[-1,12263,"\r"],[-1,12311,"\r"],[-1,12383,"\r"],[-1,12386,"\r"],[-1,12388,"\r"],[-1,12409,"\r"],[-1,12462,"\r"],[-1,12498,"\r"],[-1,12509,"\r"],[-1,12549,"\r"],[-1,12604,"\r"],[-1,12622,"\r"],[-1,12673,"\r"],[-1,12684,"\r"],[-1,12701,"\r"],[-1,12745,"\r"],[-1,12752,"\r"],[-1,12755,"\r"],[-1,12757,"\r"]],[8817,11980],[11814,11814]]],[1521557977427,[null,[[-1,8820,"\r"],[1,8821,"\n"],[-1,8892,"\r"],[1,8893,"\n"],[-1,8903,"\r"],[1,8904,"\n"],[-1,8978,"\r"],[1,8979,"\n"],[-1,8998,"\r"],[1,8999,"\n"],[-1,9005,"\r"],[1,9006,"\n"],[-1,9073,"\r"],[1,9074,"\n"],[-1,9140,"\r"],[1,9141,"\n"],[-1,9212,"\r"],[1,9213,"\n"],[-1,9281,"\r"],[1,9282,"\n"],[-1,9359,"\r"],[1,9360,"\n"],[-1,9438,"\r"],[1,9439,"\n"],[-1,9516,"\r"],[1,9517,"\n"],[-1,9570,"\r"],[1,9571,"\n"],[-1,9578,"\r"],[1,9579,"\n"],[-1,9665,"\r"],[1,9666,"\n"],[-1,9701,"\r"],[1,9702,"\n"],[-1,9733,"\r"],[1,9734,"\n"],[-1,9789,"\r"],[1,9790,"\n"],[-1,9796,"\r\n\r"],[1,9799,"\n\n\n"],[-1,9862,"\r"],[1,9863,"\n"],[-1,9891,"\r"],[1,9892,"\n"],[-1,9974,"\r"],[1,9975,"\n"],[-1,10030,"\r"],[1,10031,"\n"],[-1,10062,"\r"],[1,10063,"\n"],[-1,10131,"\r"],[1,10132,"\n"],[-1,10142,"\r"],[1,10143,"\n"],[-1,10165,"\r"],[1,10166,"\n"],[-1,10172,"\r\n\r"],[1,10175,"\n\n\n"],[-1,10208,"\r"],[1,10209,"\n"],[-1,10248,"\r"],[1,10249,"\n"],[-1,10297,"\r"],[1,10298,"\n"],[-1,10304,"\r\n\r"],[1,10307,"\n\n\n"],[-1,10317,"\r"],[1,10318,"\n"],[-1,10337,"\r"],[1,10338,"\n"],[-1,10371,"\r"],[1,10372,"\n"],[-1,10445,"\r"],[1,10446,"\n"],[-1,10485,"\r"],[1,10486,"\n"],[-1,10550,"\r"],[1,10551,"\n"],[-1,10568,"\r"],[1,10569,"\n"],[-1,10594,"\r"],[1,10595,"\n"],[-1,10605,"\r\n\r"],[1,10608,"\n\n\n"],[-1,10663,"\r"],[1,10664,"\n"],[-1,10743,"\r"],[1,10744,"\n"],[-1,10754,"\r\n\r"],[1,10757,"\n\n\n"],[-1,10785,"\r"],[1,10786,"\n"],[-1,10846,"\r"],[1,10847,"\n"],[-1,10890,"\r"],[1,10891,"\n"],[-1,10909,"\r"],[1,10910,"\n"],[-1,10957,"\r"],[1,10958,"\n"],[-1,11020,"\r"],[1,11021,"\n"],[-1,11046,"\r"],[1,11047,"\n"],[-1,11105,"\r"],[1,11106,"\n"],[-1,11124,"\r"],[1,11125,"\n"],[-1,11149,"\r"],[1,11150,"\n"],[-1,11201,"\r"],[1,11202,"\n"],[-1,11216,"\r"],[1,11217,"\n"],[-1,11227,"\r\n\r"],[1,11230,"\n\n\n"],[-1,11251,"\r"],[1,11252,"\n"],[-1,11287,"\r"],[1,11288,"\n"],[-1,11305,"\r\n\r"],[1,11308,"\n\n\n"],[-1,11349,"\r"],[1,11350,"\n"],[-1,11438,"\r"],[1,11439,"\n"],[-1,11496,"\r"],[1,11497,"\n"],[-1,11542,"\r"],[1,11543,"\n"],[-1,11561,"\r\n\r"],[1,11564,"\n\n\n"],[-1,11592,"\r"],[1,11593,"\n"],[-1,11681,"\r"],[1,11682,"\n"],[-1,11739,"\r"],[1,11740,"\n"],[-1,11785,"\r"],[1,11786,"\n"],[-1,11804,"\r"],[1,11805,"\n"],[-1,11811,"\r"],[1,11812,"\n"]],[8820,8820],[11813,11813]]],[1521557977427,[null,[[1,8820,"\r"],[-1,8820,"\n"],[1,8892,"\r"],[-1,8892,"\n"],[1,8903,"\r"],[-1,8903,"\n"],[1,8978,"\r"],[-1,8978,"\n"],[1,8998,"\r"],[-1,8998,"\n"],[1,9005,"\r"],[-1,9005,"\n"],[1,9073,"\r"],[-1,9073,"\n"],[1,9140,"\r"],[-1,9140,"\n"],[1,9212,"\r"],[-1,9212,"\n"],[1,9281,"\r"],[-1,9281,"\n"],[1,9359,"\r"],[-1,9359,"\n"],[1,9438,"\r"],[-1,9438,"\n"],[1,9516,"\r"],[-1,9516,"\n"],[1,9570,"\r"],[-1,9570,"\n"],[1,9578,"\r"],[-1,9578,"\n"],[1,9665,"\r"],[-1,9665,"\n"],[1,9701,"\r"],[-1,9701,"\n"],[1,9733,"\r"],[-1,9733,"\n"],[1,9789,"\r"],[-1,9789,"\n"],[1,9796,"\r\n\r"],[-1,9796,"\n\n\n"],[1,9862,"\r"],[-1,9862,"\n"],[1,9891,"\r"],[-1,9891,"\n"],[1,9974,"\r"],[-1,9974,"\n"],[1,10030,"\r"],[-1,10030,"\n"],[1,10062,"\r"],[-1,10062,"\n"],[1,10131,"\r"],[-1,10131,"\n"],[1,10142,"\r"],[-1,10142,"\n"],[1,10165,"\r"],[-1,10165,"\n"],[1,10172,"\r\n\r"],[-1,10172,"\n\n\n"],[1,10208,"\r"],[-1,10208,"\n"],[1,10248,"\r"],[-1,10248,"\n"],[1,10297,"\r"],[-1,10297,"\n"],[1,10304,"\r\n\r"],[-1,10304,"\n\n\n"],[1,10317,"\r"],[-1,10317,"\n"],[1,10337,"\r"],[-1,10337,"\n"],[1,10371,"\r"],[-1,10371,"\n"],[1,10445,"\r"],[-1,10445,"\n"],[1,10485,"\r"],[-1,10485,"\n"],[1,10550,"\r"],[-1,10550,"\n"],[1,10568,"\r"],[-1,10568,"\n"],[1,10594,"\r"],[-1,10594,"\n"],[1,10605,"\r\n\r"],[-1,10605,"\n\n\n"],[1,10663,"\r"],[-1,10663,"\n"],[1,10743,"\r"],[-1,10743,"\n"],[1,10754,"\r\n\r"],[-1,10754,"\n\n\n"],[1,10785,"\r"],[-1,10785,"\n"],[1,10846,"\r"],[-1,10846,"\n"],[1,10890,"\r"],[-1,10890,"\n"],[1,10909,"\r"],[-1,10909,"\n"],[1,10957,"\r"],[-1,10957,"\n"],[1,11020,"\r"],[-1,11020,"\n"],[1,11046,"\r"],[-1,11046,"\n"],[1,11105,"\r"],[-1,11105,"\n"],[1,11124,"\r"],[-1,11124,"\n"],[1,11149,"\r"],[-1,11149,"\n"],[1,11201,"\r"],[-1,11201,"\n"],[1,11216,"\r"],[-1,11216,"\n"],[1,11227,"\r\n\r"],[-1,11227,"\n\n\n"],[1,11251,"\r"],[-1,11251,"\n"],[1,11287,"\r"],[-1,11287,"\n"],[1,11305,"\r\n\r"],[-1,11305,"\n\n\n"],[1,11349,"\r"],[-1,11349,"\n"],[1,11438,"\r"],[-1,11438,"\n"],[1,11496,"\r"],[-1,11496,"\n"],[1,11542,"\r"],[-1,11542,"\n"],[1,11561,"\r\n\r"],[-1,11561,"\n\n\n"],[1,11592,"\r"],[-1,11592,"\n"],[1,11681,"\r"],[-1,11681,"\n"],[1,11739,"\r"],[-1,11739,"\n"],[1,11785,"\r"],[-1,11785,"\n"],[1,11804,"\r"],[-1,11804,"\n"],[1,11811,"\r"],[-1,11811,"\n"]],[11813,11813],[8820,8820]]],[1521557936477,["Kotlin@DESKTOP-C3FKI4V",[[-1,3226,"/**"],[-1,3230,"     * Inflate a new view hierarchy from the specified XML node. Throws"],[-1,3302,"     * {@link InflateException} if there is an error."],[-1,3356,"     * <p>\n     * <em><strong>Important<"],[-1,3397,"strong></em>&nbsp;&nbsp;&nbsp;For performance\n     "],[-1,3449," reasons, view inflation relies heavily on pre-processing of XML files\n     "],[-1,3526," that is done at build time. Therefore, it is not currently possible to\n     * use LayoutInflater with an XmlPullParser over a plain XML file at runtime.\n     *\n     * @param parser XML dom node containing the description of the view\n     *        hierarchy.\n     * @param root Optional view to be the parent of the generated hierarchy (if\n     *        <em>attachToRoot</em> is true), or else simply an object that\n     *        provides a set of LayoutParams values for root of the returned\n     *        hierarchy (if <em>attachToRoot</em> is false.)\n     * @param attachToRoot Whether the inflated hierarchy should be attached to\n     *        the root parameter? If false, root is only used to create the\n     *        correct subclass of LayoutParams for the root view in the XML.\n     * @return The root View of the inflated hierarchy. If root was supplied and\n     *         attachToRoot is true, this is root; otherwise it is the root of\n     *         the inflated XML file.\n     */\n    public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n        synchronized (mConstructorArgs) {\n            Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n\n            final Context inflaterContext = mContext;\n            final AttributeSet attrs = Xml.asAttributeSet(parser);\n            Context lastContext = (Context) mConstructorArgs[0];\n            mConstructorArgs[0] = inflaterContext;\n            View result = root;\n\n            try {\n                // Look for the root node.\n                int type;\n                while ((type = parser.next()) != XmlPullParser.START_TAG &&\n                        type != XmlPullParser.END_DOCUMENT) {\n                    // Empty\n                }\n\n                if (type != XmlPullParser.START_TAG) {\n                    throw new InflateException(parser.getPositionDescription()\n                            + \": No start tag found!\");\n                }\n\n                final String name = parser.getName();\n\n                if (DEBUG) {\n                    System.out.println(\"**************************\");\n                    System.out.println(\"Creating root view: \"\n                            + name);\n                    System.out.println(\"**************************\");\n                }\n\n                if (TAG_MERGE.equals(name)) {\n                    if (root == null || !attachToRoot) {\n                        throw new InflateException(\"<merge /> can be used only with a valid \"\n                                + \"ViewGroup root and attachToRoot=true\");\n                    }\n\n                    rInflate(parser, root, inflaterContext, attrs, false);\n                } else {\n                    // Temp is the root view that was found in the xml\n                    final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                    ViewGroup.LayoutParams params = null;\n\n                    if (root != null) {\n                        if (DEBUG) {\n                            System.out.println(\"Creating params from root: \" +\n                                    root);\n                        }\n                        // Create layout params that match root, if supplied\n                        params = root.generateLayoutParams(attrs);\n                        if (!attachToRoot) {\n                            // Set the layout params for temp if we are not\n                            // attaching. (If we are, we use addView, below)\n                            temp.setLayoutParams(params);\n                        }\n                    }\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> start inflating children\");\n                    }\n\n                    // Inflate all children under temp against its context.\n                    rInflateChildren(parser, temp, attrs, true);\n\n                    if (DEBUG) {\n                        System.out.println(\"-----> done inflating children\");\n                    }\n\n                    // We are supposed to attach all the views we found (int temp)\n                    // to root. Do that now.\n                    if (root != null && attachToRoot) {\n                        root.addView(temp, params);\n                    }\n\n                    // Decide whether to return the root that was passed in or the\n                    // top view found in xml.\n                    if (root == null || !attachToRoot) {\n                        result = temp;\n                    }\n                }\n\n            } catch (XmlPullParserException e) {\n                final InflateException ie = new InflateException(e.getMessage(), e);\n                ie.setStackTrace(EMPTY_STACK_TRACE);\n                throw ie;\n            } catch (Exception e) {\n                final InflateException ie = new InflateException(parser.getPositionDescription()\n                        + \": \" + e.getMessage(), e);\n                ie.setStackTrace(EMPTY_STACK_TRACE);\n                throw ie;\n            } finally {\n                // Don't retain static reference on context.\n                mConstructorArgs[0] = lastContext;\n                mConstructorArgs[1] = null;\n\n                Trace.traceEnd(Trace.TRACE_TAG_VIEW);\n            }\n\n            return result;\n        }\n    }\n\n\n/**\r"],[-1,8892,"\r"],[-1,8903,"\r"],[-1,8978,"\r"],[-1,8998,"\r"],[-1,9005,"\r"],[-1,9073,"\r"],[-1,9140,"\r"],[-1,9212,"\r"],[-1,9281,"\r"],[-1,9359,"\r"],[-1,9438,"\r"],[-1,9516,"\r"],[-1,9570,"\r"],[-1,9578,"\r"],[-1,9665,"\r"],[-1,9701,"\r"],[-1,9733,"\r"],[-1,9789,"\r"],[-1,9796,"\r"],[-1,9798,"\r"],[-1,9862,"\r"],[-1,9891,"\r"],[-1,9974,"\r"],[-1,10030,"\r"],[-1,10062,"\r"],[-1,10131,"\r"],[-1,10142,"\r"],[-1,10165,"\r"],[-1,10172,"\r"],[-1,10174,"\r"],[-1,10208,"\r"],[-1,10248,"\r"],[-1,10297,"\r"],[-1,10304,"\r"],[-1,10306,"\r"],[-1,10317,"\r"],[-1,10337,"\r"],[-1,10371,"\r"],[-1,10445,"\r"],[-1,10485,"\r"],[-1,10550,"\r"],[-1,10568,"\r"],[-1,10594,"\r"],[-1,10605,"\r"],[-1,10607,"\r"],[-1,10663,"\r"],[-1,10743,"\r"],[-1,10754,"\r"],[-1,10756,"\r"],[-1,10785,"\r"],[-1,10846,"\r"],[-1,10890,"\r"],[-1,10909,"\r"],[-1,10957,"\r"],[-1,11020,"\r"],[-1,11046,"\r"],[-1,11105,"\r"],[-1,11124,"\r"],[-1,11149,"\r"],[-1,11201,"\r"],[-1,11216,"\r"],[-1,11227,"\r"],[-1,11229,"\r"],[-1,11251,"\r"],[-1,11287,"\r"],[-1,11305,"\r"],[-1,11307,"\r"],[-1,11349,"\r"],[-1,11438,"\r"],[-1,11496,"\r"],[-1,11542,"\r"],[-1,11561,"\r"],[-1,11563,"\r"],[-1,11592,"\r"],[-1,11681,"\r"],[-1,11739,"\r"],[-1,11785,"\r"],[-1,11804,"\r"],[-1,11811,"\r"]],[3226,8814],[3226,3226]]],[1521557947182,["Kotlin@DESKTOP-C3FKI4V",[[1,3226,"/**\r\n    * Inflate a new view hierarchy from the specified XML node. Throws\r\n    * {@link InflateException} if there is an error.\r\n    * <p>\r\n    * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance\r\n    * reasons, view inflation relies heavily on pre-processing of XML files\r\n    * that is done at build time. Therefore, it is not currently possible to\r\n    * use LayoutInflater with an XmlPullParser over a plain XML file at runtime.\r\n    *\r\n    * @param parser XML dom node containing the description of the view\r\n    *        hierarchy.\r\n    * @param root Optional view to be the parent of the generated hierarchy (if\r\n    *        <em>attachToRoot</em> is true), or else simply an object that\r\n    *        provides a set of LayoutParams values for root of the returned\r\n    *        hierarchy (if <em>attachToRoot</em> is false.)\r\n    * @param attachToRoot Whether the inflated hierarchy should be attached to\r\n    *        the root parameter? If false, root is only used to create the\r\n    *        correct subclass of LayoutParams for the root view in the XML.\r\n    * @return The root View of the inflated hierarchy. If root was supplied and\r\n    *         attachToRoot is true, this is root; otherwise it is the root of\r\n    *         the inflated XML file.\r\n    */\r\npublic View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\r\n    synchronized (mConstructorArgs) {\r\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\r\n\r\n        final Context inflaterContext = mContext;\r\n        final AttributeSet attrs = Xml.asAttributeSet(parser);\r\n        Context lastContext = (Context) mConstructorArgs[0];\r\n        mConstructorArgs[0] = inflaterContext;\r\n        View result = root;\r\n\r\n        try {\r\n            // Look for the root node.\r\n            int type;\r\n            while ((type = parser.next()) != XmlPullParser.START_TAG &&\r\n                    type != XmlPullParser.END_DOCUMENT) {\r\n                // Empty\r\n            }\r\n\r\n            if (type != XmlPullParser.START_TAG) {\r\n                throw new InflateException(parser.getPositionDescription()\r\n                        + \": No start tag found!\");\r\n            }\r\n\r\n            final String name = parser.getName();\r\n\r\n            if (DEBUG) {\r\n                System.out.println(\"**************************\");\r\n                System.out.println(\"Creating root view: \"\r\n                        + name);\r\n                System.out.println(\"**************************\");\r\n            }\r\n\r\n            if (TAG_MERGE.equals(name)) {\r\n                if (root == null || !attachToRoot) {\r\n                    throw new InflateException(\"<merge /> can be used only with a valid \"\r\n                            + \"ViewGroup root and attachToRoot=true\");\r\n                }\r\n\r\n                rInflate(parser, root, inflaterContext, attrs, false);\r\n            } else {\r\n                // Temp is the root view that was found in the xml\r\n                final View temp = createViewFromTag(root, name, inflaterContext, attrs);\r\n\r\n                ViewGroup.LayoutParams params = null;\r\n\r\n                if (root != null) {\r\n                    if (DEBUG) {\r\n                        System.out.println(\"Creating params from root: \" +\r\n                                root);\r\n                    }\r\n                    // Create layout params that match root, if supplied\r\n                    params = root.generateLayoutParams(attrs);\r\n                    if (!attachToRoot) {\r\n                        // Set the layout params for temp if we are not\r\n                        // attaching. (If we are, we use addView, below)\r\n                        temp.setLayoutParams(params);\r\n                    }\r\n                }\r\n\r\n                if (DEBUG) {\r\n                    System.out.println(\"-----> start inflating children\");\r\n                }\r\n\r\n                // Inflate all children under temp against its context.\r\n                rInflateChildren(parser, temp, attrs, true);\r\n\r\n                if (DEBUG) {\r\n                    System.out.println(\"-----> done inflating children\");\r\n                }\r\n\r\n                // We are supposed to attach all the views we found (int temp)\r\n                // to root. Do that now.\r\n                if (root != null && attachToRoot) {\r\n                    root.addView(temp, params);\r\n                }\r\n\r\n                // Decide whether to return the root that was passed in or the\r\n                // top view found in xml.\r\n                if (root == null || !attachToRoot) {\r\n                    result = temp;\r\n                }\r\n            }\r\n\r\n        } catch (XmlPullParserException e) {\r\n            final InflateException ie = new InflateException(e.getMessage(), e);\r\n            ie.setStackTrace(EMPTY_STACK_TRACE);\r\n            throw ie;\r\n        } catch (Exception e) {\r\n            final InflateException ie = new InflateException(parser.getPositionDescription()\r\n                    + \": \" + e.getMessage(), e);\r\n            ie.setStackTrace(EMPTY_STACK_TRACE);\r\n            throw ie;\r\n        } finally {\r\n            // Don't retain static reference on context.\r\n            mConstructorArgs[0] = lastContext;\r\n            mConstructorArgs[1] = null;\r\n\r\n            Trace.traceEnd(Trace.TRACE_TAG_VIEW);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"]],[3226,3226],[8573,8573]]],[1521557959822,["Kotlin@DESKTOP-C3FKI4V",[[-1,1688,"/**"],[-1,1692,"     * Inflate a new view hierarchy from the specified xml resource. Throws"],[-1,1768,"     * {@link InflateException} if there is an error."],[-1,1822,"     *"],[-1,1829,"     * @param resource ID for an XML layout resource to load (e.g.,"],[-1,1897,"     *        <code>R.layout.main_page<"],[-1,1937,"code>)\n     "],[-1,1950," @param root Optional view to be the parent of the generated hierarchy (if\n     "],[-1,2031,"        <em>attachToRoot</em> is true), or else simply an object that\n     *        provides a set of LayoutParams values for root of the returned\n     *        hierarchy (if <em>attachToRoot</em> is false.)\n     * @param attachToRoot Whether the inflated hierarchy should be attached to\n     *        the root parameter? If false, root is only used to create the\n     *        correct subclass of LayoutParams for the root view in the XML.\n     * @return The root View of the inflated hierarchy. If root was supplied and\n     *         attachToRoot is true, this is root; otherwise it is the root of\n     *         the inflated XML file.\n     */\n    public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\n        final Resources res = getContext().getResources();\n        if (DEBUG) {\n            Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\n                    + Integer.toHexString(resource) + \")\");\n        }\n\n        final XmlResourceParser parser = res.getLayout(resource);\n        try {\n            return inflate(parser, root, attachToRoot);\n        } finally {\n            parser.close();\n        }\n    }\n\n\n\n\n/**\r"],[-1,3301,"\r"],[-1,3355,"\r"],[-1,3366,"\r"],[-1,3442,"\r"],[-1,3519,"\r"],[-1,3597,"\r"],[-1,3679,"\r"],[-1,3686,"\r"],[-1,3759,"\r"],[-1,3784,"\r"],[-1,3865,"\r"],[-1,3941,"\r"],[-1,4018,"\r"],[-1,4079,"\r"],[-1,4159,"\r"],[-1,4235,"\r"],[-1,4312,"\r"],[-1,4393,"\r"],[-1,4472,"\r"],[-1,4510,"\r"],[-1,4518,"\r"],[-1,4611,"\r"],[-1,4650,"\r"],[-1,4710,"\r"],[-1,4712,"\r"],[-1,4763,"\r"],[-1,4827,"\r"],[-1,4889,"\r"],[-1,4937,"\r"],[-1,4966,"\r"],[-1,4968,"\r"],[-1,4983,"\r"],[-1,5023,"\r"],[-1,5046,"\r"],[-1,5119,"\r"],[-1,5178,"\r"],[-1,5204,"\r"],[-1,5219,"\r"],[-1,5221,"\r"],[-1,5273,"\r"],[-1,5349,"\r"],[-1,5402,"\r"],[-1,5417,"\r"],[-1,5419,"\r"],[-1,5470,"\r"],[-1,5472,"\r"],[-1,5498,"\r"],[-1,5565,"\r"],[-1,5624,"\r"],[-1,5658,"\r"],[-1,5725,"\r"],[-1,5740,"\r"],[-1,5742,"\r"],[-1,5785,"\r"],[-1,5839,"\r"],[-1,5930,"\r"],[-1,6002,"\r"],[-1,6021,"\r"],[-1,6023,"\r"],[-1,6095,"\r"],[-1,6117,"\r"],[-1,6185,"\r"],[-1,6275,"\r"],[-1,6277,"\r"],[-1,6332,"\r"],[-1,6334,"\r"],[-1,6371,"\r"],[-1,6405,"\r"],[-1,6481,"\r"],[-1,6521,"\r"],[-1,6544,"\r"],[-1,6618,"\r"],[-1,6682,"\r"],[-1,6724,"\r"],[-1,6797,"\r"],[-1,6871,"\r"],[-1,6926,"\r"],[-1,6949,"\r"],[-1,6968,"\r"],[-1,6970,"\r"],[-1,7000,"\r"],[-1,7076,"\r"],[-1,7095,"\r"],[-1,7097,"\r"],[-1,7170,"\r"],[-1,7232,"\r"],[-1,7234,"\r"],[-1,7264,"\r"],[-1,7339,"\r"],[-1,7358,"\r"],[-1,7360,"\r"],[-1,7440,"\r"],[-1,7482,"\r"],[-1,7535,"\r"],[-1,7584,"\r"],[-1,7603,"\r"],[-1,7605,"\r"],[-1,7685,"\r"],[-1,7728,"\r"],[-1,7782,"\r"],[-1,7818,"\r"],[-1,7837,"\r"],[-1,7852,"\r"],[-1,7854,"\r"],[-1,7900,"\r"],[-1,7982,"\r"],[-1,8032,"\r"],[-1,8055,"\r"],[-1,8088,"\r"],[-1,8182,"\r"],[-1,8232,"\r"],[-1,8282,"\r"],[-1,8305,"\r"],[-1,8326,"\r"],[-1,8384,"\r"],[-1,8432,"\r"],[-1,8473,"\r"],[-1,8475,"\r"],[-1,8526,"\r"],[-1,8537,"\r"],[-1,8539,"\r"],[-1,8563,"\r"],[-1,8570,"\r"]],[1688,3221],[1688,1688]]],[1521557970621,["Kotlin@DESKTOP-C3FKI4V",[[1,1689,"/**\r\n    * Inflate a new view hierarchy from the specified xml resource. Throws\r\n    * {@link InflateException} if there is an error.\r\n    *\r\n    * @param resource ID for an XML layout resource to load (e.g.,\r\n    *        <code>R.layout.main_page</code>)\r\n    * @param root Optional view to be the parent of the generated hierarchy (if\r\n    *        <em>attachToRoot</em> is true), or else simply an object that\r\n    *        provides a set of LayoutParams values for root of the returned\r\n    *        hierarchy (if <em>attachToRoot</em> is false.)\r\n    * @param attachToRoot Whether the inflated hierarchy should be attached to\r\n    *        the root parameter? If false, root is only used to create the\r\n    *        correct subclass of LayoutParams for the root view in the XML.\r\n    * @return The root View of the inflated hierarchy. If root was supplied and\r\n    *         attachToRoot is true, this is root; otherwise it is the root of\r\n    *         the inflated XML file.\r\n    */\r\npublic View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\r\n    final Resources res = getContext().getResources();\r\n    if (DEBUG) {\r\n        Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\r\n                + Integer.toHexString(resource) + \")\");\r\n    }\r\n\r\n    final XmlResourceParser parser = res.getLayout(resource);\r\n    try {\r\n        return inflate(parser, root, attachToRoot);\r\n    } finally {\r\n        parser.close();\r\n    }\r\n}"]],[1689,1689],[3184,3184]]],[1521557971915,["Kotlin@DESKTOP-C3FKI4V",[[-1,1689,"/**\r\n    * Inflate a new view hierarchy from the specified xml resource. Throws\r\n    * {@link InflateException} if there is an error.\r\n    *\r\n    * @param resource ID for an XML layout resource to load (e.g.,\r\n    *        <code>R.layout.main_page</code>)\r\n    * @param root Optional view to be the parent of the generated hierarchy (if\r\n    *        <em>attachToRoot</em> is true), or else simply an object that\r\n    *        provides a set of LayoutParams values for root of the returned\r\n    *        hierarchy (if <em>attachToRoot</em> is false.)\r\n    * @param attachToRoot Whether the inflated hierarchy should be attached to\r\n    *        the root parameter? If false, root is only used to create the\r\n    *        correct subclass of LayoutParams for the root view in the XML.\r\n    * @return The root View of the inflated hierarchy. If root was supplied and\r\n    *         attachToRoot is true, this is root; otherwise it is the root of\r\n    *         the inflated XML file.\r\n    */\r\npublic View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\r\n    final Resources res = getContext().getResources();\r\n    if (DEBUG) {\r\n        Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\r\n                + Integer.toHexString(resource) + \")\");\r\n    }\r\n\r\n    final XmlResourceParser parser = res.getLayout(resource);\r\n    try {\r\n        return inflate(parser, root, attachToRoot);\r\n    } finally {\r\n        parser.close();\r\n    }\r\n}"]],[3184,3184],[1689,1689]]],[1521557973150,["Kotlin@DESKTOP-C3FKI4V",[[1,1689,"/**\r\n    * Inflate a new view hierarchy from the specified xml resource. Throws\r\n    * {@link InflateException} if there is an error.\r\n    *\r\n    * @param resource ID for an XML layout resource to load (e.g.,\r\n    *        <code>R.layout.main_page</code>)\r\n    * @param root Optional view to be the parent of the generated hierarchy (if\r\n    *        <em>attachToRoot</em> is true), or else simply an object that\r\n    *        provides a set of LayoutParams values for root of the returned\r\n    *        hierarchy (if <em>attachToRoot</em> is false.)\r\n    * @param attachToRoot Whether the inflated hierarchy should be attached to\r\n    *        the root parameter? If false, root is only used to create the\r\n    *        correct subclass of LayoutParams for the root view in the XML.\r\n    * @return The root View of the inflated hierarchy. If root was supplied and\r\n    *         attachToRoot is true, this is root; otherwise it is the root of\r\n    *         the inflated XML file.\r\n    */\r\npublic View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {\r\n    final Resources res = getContext().getResources();\r\n    if (DEBUG) {\r\n        Log.d(TAG, \"INFLATING from resource: \\\"\" + res.getResourceName(resource) + \"\\\" (\"\r\n                + Integer.toHexString(resource) + \")\");\r\n    }\r\n\r\n    final XmlResourceParser parser = res.getLayout(resource);\r\n    try {\r\n        return inflate(parser, root, attachToRoot);\r\n    } finally {\r\n        parser.close();\r\n    }\r\n}"]],[1689,1689],[3184,3184]]],[1521557976337,["Kotlin@DESKTOP-C3FKI4V",[[-1,1692,"\r"],[-1,1768,"\r"],[-1,1822,"\r"],[-1,1829,"\r"],[-1,1897,"\r"],[-1,1944,"\r"],[-1,2025,"\r"],[-1,2101,"\r"],[-1,2178,"\r"],[-1,2239,"\r"],[-1,2319,"\r"],[-1,2395,"\r"],[-1,2472,"\r"],[-1,2553,"\r"],[-1,2632,"\r"],[-1,2670,"\r"],[-1,2678,"\r"],[-1,2774,"\r"],[-1,2830,"\r"],[-1,2848,"\r"],[-1,2939,"\r"],[-1,2996,"\r"],[-1,3003,"\r"],[-1,3005,"\r"],[-1,3068,"\r"],[-1,3079,"\r"],[-1,3132,"\r"],[-1,3149,"\r"],[-1,3174,"\r"],[-1,3181,"\r"],[-1,3184,"\n"]],[3156,3156],[3156,3156]]],[1521557976525,["Kotlin@DESKTOP-C3FKI4V",[[-1,3156,"\n"]],[3156,3156],[3156,3156]]],[1521557984348,["Kotlin@DESKTOP-C3FKI4V",[[-1,630,"@Override\n    public void setContentView(int layoutResID) {\n        // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\n        // decor, when theme attributes and the like are crystalized. Do not check the feature\n        // before this happens.\n        if (mContentParent == null) {\n            installDecor();\n        } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            mContentParent.removeAllViews();\n        }\n\n        if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\n            final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\n                    getContext());\n            transitionTo(newScene);\n        } else {\n            mLayoutInflater.inflate(layoutResID, mContentParent);\n        }\n        mContentParent.requestApplyInsets();\n        final Callback cb = getCallback();\n        if (cb != null && !isDestroyed()) {\n            cb.onContentChanged();\n        }\n        mContentParentExplicitlySet = true;\n    }"]],[630,1631],[630,630]]],[1521557991551,["Kotlin@DESKTOP-C3FKI4V",[[1,630,"@Override\r\npublic void setContentView(int layoutResID) {\r\n    // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window\r\n    // decor, when theme attributes and the like are crystalized. Do not check the feature\r\n    // before this happens.\r\n    if (mContentParent == null) {\r\n        installDecor();\r\n    } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\r\n        mContentParent.removeAllViews();\r\n    }\r\n\r\n    if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {\r\n        final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,\r\n                getContext());\r\n        transitionTo(newScene);\r\n    } else {\r\n        mLayoutInflater.inflate(layoutResID, mContentParent);\r\n    }\r\n    mContentParent.requestApplyInsets();\r\n    final Callback cb = getCallback();\r\n    if (cb != null && !isDestroyed()) {\r\n        cb.onContentChanged();\r\n    }\r\n    mContentParentExplicitlySet = true;\r\n}"]],[630,630],[1563,1563]]],[1521557995531,[null,[[-1,639,"\r"],[1,640,"\n"],[-1,686,"\r"],[1,687,"\n"],[-1,779,"\r"],[1,780,"\n"],[-1,871,"\r"],[1,872,"\n"],[-1,900,"\r"],[1,901,"\n"],[-1,935,"\r"],[1,936,"\n"],[-1,960,"\r"],[1,961,"\n"],[-1,1020,"\r"],[1,1021,"\n"],[-1,1062,"\r"],[1,1063,"\n"],[-1,1069,"\r\n\r"],[1,1072,"\n\n\n"],[-1,1123,"\r"],[1,1124,"\n"],[-1,1208,"\r"],[1,1209,"\n"],[-1,1240,"\r"],[1,1241,"\n"],[-1,1273,"\r"],[1,1274,"\n"],[-1,1287,"\r"],[1,1288,"\n"],[-1,1350,"\r"],[1,1351,"\n"],[-1,1357,"\r"],[1,1358,"\n"],[-1,1399,"\r"],[1,1400,"\n"],[-1,1439,"\r"],[1,1440,"\n"],[-1,1480,"\r"],[1,1481,"\n"],[-1,1512,"\r"],[1,1513,"\n"],[-1,1519,"\r"],[1,1520,"\n"],[-1,1560,"\r"],[1,1561,"\n"]],[639,639],[1562,1562]]],[1521557995531,[null,[[1,639,"\r"],[-1,639,"\n"],[1,686,"\r"],[-1,686,"\n"],[1,779,"\r"],[-1,779,"\n"],[1,871,"\r"],[-1,871,"\n"],[1,900,"\r"],[-1,900,"\n"],[1,935,"\r"],[-1,935,"\n"],[1,960,"\r"],[-1,960,"\n"],[1,1020,"\r"],[-1,1020,"\n"],[1,1062,"\r"],[-1,1062,"\n"],[1,1069,"\r\n\r"],[-1,1069,"\n\n\n"],[1,1123,"\r"],[-1,1123,"\n"],[1,1208,"\r"],[-1,1208,"\n"],[1,1240,"\r"],[-1,1240,"\n"],[1,1273,"\r"],[-1,1273,"\n"],[1,1287,"\r"],[-1,1287,"\n"],[1,1350,"\r"],[-1,1350,"\n"],[1,1357,"\r"],[-1,1357,"\n"],[1,1399,"\r"],[-1,1399,"\n"],[1,1439,"\r"],[-1,1439,"\n"],[1,1480,"\r"],[-1,1480,"\n"],[1,1512,"\r"],[-1,1512,"\n"],[1,1519,"\r"],[-1,1519,"\n"],[1,1560,"\r"],[-1,1560,"\n"]],[1562,1562],[639,639]]],[1521557994770,["Kotlin@DESKTOP-C3FKI4V",[[-1,629," "],[-1,639,"\r"],[-1,686,"\r"],[-1,779,"\r"],[-1,871,"\r"],[-1,900,"\r"],[-1,935,"\r"],[-1,960,"\r"],[-1,1020,"\r"],[-1,1062,"\r"],[-1,1069,"\r"],[-1,1071,"\r"],[-1,1123,"\r"],[-1,1208,"\r"],[-1,1240,"\r"],[-1,1273,"\r"],[-1,1287,"\r"],[-1,1350,"\r"],[-1,1357,"\r"],[-1,1399,"\r"],[-1,1439,"\r"],[-1,1480,"\r"],[-1,1512,"\r"],[-1,1519,"\r"],[-1,1560,"\r"]],[630,630],[629,629]]],[1521558044843,["Kotlin@DESKTOP-C3FKI4V",[[-1,11975,"\n"]],[11975,11975],[0,0]]],[1521558045056,["Kotlin@DESKTOP-C3FKI4V",[[-1,11974,"\n"],[1,11975,"z"]],[0,0],[11974,11975]]],[1521558045176,["Kotlin@DESKTOP-C3FKI4V",[[1,11975,"u"]],[11974,11975],[11974,11976]]],[1521558045254,["Kotlin@DESKTOP-C3FKI4V",[[1,11976,"i"]],[11974,11976],[11974,11977]]],[1521558046294,["Kotlin@DESKTOP-C3FKI4V",[[-1,11974,"zui"],[1,11977,"最"]],[11974,11977],[11974,11975]]],[1521558047418,["Kotlin@DESKTOP-C3FKI4V",[[1,11974,"zui"],[-1,11974,"最"]],[11974,11975],[11974,11977]]],[1521558048018,["Kotlin@DESKTOP-C3FKI4V",[[-1,11976,"i"]],[11974,11977],[11974,11976]]],[1521558048573,["Kotlin@DESKTOP-C3FKI4V",[[-1,11975,"u"]],[11974,11976],[11974,11975]]],[1521558049065,["Kotlin@DESKTOP-C3FKI4V",[[1,11974,"\n"],[-1,11974,"z"]],[11974,11975],[0,0]]],[1521558052202,["Kotlin@DESKTOP-C3FKI4V",[[1,11975,"\n"]],[11974,11974],[11975,11975]]],[1521558061243,["Kotlin@DESKTOP-C3FKI4V",[[-1,11975,"\n"],[1,11976,"最终发现试图的"]],[11975,11975],[11982,11982]]],[1521558062053,["Kotlin@DESKTOP-C3FKI4V",[[-1,11979,"试图的"]],[11982,11982],[11979,11979]]],[1521558065314,["Kotlin@DESKTOP-C3FKI4V",[[1,11979,"xml"]],[11979,11979],[11982,11982]]],[1521558066207,["Kotlin@DESKTOP-C3FKI4V",[[-1,11979,"xml"]],[11982,11982],[11979,11979]]],[1521558069728,["Kotlin@DESKTOP-C3FKI4V",[[1,11979,"视图的初始化时"]],[11979,11979],[11986,11986]]],[1521558070506,["Kotlin@DESKTOP-C3FKI4V",[[-1,11985,"时"]],[11986,11986],[11985,11985]]],[1521558110313,["Kotlin@DESKTOP-C3FKI4V",[[1,11985,"是通过 LayoutInfleater 中的工厂来进行的初始化"]],[11985,11985],[12016,12016]]],[1521558115831,["Kotlin@DESKTOP-C3FKI4V",[[-1,11981,"的初始化"]],[11981,11985],[11981,11981]]],[1521558118444,["Kotlin@DESKTOP-C3FKI4V",[[1,12012," "]],[12012,12012],[12013,12013]]],[1521558763895,["Kotlin@DESKTOP-C3FKI4V",[[1,11207,"\n"]],[11206,11206],[11207,11207]]],[1521558764067,["Kotlin@DESKTOP-C3FKI4V",[[1,11208,"\n"]],[11207,11207],[11208,11208]]],[1521558764239,["Kotlin@DESKTOP-C3FKI4V",[[1,11209,"\n"]],[11208,11208],[11209,11209]]],[1521558766046,["Kotlin@DESKTOP-C3FKI4V",[[1,11209,"/**\r\n    * Low-level function for instantiating a view by name. This attempts to\r\n    * instantiate a view class of the given <var>name</var> found in this\r\n    * LayoutInflater's ClassLoader.\r\n    *\r\n    * <p>\r\n    * There are two things that can happen in an error case: either the\r\n    * exception describing the error will be thrown, or a null will be\r\n    * returned. You must deal with both possibilities -- the former will happen\r\n    * the first time createView() is called for a class of a particular name,\r\n    * the latter every time there-after for that class name.\r\n    *\r\n    * @param name The full name of the class to be instantiated.\r\n    * @param attrs The XML attributes supplied for this instance.\r\n    *\r\n    * @return View The newly instantiated view, or null.\r\n    */\r\npublic final View createView(String name, String prefix, AttributeSet attrs)\r\n        throws ClassNotFoundException, InflateException {\r\n    Constructor<? extends View> constructor = sConstructorMap.get(name);\r\n    if (constructor != null && !verifyClassLoader(constructor)) {\r\n        constructor = null;\r\n        sConstructorMap.remove(name);\r\n    }\r\n    Class<? extends View> clazz = null;\r\n\r\n    try {\r\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, name);\r\n\r\n        if (constructor == null) {\r\n            // Class not found in the cache, see if it's real, and try to add it\r\n            clazz = mContext.getClassLoader().loadClass(\r\n                    prefix != null ? (prefix + name) : name).asSubclass(View.class);\r\n\r\n            if (mFilter != null && clazz != null) {\r\n                boolean allowed = mFilter.onLoadClass(clazz);\r\n                if (!allowed) {\r\n                    failNotAllowed(name, prefix, attrs);\r\n                }\r\n            }\r\n            constructor = clazz.getConstructor(mConstructorSignature);\r\n            constructor.setAccessible(true);\r\n            sConstructorMap.put(name, constructor);\r\n        } else {\r\n            // If we have a filter, apply it to cached constructor\r\n            if (mFilter != null) {\r\n                // Have we seen this name before?\r\n                Boolean allowedState = mFilterMap.get(name);\r\n                if (allowedState == null) {\r\n                    // New class -- remember whether it is allowed\r\n                    clazz = mContext.getClassLoader().loadClass(\r\n                            prefix != null ? (prefix + name) : name).asSubclass(View.class);\r\n\r\n                    boolean allowed = clazz != null && mFilter.onLoadClass(clazz);\r\n                    mFilterMap.put(name, allowed);\r\n                    if (!allowed) {\r\n                        failNotAllowed(name, prefix, attrs);\r\n                    }\r\n                } else if (allowedState.equals(Boolean.FALSE)) {\r\n                    failNotAllowed(name, prefix, attrs);\r\n                }\r\n            }\r\n        }\r\n\r\n        Object lastContext = mConstructorArgs[0];\r\n        if (mConstructorArgs[0] == null) {\r\n            // Fill in the context if not already within inflation.\r\n            mConstructorArgs[0] = mContext;\r\n        }\r\n        Object[] args = mConstructorArgs;\r\n        args[1] = attrs;\r\n\r\n        final View view = constructor.newInstance(args);\r\n        if (view instanceof ViewStub) {\r\n            // Use the same context when inflating ViewStub later.\r\n            final ViewStub viewStub = (ViewStub) view;\r\n            viewStub.setLayoutInflater(cloneInContext((Context) args[0]));\r\n        }\r\n        mConstructorArgs[0] = lastContext;\r\n        return view;\r\n\r\n    } catch (NoSuchMethodException e) {\r\n        final InflateException ie = new InflateException(attrs.getPositionDescription()\r\n                + \": Error inflating class \" + (prefix != null ? (prefix + name) : name), e);\r\n        ie.setStackTrace(EMPTY_STACK_TRACE);\r\n        throw ie;\r\n\r\n    } catch (ClassCastException e) {\r\n        // If loaded class is not a View subclass\r\n        final InflateException ie = new InflateException(attrs.getPositionDescription()\r\n                + \": Class is not a View \" + (prefix != null ? (prefix + name) : name), e);\r\n        ie.setStackTrace(EMPTY_STACK_TRACE);\r\n        throw ie;\r\n    } catch (ClassNotFoundException e) {\r\n        // If loadClass fails, we should propagate the exception.\r\n        throw e;\r\n    } catch (Exception e) {\r\n        final InflateException ie = new InflateException(\r\n                attrs.getPositionDescription() + \": Error inflating class \"\r\n                        + (clazz == null ? \"<unknown>\" : clazz.getName()), e);\r\n        ie.setStackTrace(EMPTY_STACK_TRACE);\r\n        throw ie;\r\n    } finally {\r\n        Trace.traceEnd(Trace.TRACE_TAG_VIEW);\r\n    }\r\n}"]],[11209,11209],[15886,15886]]],[1521558777945,[null,[[-1,11212,"\r"],[1,11213,"\n"],[-1,11289,"\r"],[1,11290,"\n"],[-1,11364,"\r"],[1,11365,"\n"],[-1,11401,"\r"],[1,11402,"\n"],[-1,11408,"\r"],[1,11409,"\n"],[-1,11419,"\r"],[1,11420,"\n"],[-1,11492,"\r"],[1,11493,"\n"],[-1,11564,"\r"],[1,11565,"\n"],[-1,11645,"\r"],[1,11646,"\n"],[-1,11724,"\r"],[1,11725,"\n"],[-1,11786,"\r"],[1,11787,"\n"],[-1,11793,"\r"],[1,11794,"\n"],[-1,11859,"\r"],[1,11860,"\n"],[-1,11926,"\r"],[1,11927,"\n"],[-1,11933,"\r"],[1,11934,"\n"],[-1,11991,"\r"],[1,11992,"\n"],[-1,11999,"\r"],[1,12000,"\n"],[-1,12077,"\r"],[1,12078,"\n"],[-1,12136,"\r"],[1,12137,"\n"],[-1,12210,"\r"],[1,12211,"\n"],[-1,12277,"\r"],[1,12278,"\n"],[-1,12306,"\r"],[1,12307,"\n"],[-1,12345,"\r"],[1,12346,"\n"],[-1,12352,"\r"],[1,12353,"\n"],[-1,12393,"\r\n\r"],[1,12396,"\n\n\n"],[-1,12406,"\r"],[1,12407,"\n"],[-1,12461,"\r\n\r"],[1,12464,"\n\n\n"],[-1,12499,"\r"],[1,12500,"\n"],[-1,12581,"\r"],[1,12582,"\n"],[-1,12639,"\r"],[1,12640,"\n"],[-1,12725,"\r\n\r"],[1,12728,"\n\n\n"],[-1,12780,"\r"],[1,12781,"\n"],[-1,12843,"\r"],[1,12844,"\n"],[-1,12876,"\r"],[1,12877,"\n"],[-1,12934,"\r"],[1,12935,"\n"],[-1,12953,"\r"],[1,12954,"\n"],[-1,12968,"\r"],[1,12969,"\n"],[-1,13040,"\r"],[1,13041,"\n"],[-1,13086,"\r"],[1,13087,"\n"],[-1,13139,"\r"],[1,13140,"\n"],[-1,13157,"\r"],[1,13158,"\n"],[-1,13225,"\r"],[1,13226,"\n"],[-1,13261,"\r"],[1,13262,"\n"],[-1,13312,"\r"],[1,13313,"\n"],[-1,13374,"\r"],[1,13375,"\n"],[-1,13419,"\r"],[1,13420,"\n"],[-1,13487,"\r"],[1,13488,"\n"],[-1,13553,"\r"],[1,13554,"\n"],[-1,13647,"\r\n\r"],[1,13650,"\n\n\n"],[-1,13733,"\r"],[1,13734,"\n"],[-1,13785,"\r"],[1,13786,"\n"],[-1,13822,"\r"],[1,13823,"\n"],[-1,13884,"\r"],[1,13885,"\n"],[-1,13907,"\r"],[1,13908,"\n"],[-1,13973,"\r"],[1,13974,"\n"],[-1,14031,"\r"],[1,14032,"\n"],[-1,14050,"\r"],[1,14051,"\n"],[-1,14065,"\r"],[1,14066,"\n"],[-1,14076,"\r\n\r"],[1,14079,"\n\n\n"],[-1,14129,"\r"],[1,14130,"\n"],[-1,14173,"\r"],[1,14174,"\n"],[-1,14242,"\r"],[1,14243,"\n"],[-1,14287,"\r"],[1,14288,"\n"],[-1,14298,"\r"],[1,14299,"\n"],[-1,14341,"\r"],[1,14342,"\n"],[-1,14367,"\r\n\r"],[1,14370,"\n\n\n"],[-1,14427,"\r"],[1,14428,"\n"],[-1,14468,"\r"],[1,14469,"\n"],[-1,14536,"\r"],[1,14537,"\n"],[-1,14592,"\r"],[1,14593,"\n"],[-1,14668,"\r"],[1,14669,"\n"],[-1,14679,"\r"],[1,14680,"\n"],[-1,14723,"\r"],[1,14724,"\n"],[-1,14745,"\r\n\r"],[1,14748,"\n\n\n"],[-1,14788,"\r"],[1,14789,"\n"],[-1,14877,"\r"],[1,14878,"\n"],[-1,14972,"\r"],[1,14973,"\n"],[-1,15018,"\r"],[1,15019,"\n"],[-1,15037,"\r\n\r"],[1,15040,"\n\n\n"],[-1,15077,"\r"],[1,15078,"\n"],[-1,15128,"\r"],[1,15129,"\n"],[-1,15217,"\r"],[1,15218,"\n"],[-1,15310,"\r"],[1,15311,"\n"],[-1,15356,"\r"],[1,15357,"\n"],[-1,15375,"\r"],[1,15376,"\n"],[-1,15417,"\r"],[1,15418,"\n"],[-1,15484,"\r"],[1,15485,"\n"],[-1,15502,"\r"],[1,15503,"\n"],[-1,15531,"\r"],[1,15532,"\n"],[-1,15590,"\r"],[1,15591,"\n"],[-1,15667,"\r"],[1,15668,"\n"],[-1,15747,"\r"],[1,15748,"\n"],[-1,15793,"\r"],[1,15794,"\n"],[-1,15812,"\r"],[1,15813,"\n"],[-1,15829,"\r"],[1,15830,"\n"],[-1,15876,"\r"],[1,15877,"\n"],[-1,15883,"\r"],[1,15884,"\n"]],[11212,11212],[15885,15885]]],[1521558777945,[null,[[1,11212,"\r"],[-1,11212,"\n"],[1,11289,"\r"],[-1,11289,"\n"],[1,11364,"\r"],[-1,11364,"\n"],[1,11401,"\r"],[-1,11401,"\n"],[1,11408,"\r"],[-1,11408,"\n"],[1,11419,"\r"],[-1,11419,"\n"],[1,11492,"\r"],[-1,11492,"\n"],[1,11564,"\r"],[-1,11564,"\n"],[1,11645,"\r"],[-1,11645,"\n"],[1,11724,"\r"],[-1,11724,"\n"],[1,11786,"\r"],[-1,11786,"\n"],[1,11793,"\r"],[-1,11793,"\n"],[1,11859,"\r"],[-1,11859,"\n"],[1,11926,"\r"],[-1,11926,"\n"],[1,11933,"\r"],[-1,11933,"\n"],[1,11991,"\r"],[-1,11991,"\n"],[1,11999,"\r"],[-1,11999,"\n"],[1,12077,"\r"],[-1,12077,"\n"],[1,12136,"\r"],[-1,12136,"\n"],[1,12210,"\r"],[-1,12210,"\n"],[1,12277,"\r"],[-1,12277,"\n"],[1,12306,"\r"],[-1,12306,"\n"],[1,12345,"\r"],[-1,12345,"\n"],[1,12352,"\r"],[-1,12352,"\n"],[1,12393,"\r\n\r"],[-1,12393,"\n\n\n"],[1,12406,"\r"],[-1,12406,"\n"],[1,12461,"\r\n\r"],[-1,12461,"\n\n\n"],[1,12499,"\r"],[-1,12499,"\n"],[1,12581,"\r"],[-1,12581,"\n"],[1,12639,"\r"],[-1,12639,"\n"],[1,12725,"\r\n\r"],[-1,12725,"\n\n\n"],[1,12780,"\r"],[-1,12780,"\n"],[1,12843,"\r"],[-1,12843,"\n"],[1,12876,"\r"],[-1,12876,"\n"],[1,12934,"\r"],[-1,12934,"\n"],[1,12953,"\r"],[-1,12953,"\n"],[1,12968,"\r"],[-1,12968,"\n"],[1,13040,"\r"],[-1,13040,"\n"],[1,13086,"\r"],[-1,13086,"\n"],[1,13139,"\r"],[-1,13139,"\n"],[1,13157,"\r"],[-1,13157,"\n"],[1,13225,"\r"],[-1,13225,"\n"],[1,13261,"\r"],[-1,13261,"\n"],[1,13312,"\r"],[-1,13312,"\n"],[1,13374,"\r"],[-1,13374,"\n"],[1,13419,"\r"],[-1,13419,"\n"],[1,13487,"\r"],[-1,13487,"\n"],[1,13553,"\r"],[-1,13553,"\n"],[1,13647,"\r\n\r"],[-1,13647,"\n\n\n"],[1,13733,"\r"],[-1,13733,"\n"],[1,13785,"\r"],[-1,13785,"\n"],[1,13822,"\r"],[-1,13822,"\n"],[1,13884,"\r"],[-1,13884,"\n"],[1,13907,"\r"],[-1,13907,"\n"],[1,13973,"\r"],[-1,13973,"\n"],[1,14031,"\r"],[-1,14031,"\n"],[1,14050,"\r"],[-1,14050,"\n"],[1,14065,"\r"],[-1,14065,"\n"],[1,14076,"\r\n\r"],[-1,14076,"\n\n\n"],[1,14129,"\r"],[-1,14129,"\n"],[1,14173,"\r"],[-1,14173,"\n"],[1,14242,"\r"],[-1,14242,"\n"],[1,14287,"\r"],[-1,14287,"\n"],[1,14298,"\r"],[-1,14298,"\n"],[1,14341,"\r"],[-1,14341,"\n"],[1,14367,"\r\n\r"],[-1,14367,"\n\n\n"],[1,14427,"\r"],[-1,14427,"\n"],[1,14468,"\r"],[-1,14468,"\n"],[1,14536,"\r"],[-1,14536,"\n"],[1,14592,"\r"],[-1,14592,"\n"],[1,14668,"\r"],[-1,14668,"\n"],[1,14679,"\r"],[-1,14679,"\n"],[1,14723,"\r"],[-1,14723,"\n"],[1,14745,"\r\n\r"],[-1,14745,"\n\n\n"],[1,14788,"\r"],[-1,14788,"\n"],[1,14877,"\r"],[-1,14877,"\n"],[1,14972,"\r"],[-1,14972,"\n"],[1,15018,"\r"],[-1,15018,"\n"],[1,15037,"\r\n\r"],[-1,15037,"\n\n\n"],[1,15077,"\r"],[-1,15077,"\n"],[1,15128,"\r"],[-1,15128,"\n"],[1,15217,"\r"],[-1,15217,"\n"],[1,15310,"\r"],[-1,15310,"\n"],[1,15356,"\r"],[-1,15356,"\n"],[1,15375,"\r"],[-1,15375,"\n"],[1,15417,"\r"],[-1,15417,"\n"],[1,15484,"\r"],[-1,15484,"\n"],[1,15502,"\r"],[-1,15502,"\n"],[1,15531,"\r"],[-1,15531,"\n"],[1,15590,"\r"],[-1,15590,"\n"],[1,15667,"\r"],[-1,15667,"\n"],[1,15747,"\r"],[-1,15747,"\n"],[1,15793,"\r"],[-1,15793,"\n"],[1,15812,"\r"],[-1,15812,"\n"],[1,15829,"\r"],[-1,15829,"\n"],[1,15876,"\r"],[-1,15876,"\n"],[1,15883,"\r"],[-1,15883,"\n"]],[15885,15885],[11212,11212]]],[1521558777361,["Kotlin@DESKTOP-C3FKI4V",[[-1,11212,"\r"],[-1,11289,"\r"],[-1,11364,"\r"],[-1,11401,"\r"],[-1,11408,"\r"],[-1,11419,"\r"],[-1,11492,"\r"],[-1,11564,"\r"],[-1,11645,"\r"],[-1,11724,"\r"],[-1,11786,"\r"],[-1,11793,"\r"],[-1,11859,"\r"],[-1,11926,"\r"],[-1,11933,"\r"],[-1,11991,"\r"],[-1,11999,"\r"],[-1,12077,"\r"],[-1,12136,"\r"],[-1,12210,"\r"],[-1,12277,"\r"],[-1,12306,"\r"],[-1,12345,"\r"],[-1,12352,"\r"],[-1,12393,"\r"],[-1,12395,"\r"],[-1,12406,"\r"],[-1,12461,"\r"],[-1,12463,"\r"],[-1,12499,"\r"],[-1,12581,"\r"],[-1,12639,"\r"],[-1,12725,"\r"],[-1,12727,"\r"],[-1,12780,"\r"],[-1,12843,"\r"],[-1,12876,"\r"],[-1,12934,"\r"],[-1,12953,"\r"],[-1,12968,"\r"],[-1,13040,"\r"],[-1,13086,"\r"],[-1,13139,"\r"],[-1,13157,"\r"],[-1,13225,"\r"],[-1,13261,"\r"],[-1,13312,"\r"],[-1,13374,"\r"],[-1,13419,"\r"],[-1,13487,"\r"],[-1,13553,"\r"],[-1,13647,"\r"],[-1,13649,"\r"],[-1,13733,"\r"],[-1,13785,"\r"],[-1,13822,"\r"],[-1,13884,"\r"],[-1,13907,"\r"],[-1,13973,"\r"],[-1,14031,"\r"],[-1,14050,"\r"],[-1,14065,"\r"],[-1,14076,"\r"],[-1,14078,"\r"],[-1,14129,"\r"],[-1,14173,"\r"],[-1,14242,"\r"],[-1,14287,"\r"],[-1,14298,"\r"],[-1,14341,"\r"],[-1,14367,"\r"],[-1,14369,"\r"],[-1,14427,"\r"],[-1,14468,"\r"],[-1,14536,"\r"],[-1,14592,"\r"],[-1,14668,"\r"],[-1,14679,"\r"],[-1,14723,"\r"],[-1,14745,"\r"],[-1,14747,"\r"],[-1,14788,"\r"],[-1,14877,"\r"],[-1,14972,"\r"],[-1,15018,"\r"],[-1,15037,"\r"],[-1,15039,"\r"],[-1,15077,"\r"],[-1,15128,"\r"],[-1,15217,"\r"],[-1,15310,"\r"],[-1,15356,"\r"],[-1,15375,"\r"],[-1,15417,"\r"],[-1,15484,"\r"],[-1,15502,"\r"],[-1,15531,"\r"],[-1,15590,"\r"],[-1,15667,"\r"],[-1,15747,"\r"],[-1,15793,"\r"],[-1,15812,"\r"],[-1,15829,"\r"],[-1,15876,"\r"],[-1,15883,"\r"],[1,15936,"\n"]],[15831,15831],[15832,15832]]],[1521558788287,["Kotlin@DESKTOP-C3FKI4V",[[-1,15790,"追溯到系统是如何通过 layout.xml 进行的视图的初始化操作"]],[15790,15823],[15790,15790]]],[1521558800562,["Kotlin@DESKTOP-C3FKI4V",[[1,15790,"发现原来系统是将Layout。"]],[15790,15790],[15805,15805]]],[1521558802566,["Kotlin@DESKTOP-C3FKI4V",[[-1,15798,"Layout。"]],[15805,15805],[15798,15798]]],[1521558804713,["Kotlin@DESKTOP-C3FKI4V",[[1,15798," layout"]],[15798,15798],[15805,15805]]],[1521558805988,["Kotlin@DESKTOP-C3FKI4V",[[-1,15799,"layout"]],[15805,15805],[15799,15799]]],[1521558807275,["Kotlin@DESKTOP-C3FKI4V",[[1,15799,"···"]],[15799,15799],[15802,15802]]],[1521558808568,["Kotlin@DESKTOP-C3FKI4V",[[-1,15799,"···"]],[15802,15802],[15799,15799]]],[1521558812221,["Kotlin@DESKTOP-C3FKI4V",[[1,15799,"```layout.cml"]],[15799,15799],[15812,15812]]],[1521558813228,["Kotlin@DESKTOP-C3FKI4V",[[-1,15809,"cml"]],[15812,15812],[15809,15809]]],[1521558819307,["Kotlin@DESKTOP-C3FKI4V",[[1,15809,"cml``` 进行"]],[15809,15809],[15818,15818]]],[1521558822938,["Kotlin@DESKTOP-C3FKI4V",[[-1,15809,"c"]],[15810,15810],[15809,15809]]],[1521558823694,["Kotlin@DESKTOP-C3FKI4V",[[1,15809,"x"]],[15809,15809],[15810,15810]]],[1521558830184,["Kotlin@DESKTOP-C3FKI4V",[[1,15818," pull 接卸"]],[15818,15818],[15826,15826]]],[1521558830771,["Kotlin@DESKTOP-C3FKI4V",[[-1,15824,"接卸"]],[15826,15826],[15824,15824]]],[1521558837125,["Kotlin@DESKTOP-C3FKI4V",[[1,15824,"解析，最终"]],[15824,15824],[15829,15829]]],[1521558839722,["Kotlin@DESKTOP-C3FKI4V",[[1,15829,"使用的是java"]],[15829,15829],[15837,15837]]],[1521558841779,["Kotlin@DESKTOP-C3FKI4V",[[-1,15833,"java"]],[15837,15837],[15833,15833]]],[1521558863528,["Kotlin@DESKTOP-C3FKI4V",[[1,15833," java 中的 反射的方式初始化了 xml 标签中对应的 视图的"]],[15833,15833],[15866,15866]]],[1521558864092,["Kotlin@DESKTOP-C3FKI4V",[[-1,15863,"视图的"]],[15866,15866],[15863,15863]]],[1521558868973,["Kotlin@DESKTOP-C3FKI4V",[[1,15863,"View 的实例"]],[15863,15863],[15871,15871]]],[1521558885852,["Kotlin@DESKTOP-C3FKI4V",[[-1,15871,"，关键代码如下："]],[15871,15879],[15871,15871]]],[1521558887142,["Kotlin@DESKTOP-C3FKI4V",[[1,15871,"；"]],[15871,15871],[15872,15872]]],[1521558888595,["Kotlin@DESKTOP-C3FKI4V",[[1,15874,"\n"]],[15872,15872],[15873,15873]]],[1521558889056,["Kotlin@DESKTOP-C3FKI4V",[[1,15875,"\n"]],[15873,15873],[15874,15874]]],[1521558890766,["Kotlin@DESKTOP-C3FKI4V",[[1,15874,"随意"]],[15874,15874],[15876,15876]]],[1521558891318,["Kotlin@DESKTOP-C3FKI4V",[[-1,15874,"随意"]],[15876,15876],[15874,15874]]],[1521558899319,["Kotlin@DESKTOP-C3FKI4V",[[1,15874,"所以如果我们打算"]],[15874,15874],[15882,15882]]],[1521558899703,["Kotlin@DESKTOP-C3FKI4V",[[-1,15880,"打算"]],[15882,15882],[15880,15880]]],[1521558905163,["Kotlin@DESKTOP-C3FKI4V",[[1,15880,"想要在视图"]],[15880,15880],[15885,15885]]],[1521558908273,["Kotlin@DESKTOP-C3FKI4V",[[-1,15882,"在视图"]],[15885,15885],[15882,15882]]],[1521558910392,["Kotlin@DESKTOP-C3FKI4V",[[1,15882,"对师徒"]],[15882,15882],[15885,15885]]],[1521558910943,["Kotlin@DESKTOP-C3FKI4V",[[-1,15883,"师徒"]],[15885,15885],[15883,15883]]],[1521558911890,["Kotlin@DESKTOP-C3FKI4V",[[1,15883,"师徒"]],[15883,15883],[15885,15885]]],[1521558912554,["Kotlin@DESKTOP-C3FKI4V",[[-1,15883,"师徒"]],[15885,15885],[15883,15883]]],[1521558918522,["Kotlin@DESKTOP-C3FKI4V",[[1,15883,"视图喧嚷"]],[15883,15883],[15887,15887]]],[1521558919168,["Kotlin@DESKTOP-C3FKI4V",[[-1,15885,"喧嚷"]],[15887,15887],[15885,15885]]],[1521558947621,["Kotlin@DESKTOP-C3FKI4V",[[1,15885,"渲染并加入自己的处理逻辑，可以效仿这种实现方式定义自己的解析"]],[15885,15885],[15915,15915]]],[1521558956050,["Kotlin@DESKTOP-C3FKI4V",[[1,15915,"规则以及对标记为"]],[15915,15915],[15923,15923]]],[1521558956915,["Kotlin@DESKTOP-C3FKI4V",[[-1,15920,"标记为"]],[15923,15923],[15920,15920]]],[1521558962226,["Kotlin@DESKTOP-C3FKI4V",[[1,15920,"想要进行"]],[15920,15920],[15924,15924]]],[1521558966201,["Kotlin@DESKTOP-C3FKI4V",[[-1,15904,"实现方式定义自己的解析规则以及对想要进行"]],[15924,15924],[15904,15904]]],[1521558969221,["Kotlin@DESKTOP-C3FKI4V",[[1,15904,"实现方式"]],[15904,15904],[15908,15908]]],[1521558977918,["Kotlin@DESKTOP-C3FKI4V",[[-1,15890,"自己的处理逻辑"],[1,15897,"换肤功能"]],[15890,15897],[15894,15894]]],[1521558999106,["Kotlin@DESKTOP-C3FKI4V",[[1,15905,"，对需要换肤的几个属性进行处理即可，关键"]],[15905,15905],[15925,15925]]],[1521558999552,["Kotlin@DESKTOP-C3FKI4V",[[-1,15923,"关键"]],[15925,15925],[15923,15923]]],[1521559007285,["Kotlin@DESKTOP-C3FKI4V",[[1,15923,"经过阅读发现"]],[15923,15923],[15929,15929]]],[1521559012834,["Kotlin@DESKTOP-C3FKI4V",[[1,15929,"下面的关键代码》"]],[15929,15929],[15937,15937]]],[1521559013518,["Kotlin@DESKTOP-C3FKI4V",[[-1,15936,"》"]],[15937,15937],[15936,15936]]],[1521559013869,["Kotlin@DESKTOP-C3FKI4V",[[1,15936,"“"]],[15936,15936],[15937,15937]]],[1521559014471,["Kotlin@DESKTOP-C3FKI4V",[[-1,15936,"“"]],[15937,15937],[15936,15936]]],[1521559014945,["Kotlin@DESKTOP-C3FKI4V",[[1,15936,"："]],[15936,15936],[15937,15937]]],[1521559037162,["Kotlin@DESKTOP-C3FKI4V",[[1,16285,"\n"]],[16284,16284],[16285,16285]]],[1521559044368,["Kotlin@DESKTOP-C3FKI4V",[[1,16285,"//以上条件都不慢速的"]],[16285,16285],[16296,16296]]],[1521559045117,["Kotlin@DESKTOP-C3FKI4V",[[-1,16293,"慢速的"]],[16296,16296],[16293,16293]]],[1521559054710,["Kotlin@DESKTOP-C3FKI4V",[[1,16293,"满足的时候这里会被击中"]],[16293,16293],[16304,16304]]],[1521559058886,["Kotlin@DESKTOP-C3FKI4V",[[1,15958,"\n"]],[15957,15957],[15958,15958]]],[1521559086552,["Kotlin@DESKTOP-C3FKI4V",[[1,15958,"//这里就是我们换肤的关键点，只要将 mFactory2 she"]],[15958,15958],[15990,15990]]],[1521559087363,["Kotlin@DESKTOP-C3FKI4V",[[-1,15987,"she"]],[15990,15990],[15987,15987]]],[1521559098480,["Kotlin@DESKTOP-C3FKI4V",[[1,15987,"机型"]],[15987,15987],[15989,15989]]],[1521559098854,["Kotlin@DESKTOP-C3FKI4V",[[-1,15987,"机型"]],[15989,15989],[15987,15987]]],[1521559110182,["Kotlin@DESKTOP-C3FKI4V",[[1,15987,"进行初始化操作即可改变原来代码的"]],[15987,15987],[16003,16003]]],[1521559116654,["Kotlin@DESKTOP-C3FKI4V",[[1,16003,"逻辑，"]],[16003,16003],[16006,16006]]],[1521559121348,["Kotlin@DESKTOP-C3FKI4V",[[-1,15996,"改变原来代码的逻辑，"]],[16006,16006],[15996,15996]]],[1521559127457,["Kotlin@DESKTOP-C3FKI4V",[[1,15996,"将视图的出耍"]],[15996,15996],[16002,16002]]],[1521559128074,["Kotlin@DESKTOP-C3FKI4V",[[-1,16000,"出耍"]],[16002,16002],[16000,16000]]],[1521559130288,["Kotlin@DESKTOP-C3FKI4V",[[1,16000,"出似乎哈"]],[16000,16000],[16004,16004]]],[1521559131145,["Kotlin@DESKTOP-C3FKI4V",[[-1,16000,"出似乎哈"]],[16004,16004],[16000,16000]]],[1521559138958,["Kotlin@DESKTOP-C3FKI4V",[[1,16000,"初始化操作自己掌控。"]],[16000,16000],[16010,16010]]],[1521559229579,["Kotlin@DESKTOP-C3FKI4V",[[-1,16729,"\n最终发现视图是通过 LayoutInfleater 中的工厂来进行的初始化 "]],[16729,16768],[16729,16729]]],[1521559244113,["Kotlin@DESKTOP-C3FKI4V",[[1,16103,"\n"]],[16103,16103],[16104,16104]]],[1521559244280,["Kotlin@DESKTOP-C3FKI4V",[[1,16104,"\n"]],[16104,16104],[16105,16105]]],[1521559245843,["Kotlin@DESKTOP-C3FKI4V",[[1,16105,"\n"]],[16104,16104],[16105,16105]]],[1521559248342,["Kotlin@DESKTOP-C3FKI4V",[[1,16105,"、、"]],[16105,16105],[16107,16107]]],[1521559248947,["Kotlin@DESKTOP-C3FKI4V",[[-1,16105,"、、"]],[16107,16107],[16105,16105]]],[1521559259686,["Kotlin@DESKTOP-C3FKI4V",[[1,16105,"//之所以不选择Fractory"]],[16105,16105],[16121,16121]]],[1521559261871,["Kotlin@DESKTOP-C3FKI4V",[[-1,16113,"Fractory"]],[16121,16121],[16113,16113]]],[1521559289732,["Kotlin@DESKTOP-C3FKI4V",[[1,16113,"实例化 Factory 是因为我们还要将初始化后的视图设置到"]],[16113,16113],[16143,16143]]],[1521559299053,["Kotlin@DESKTOP-C3FKI4V",[[1,16143,"父容器中，儿"]],[16143,16143],[16149,16149]]],[1521559299485,["Kotlin@DESKTOP-C3FKI4V",[[-1,16148,"儿"]],[16149,16149],[16148,16148]]],[1521559306658,["Kotlin@DESKTOP-C3FKI4V",[[1,16148,"而F让爱从头人员"]],[16148,16148],[16156,16156]]],[1521559307941,["Kotlin@DESKTOP-C3FKI4V",[[-1,16149,"F让爱从头人员"]],[16156,16156],[16149,16149]]],[1521559322693,["Kotlin@DESKTOP-C3FKI4V",[[1,16149," Factory 不支持这个操作，所以"]],[16149,16149],[16168,16168]]],[1521559324143,["Kotlin@DESKTOP-C3FKI4V",[[-1,16165,"，所以"]],[16168,16168],[16165,16165]]],[1521559324879,["Kotlin@DESKTOP-C3FKI4V",[[1,16165,"。"]],[16165,16165],[16166,16166]]],[1521559325629,["Kotlin@DESKTOP-C3FKI4V",[[-1,16165,"。"]],[16166,16166],[16165,16165]]],[1521559325854,["Kotlin@DESKTOP-C3FKI4V",[[1,16165,"；"]],[16165,16165],[16166,16166]]],[1521559331565,["Kotlin@DESKTOP-C3FKI4V",[[-1,16009,"。"]],[16010,16010],[16009,16009]]],[1521559331889,["Kotlin@DESKTOP-C3FKI4V",[[1,16009,";"]],[16009,16009],[16010,16010]]],[1521559339729,["Kotlin@DESKTOP-C3FKI4V",[[1,16404,"zhes"]],[16404,16404],[16408,16408]]],[1521559340720,["Kotlin@DESKTOP-C3FKI4V",[[-1,16404,"zhes"]],[16408,16408],[16404,16404]]],[1521559341822,["Kotlin@DESKTOP-C3FKI4V",[[1,16404,"zhes"]],[16404,16404],[16408,16408]]],[1521559342664,["Kotlin@DESKTOP-C3FKI4V",[[-1,16404,"zhes"]],[16408,16408],[16404,16404]]],[1521559349097,["Kotlin@DESKTOP-C3FKI4V",[[1,16404,"这是默认的实现方式，"]],[16404,16404],[16414,16414]]],[1521559360646,["Kotlin@DESKTOP-C3FKI4V",[[1,16803,"\n\n"]],[16803,16803],[16804,16804]]],[1521559360763,["Kotlin@DESKTOP-C3FKI4V",[[1,16805,"\n"]],[16804,16804],[16805,16805]]],[1521559364989,["Kotlin@DESKTOP-C3FKI4V",[[-1,16805,"\n"],[1,16806,"所以在接"]],[16805,16805],[16809,16809]]],[1521559365787,["Kotlin@DESKTOP-C3FKI4V",[[-1,16805,"所以在接"]],[16809,16809],[16805,16805]]],[1521559367536,["Kotlin@DESKTOP-C3FKI4V",[[-1,16804,"\n"],[1,16805,"扎到了"]],[16805,16805],[16807,16807]]],[1521559368568,["Kotlin@DESKTOP-C3FKI4V",[[-1,16805,"到了"]],[16807,16807],[16805,16805]]],[1521559368790,["Kotlin@DESKTOP-C3FKI4V",[[-1,16804,"扎"],[1,16805,"\n"]],[16805,16805],[16804,16804]]],[1521559385395,["Kotlin@DESKTOP-C3FKI4V",[[-1,16804,"\n"],[1,16805,"了解了以上的知识后我们就好处理了"]],[16804,16804],[16820,16820]]],[1521559388122,["Kotlin@DESKTOP-C3FKI4V",[[-1,16805,"解了以上的知识后我们就好处理了"]],[16820,16820],[16805,16805]]],[1521559388174,["Kotlin@DESKTOP-C3FKI4V",[[-1,16804,"了"],[1,16805,"\n"]],[16805,16805],[16804,16804]]],[1521559388225,["Kotlin@DESKTOP-C3FKI4V",[[-1,16804,"\n"]],[16804,16804],[16803,16803]]],[1521559388387,["Kotlin@DESKTOP-C3FKI4V",[[-1,16800,"```"]],[16803,16803],[16800,16800]]],[1521559389593,["Kotlin@DESKTOP-C3FKI4V",[[1,16800,"```"]],[16800,16800],[16803,16803]]],[1521559390643,["Kotlin@DESKTOP-C3FKI4V",[[1,16804,"\n"]],[16803,16803],[16804,16804]]],[1521559399370,["Kotlin@DESKTOP-C3FKI4V",[[-1,16804,"\n"],[1,16805,"通过上面的原码我们"]],[16804,16804],[16813,16813]]],[1521559400385,["Kotlin@DESKTOP-C3FKI4V",[[-1,16809,"原码我们"]],[16813,16813],[16809,16809]]],[1521559419921,["Kotlin@DESKTOP-C3FKI4V",[[1,16809,"源码我们可以知道，只要我们自定义一个Factory2 "]],[16809,16809],[16836,16836]]],[1521559421979,["Kotlin@DESKTOP-C3FKI4V",[[1,16827," "]],[16827,16827],[16828,16828]]],[1521559469114,["Kotlin@DESKTOP-C3FKI4V",[[1,16837," 并将其实例化后赋值给 LayoutInflaterLayoutInflater"]],[16837,16837],[16877,16877]]],[1521559470024,["Kotlin@DESKTOP-C3FKI4V",[[-1,16837," 并将其实例化后赋值给 LayoutInflaterLayoutInflater"]],[16877,16877],[16837,16837]]],[1521559472578,["Kotlin@DESKTOP-C3FKI4V",[[1,16837," 并将其实例化后赋值给 LayoutInflaterLayoutInflater"]],[16837,16837],[16877,16877]]],[1521559476266,["Kotlin@DESKTOP-C3FKI4V",[[-1,16863,"LayoutInflater"]],[16863,16877],[16863,16863]]],[1521559476698,["Kotlin@DESKTOP-C3FKI4V",[[1,16863," "]],[16863,16863],[16864,16864]]],[1521559482891,["Kotlin@DESKTOP-C3FKI4V",[[1,16864,"中的 ，"]],[16864,16864],[16868,16868]]],[1521559483395,["Kotlin@DESKTOP-C3FKI4V",[[-1,16867,"，"]],[16868,16868],[16867,16867]]],[1521559484175,["Kotlin@DESKTOP-C3FKI4V",[[1,16867,"m"]],[16867,16867],[16868,16868]]],[1521559484538,["Kotlin@DESKTOP-C3FKI4V",[[-1,16867,"m"]],[16868,16868],[16867,16867]]],[1521559485520,["Kotlin@DESKTOP-C3FKI4V",[[1,16867,"，"]],[16867,16867],[16868,16868]]],[1521559486138,["Kotlin@DESKTOP-C3FKI4V",[[-1,16867,"，"]],[16868,16868],[16867,16867]]],[1521559501910,["Kotlin@DESKTOP-C3FKI4V",[[1,16867,"mFactory2 即可拦截"]],[16867,16867],[16881,16881]]],[1521559505160,["Kotlin@DESKTOP-C3FKI4V",[[-1,16877,"即可拦截"]],[16881,16881],[16877,16877]]],[1521559525306,["Kotlin@DESKTOP-C3FKI4V",[[1,16877,"即可将视图的初始化逻辑拦截到自定义的 Factory2 中；"]],[16877,16877],[16907,16907]]],[1521559526142,["Kotlin@DESKTOP-C3FKI4V",[[1,16907,"\n\n"]],[16907,16907],[16908,16908]]],[1521559526968,["Kotlin@DESKTOP-C3FKI4V",[[-1,16908,"\n"]],[16908,16908],[16907,16907]]],[1521559535866,["Kotlin@DESKTOP-C3FKI4V",[[1,16907,"下面就让我们来实现自己的 "]],[16907,16907],[16920,16920]]],[1521559547375,["Kotlin@DESKTOP-C3FKI4V",[[1,16920,"Factory2 gongn"]],[16920,16920],[16934,16934]]],[1521559548333,["Kotlin@DESKTOP-C3FKI4V",[[-1,16929,"gongn"]],[16934,16934],[16929,16929]]],[1521559552397,["Kotlin@DESKTOP-C3FKI4V",[[1,16929,"功能逻辑吧。"]],[16929,16929],[16935,16935]]]]]]}